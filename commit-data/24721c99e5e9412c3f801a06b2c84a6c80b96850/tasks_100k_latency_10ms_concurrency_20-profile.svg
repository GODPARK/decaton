<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (303 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 8.25%)</title><rect x="10.0" y="739.0" width="97.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 8.25%)</title><rect x="10.0" y="723.0" width="97.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.99%)</title><rect x="10.0" y="707.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.66%)</title><rect x="10.0" y="691.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.66%)</title><rect x="10.0" y="675.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.66%)</title><rect x="10.0" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.66%)</title><rect x="10.0" y="643.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.66%)</title><rect x="10.0" y="627.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="10.0" y="611.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.33%)</title><rect x="10.0" y="595.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="10.0" y="579.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="10.0" y="563.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/35142273.test (1 samples, 0.33%)</title><rect x="10.0" y="547.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.33%)</title><rect x="13.9" y="611.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.33%)</title><rect x="13.9" y="595.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.33%)</title><rect x="13.9" y="579.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.33%)</title><rect x="13.9" y="563.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.33%)</title><rect x="13.9" y="547.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.33%)</title><rect x="17.8" y="691.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pause (1 samples, 0.33%)</title><rect x="17.8" y="675.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.paused (1 samples, 0.33%)</title><rect x="17.8" y="659.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.33%)</title><rect x="21.7" y="707.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.33%)</title><rect x="21.7" y="691.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.33%)</title><rect x="21.7" y="675.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.64%)</title><rect x="25.6" y="707.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.6" y="718.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/1825304760.accept (8 samples, 2.64%)</title><rect x="25.6" y="691.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.6" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (8 samples, 2.64%)</title><rect x="25.6" y="675.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.6" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.32%)</title><rect x="25.6" y="659.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.32%)</title><rect x="25.6" y="643.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.32%)</title><rect x="25.6" y="627.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.32%)</title><rect x="25.6" y="611.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.32%)</title><rect x="25.6" y="595.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="37.3" y="579.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="40.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (4 samples, 1.32%)</title><rect x="41.2" y="659.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.32%)</title><rect x="41.2" y="643.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.2" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.99%)</title><rect x="45.0" y="627.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.0" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.66%)</title><rect x="45.0" y="611.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.0" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.66%)</title><rect x="45.0" y="595.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.0" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.66%)</title><rect x="45.0" y="579.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.0" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="48.9" y="563.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="51.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.33%)</title><rect x="52.8" y="611.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.29%)</title><rect x="56.7" y="707.0" width="50.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.7" y="718.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.29%)</title><rect x="56.7" y="691.0" width="50.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.7" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.33%)</title><rect x="56.7" y="675.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.30%)</title><rect x="60.6" y="675.0" width="39.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.6" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="60.6" y="659.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="60.6" y="643.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.33%)</title><rect x="60.6" y="627.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.33%)</title><rect x="60.6" y="611.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.6" y="622.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.33%)</title><rect x="60.6" y="595.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1518263151.get (1 samples, 0.33%)</title><rect x="60.6" y="579.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="64.5" y="627.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="64.5" y="611.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="64.5" y="595.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.33%)</title><rect x="64.5" y="579.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="64.5" y="563.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="64.5" y="547.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="64.5" y="531.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.33%)</title><rect x="64.5" y="515.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/74310545.shouldBlock (1 samples, 0.33%)</title><rect x="68.4" y="627.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.33%)</title><rect x="68.4" y="611.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.33%)</title><rect x="68.4" y="595.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.33%)</title><rect x="68.4" y="579.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="68.4" y="563.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.33%)</title><rect x="68.4" y="547.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.33%)</title><rect x="68.4" y="531.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="68.4" y="515.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="68.4" y="499.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.33%)</title><rect x="68.4" y="483.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.33%)</title><rect x="68.4" y="467.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$BooleanTerminalSink.cancellationRequested (1 samples, 0.33%)</title><rect x="68.4" y="451.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="72.3" y="627.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="72.3" y="611.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="72.3" y="595.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="72.3" y="579.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.32%)</title><rect x="76.2" y="659.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.32%)</title><rect x="76.2" y="643.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.66%)</title><rect x="76.2" y="627.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.66%)</title><rect x="76.2" y="611.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.33%)</title><rect x="76.2" y="595.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.33%)</title><rect x="76.2" y="579.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.33%)</title><rect x="76.2" y="563.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.33%)</title><rect x="76.2" y="547.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.33%)</title><rect x="76.2" y="531.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.33%)</title><rect x="76.2" y="515.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.33%)</title><rect x="76.2" y="499.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.33%)</title><rect x="76.2" y="483.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.33%)</title><rect x="80.1" y="595.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="80.1" y="579.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="83.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.33%)</title><rect x="80.1" y="563.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="83.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="80.1" y="547.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="83.1" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.33%)</title><rect x="80.1" y="531.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="83.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.66%)</title><rect x="84.0" y="627.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.33%)</title><rect x="87.9" y="611.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.66%)</title><rect x="91.8" y="659.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.66%)</title><rect x="91.8" y="643.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.33%)</title><rect x="91.8" y="627.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/285906784.accept (1 samples, 0.33%)</title><rect x="91.8" y="611.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.33%)</title><rect x="91.8" y="595.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.33%)</title><rect x="91.8" y="579.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.33%)</title><rect x="91.8" y="563.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="91.8" y="547.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="91.8" y="531.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.33%)</title><rect x="95.7" y="627.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.7" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="95.7" y="611.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="98.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="95.7" y="595.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="98.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.33%)</title><rect x="99.6" y="675.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.33%)</title><rect x="99.6" y="659.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.33%)</title><rect x="99.6" y="643.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.33%)</title><rect x="99.6" y="627.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/964374334.accept (1 samples, 0.33%)</title><rect x="99.6" y="611.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.33%)</title><rect x="103.5" y="675.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.33%)</title><rect x="103.5" y="659.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.33%)</title><rect x="103.5" y="643.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.33%)</title><rect x="103.5" y="627.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.5" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.33%)</title><rect x="103.5" y="611.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.5" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (239 samples, 78.88%)</title><rect x="107.4" y="739.0" width="930.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.4" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (239 samples, 78.88%)</title><rect x="107.4" y="723.0" width="930.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.4" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (239 samples, 78.88%)</title><rect x="107.4" y="707.0" width="930.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.4" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/737715586.run (225 samples, 74.26%)</title><rect x="107.4" y="691.0" width="876.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.4" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/737715586.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (225 samples, 74.26%)</title><rect x="107.4" y="675.0" width="876.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.4" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (225 samples, 74.26%)</title><rect x="107.4" y="659.0" width="876.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.4" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (218 samples, 71.95%)</title><rect x="107.4" y="643.0" width="848.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.4" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (45 samples, 14.85%)</title><rect x="122.9" y="627.0" width="175.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.9" y="638.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (45 samples, 14.85%)</title><rect x="122.9" y="611.0" width="175.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.9" y="622.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (45 samples, 14.85%)</title><rect x="122.9" y="595.0" width="175.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.9" y="606.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 14.85%)</title><rect x="122.9" y="579.0" width="175.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.9" y="590.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 14.85%)</title><rect x="122.9" y="563.0" width="175.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.9" y="574.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (45 samples, 14.85%)</title><rect x="122.9" y="547.0" width="175.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.9" y="558.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 2.97%)</title><rect x="122.9" y="531.0" width="35.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.9" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.32%)</title><rect x="122.9" y="515.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.32%)</title><rect x="122.9" y="499.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.66%)</title><rect x="130.7" y="483.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.66%)</title><rect x="130.7" y="467.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.66%)</title><rect x="130.7" y="451.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="133.7" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.66%)</title><rect x="130.7" y="435.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.7" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.66%)</title><rect x="130.7" y="419.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.65%)</title><rect x="138.5" y="515.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.33%)</title><rect x="138.5" y="499.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.32%)</title><rect x="142.4" y="499.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.66%)</title><rect x="146.3" y="483.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.66%)</title><rect x="146.3" y="467.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.66%)</title><rect x="146.3" y="451.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.33%)</title><rect x="154.1" y="483.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (29 samples, 9.57%)</title><rect x="158.0" y="531.0" width="112.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.0" y="542.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.66%)</title><rect x="158.0" y="515.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.66%)</title><rect x="158.0" y="499.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.33%)</title><rect x="158.0" y="483.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.33%)</title><rect x="158.0" y="467.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.33%)</title><rect x="161.9" y="483.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.32%)</title><rect x="165.8" y="515.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.32%)</title><rect x="165.8" y="499.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="169.7" y="483.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.66%)</title><rect x="173.6" y="483.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.99%)</title><rect x="181.4" y="515.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.66%)</title><rect x="185.2" y="499.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.66%)</title><rect x="185.2" y="483.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.66%)</title><rect x="185.2" y="467.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.33%)</title><rect x="189.1" y="451.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (20 samples, 6.60%)</title><rect x="193.0" y="515.0" width="77.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.0" y="526.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.65%)</title><rect x="193.0" y="499.0" width="19.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.66%)</title><rect x="193.0" y="483.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.66%)</title><rect x="193.0" y="467.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.66%)</title><rect x="193.0" y="451.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.99%)</title><rect x="200.8" y="483.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (15 samples, 4.95%)</title><rect x="212.5" y="499.0" width="58.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="510.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (15 samples, 4.95%)</title><rect x="212.5" y="483.0" width="58.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.5" y="494.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (15 samples, 4.95%)</title><rect x="212.5" y="467.0" width="58.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.5" y="478.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.31%)</title><rect x="220.3" y="451.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.3" y="462.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 1.32%)</title><rect x="220.3" y="435.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 1.32%)</title><rect x="220.3" y="419.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 1.32%)</title><rect x="220.3" y="403.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 1.32%)</title><rect x="220.3" y="387.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.99%)</title><rect x="224.2" y="371.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.66%)</title><rect x="235.9" y="435.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.33%)</title><rect x="243.7" y="435.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.33%)</title><rect x="243.7" y="419.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.33%)</title><rect x="243.7" y="403.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.99%)</title><rect x="247.6" y="451.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.99%)</title><rect x="247.6" y="435.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.99%)</title><rect x="247.6" y="419.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.99%)</title><rect x="247.6" y="403.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.99%)</title><rect x="247.6" y="387.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.66%)</title><rect x="259.2" y="451.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="259.2" y="435.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="259.2" y="419.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.66%)</title><rect x="259.2" y="403.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.66%)</title><rect x="259.2" y="387.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.2" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.66%)</title><rect x="259.2" y="371.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.2" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.33%)</title><rect x="263.1" y="355.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.33%)</title><rect x="267.0" y="451.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="267.0" y="435.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="267.0" y="419.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 2.31%)</title><rect x="270.9" y="531.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.9" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 2.31%)</title><rect x="270.9" y="515.0" width="27.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.9" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 2.31%)</title><rect x="270.9" y="499.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.9" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.33%)</title><rect x="274.8" y="483.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.66%)</title><rect x="278.7" y="483.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.33%)</title><rect x="286.5" y="483.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.66%)</title><rect x="290.4" y="483.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.66%)</title><rect x="290.4" y="467.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (154 samples, 50.83%)</title><rect x="298.2" y="627.0" width="599.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.2" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 7.92%)</title><rect x="298.2" y="611.0" width="93.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.2" y="622.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (22 samples, 7.26%)</title><rect x="306.0" y="595.0" width="85.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.0" y="606.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 6.60%)</title><rect x="313.8" y="579.0" width="77.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.8" y="590.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.66%)</title><rect x="321.6" y="563.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.66%)</title><rect x="321.6" y="547.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.66%)</title><rect x="321.6" y="531.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.66%)</title><rect x="321.6" y="515.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.6" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 5.28%)</title><rect x="329.3" y="563.0" width="62.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.3" y="574.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.65%)</title><rect x="372.2" y="547.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.33%)</title><rect x="372.2" y="531.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.33%)</title><rect x="372.2" y="515.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.32%)</title><rect x="376.1" y="531.0" width="15.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="391.7" y="611.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="391.7" y="595.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.7" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="391.7" y="579.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (22 samples, 7.26%)</title><rect x="395.5" y="611.0" width="85.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.5" y="622.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (22 samples, 7.26%)</title><rect x="395.5" y="595.0" width="85.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.5" y="606.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.30%)</title><rect x="403.3" y="579.0" width="39.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.3" y="590.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 3.30%)</title><rect x="403.3" y="563.0" width="39.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="574.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 2.97%)</title><rect x="407.2" y="547.0" width="35.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.2" y="558.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.98%)</title><rect x="411.1" y="531.0" width="23.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.1" y="542.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.98%)</title><rect x="411.1" y="515.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.1" y="526.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.98%)</title><rect x="411.1" y="499.0" width="23.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.1" y="510.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.66%)</title><rect x="422.8" y="483.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="425.8" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.33%)</title><rect x="422.8" y="467.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="425.8" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.33%)</title><rect x="422.8" y="451.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="425.8" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="426.7" y="467.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="429.7" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="430.6" y="483.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="433.6" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.66%)</title><rect x="434.5" y="531.0" width="7.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="437.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.33%)</title><rect x="442.3" y="579.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.33%)</title><rect x="442.3" y="563.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.33%)</title><rect x="442.3" y="547.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.3" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 2.97%)</title><rect x="446.2" y="579.0" width="35.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="449.2" y="590.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.64%)</title><rect x="450.1" y="563.0" width="31.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.1" y="574.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.31%)</title><rect x="454.0" y="547.0" width="27.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.0" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.31%)</title><rect x="454.0" y="531.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.0" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.32%)</title><rect x="465.6" y="515.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.33%)</title><rect x="469.5" y="499.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.66%)</title><rect x="473.4" y="499.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="477.3" y="483.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="480.3" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="477.3" y="467.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="480.3" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="477.3" y="451.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="480.3" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="477.3" y="435.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="480.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (89 samples, 29.37%)</title><rect x="481.2" y="611.0" width="346.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="484.2" y="622.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (88 samples, 29.04%)</title><rect x="485.1" y="595.0" width="342.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.1" y="606.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (72 samples, 23.76%)</title><rect x="489.0" y="579.0" width="280.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.0" y="590.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (72 samples, 23.76%)</title><rect x="489.0" y="563.0" width="280.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.0" y="574.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (72 samples, 23.76%)</title><rect x="489.0" y="547.0" width="280.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.0" y="558.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.33%)</title><rect x="489.0" y="531.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.0" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.33%)</title><rect x="489.0" y="515.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.0" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.33%)</title><rect x="489.0" y="499.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.0" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.33%)</title><rect x="489.0" y="483.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.33%)</title><rect x="489.0" y="467.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.33%)</title><rect x="489.0" y="451.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (71 samples, 23.43%)</title><rect x="492.9" y="531.0" width="276.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.9" y="542.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>java/lang/Thread.sleep (66 samples, 21.78%)</title><rect x="512.4" y="515.0" width="257.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.4" y="526.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.33%)</title><rect x="547.4" y="499.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="550.4" y="510.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.33%)</title><rect x="551.3" y="499.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="554.3" y="510.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.33%)</title><rect x="551.3" y="483.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="554.3" y="494.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.33%)</title><rect x="551.3" y="467.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="554.3" y="478.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.33%)</title><rect x="551.3" y="451.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="554.3" y="462.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.33%)</title><rect x="551.3" y="435.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="554.3" y="446.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.33%)</title><rect x="551.3" y="419.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="554.3" y="430.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.33%)</title><rect x="551.3" y="403.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="554.3" y="414.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle) (1 samples, 0.33%)</title><rect x="551.3" y="387.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="554.3" y="398.0"></text>
</g>
<g>
<title>MacroAssembler::reinit_heapbase() (1 samples, 0.33%)</title><rect x="551.3" y="371.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="554.3" y="382.0"></text>
</g>
<g>
<title>JVM_Sleep (51 samples, 16.83%)</title><rect x="555.2" y="499.0" width="198.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="558.2" y="510.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.66%)</title><rect x="578.6" y="483.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="581.6" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.32%)</title><rect x="586.4" y="483.0" width="15.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="589.4" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="594.2" y="467.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="597.2" y="478.0"></text>
</g>
<g>
<title>__restore_rt (1 samples, 0.33%)</title><rect x="601.9" y="483.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="604.9" y="494.0"></text>
</g>
<g>
<title>signalHandler(int, siginfo*, void*) (1 samples, 0.33%)</title><rect x="601.9" y="467.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="604.9" y="478.0"></text>
</g>
<g>
<title>JVM_handle_linux_signal (1 samples, 0.33%)</title><rect x="601.9" y="451.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="604.9" y="462.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.33%)</title><rect x="601.9" y="435.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.9" y="446.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="605.8" y="483.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="608.8" y="494.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (37 samples, 12.21%)</title><rect x="609.7" y="483.0" width="144.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.7" y="494.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.33%)</title><rect x="648.7" y="467.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.7" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="652.6" y="467.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="655.6" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="652.6" y="451.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="655.6" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.33%)</title><rect x="656.5" y="467.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="659.5" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.99%)</title><rect x="660.4" y="467.0" width="11.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="663.4" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 5.61%)</title><rect x="672.0" y="467.0" width="66.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="675.0" y="478.0">__pthre..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.99%)</title><rect x="738.3" y="467.0" width="11.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.3" y="478.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="749.9" y="467.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="752.9" y="478.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.33%)</title><rect x="753.8" y="499.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.8" y="510.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.99%)</title><rect x="757.7" y="499.0" width="11.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$289/1776380939.complete (1 samples, 0.33%)</title><rect x="769.4" y="579.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$73 (1 samples, 0.33%)</title><rect x="769.4" y="563.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="772.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="769.4" y="547.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="772.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="769.4" y="531.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="772.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="769.4" y="515.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="772.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="769.4" y="499.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="772.4" y="510.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.33%)</title><rect x="769.4" y="483.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="773.3" y="579.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="773.3" y="563.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.99%)</title><rect x="777.2" y="579.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.2" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.66%)</title><rect x="781.1" y="563.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.1" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="781.1" y="547.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="784.1" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.33%)</title><rect x="785.0" y="547.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.0" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.99%)</title><rect x="788.9" y="579.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.66%)</title><rect x="792.8" y="563.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (7 samples, 2.31%)</title><rect x="800.6" y="579.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.6" y="590.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/369463167.linkToTargetMethod (1 samples, 0.33%)</title><rect x="827.8" y="611.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.33%)</title><rect x="827.8" y="595.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/105752084.get$Lambda (1 samples, 0.33%)</title><rect x="827.8" y="579.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.8" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="827.8" y="563.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="827.8" y="547.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.8" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="827.8" y="531.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="830.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 5.61%)</title><rect x="831.7" y="611.0" width="66.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.7" y="622.0">java/ut..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.99%)</title><rect x="870.7" y="595.0" width="11.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="873.7" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="874.6" y="579.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="877.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.32%)</title><rect x="882.3" y="595.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="885.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.32%)</title><rect x="882.3" y="579.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="885.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/105752084.accept (4 samples, 1.32%)</title><rect x="882.3" y="563.0" width="15.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (4 samples, 1.32%)</title><rect x="882.3" y="547.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="885.3" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 1.32%)</title><rect x="882.3" y="531.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="885.3" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 1.32%)</title><rect x="882.3" y="515.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="885.3" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.66%)</title><rect x="890.1" y="499.0" width="7.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="893.1" y="510.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="890.1" y="483.0" width="7.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="893.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 4.95%)</title><rect x="897.9" y="627.0" width="58.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.9" y="638.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.96%)</title><rect x="909.6" y="611.0" width="46.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="912.6" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 3.96%)</title><rect x="909.6" y="595.0" width="46.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="912.6" y="606.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/105752084.accept (1 samples, 0.33%)</title><rect x="909.6" y="579.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="912.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (1 samples, 0.33%)</title><rect x="909.6" y="563.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="912.6" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.33%)</title><rect x="909.6" y="547.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="912.6" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.33%)</title><rect x="909.6" y="531.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="912.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/24191516.accept (11 samples, 3.63%)</title><rect x="913.5" y="579.0" width="42.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="916.5" y="590.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (11 samples, 3.63%)</title><rect x="913.5" y="563.0" width="42.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="916.5" y="574.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/178922422.complete (11 samples, 3.63%)</title><rect x="913.5" y="547.0" width="42.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.5" y="558.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (11 samples, 3.63%)</title><rect x="913.5" y="531.0" width="42.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="916.5" y="542.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1594116693.complete (11 samples, 3.63%)</title><rect x="913.5" y="515.0" width="42.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="916.5" y="526.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (11 samples, 3.63%)</title><rect x="913.5" y="499.0" width="42.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="916.5" y="510.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (11 samples, 3.63%)</title><rect x="913.5" y="483.0" width="42.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.5" y="494.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.63%)</title><rect x="913.5" y="467.0" width="42.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.5" y="478.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.63%)</title><rect x="913.5" y="451.0" width="42.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.5" y="462.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.33%)</title><rect x="952.4" y="435.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.4" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.33%)</title><rect x="952.4" y="419.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (7 samples, 2.31%)</title><rect x="956.3" y="643.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.3" y="654.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.33%)</title><rect x="979.7" y="627.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="982.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.66%)</title><rect x="983.6" y="691.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="986.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.66%)</title><rect x="983.6" y="675.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.66%)</title><rect x="983.6" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.66%)</title><rect x="983.6" y="643.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.96%)</title><rect x="991.4" y="691.0" width="46.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="994.4" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 3.30%)</title><rect x="999.2" y="675.0" width="38.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1002.2" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.98%)</title><rect x="1014.8" y="659.0" width="23.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1017.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.98%)</title><rect x="1014.8" y="643.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.98%)</title><rect x="1014.8" y="627.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1017.8" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.98%)</title><rect x="1014.8" y="611.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.8" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 1.65%)</title><rect x="1018.6" y="595.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.33%)</title><rect x="1038.1" y="739.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="1038.1" y="723.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="1038.1" y="707.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1041.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.33%)</title><rect x="1038.1" y="691.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1041.1" y="702.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.33%)</title><rect x="1038.1" y="675.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.1" y="686.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.33%)</title><rect x="1038.1" y="659.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1041.1" y="670.0"></text>
</g>
<g>
<title>start_thread (38 samples, 12.54%)</title><rect x="1042.0" y="739.0" width="148.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1045.0" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (38 samples, 12.54%)</title><rect x="1042.0" y="723.0" width="148.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1045.0" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 5.94%)</title><rect x="1042.0" y="707.0" width="70.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.0" y="718.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 1.32%)</title><rect x="1042.0" y="691.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.0" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.32%)</title><rect x="1042.0" y="675.0" width="15.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.0" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.33%)</title><rect x="1042.0" y="659.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.0" y="670.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.99%)</title><rect x="1045.9" y="659.0" width="11.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1048.9" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.62%)</title><rect x="1057.6" y="691.0" width="54.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.6" y="702.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.96%)</title><rect x="1057.6" y="675.0" width="46.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.6" y="686.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 3.30%)</title><rect x="1061.5" y="659.0" width="38.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.5" y="670.0">G1P..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.33%)</title><rect x="1069.3" y="643.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.3" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.65%)</title><rect x="1073.2" y="643.0" width="19.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.2" y="654.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.33%)</title><rect x="1084.9" y="627.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.9" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="1084.9" y="611.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.33%)</title><rect x="1088.7" y="627.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.7" y="638.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.66%)</title><rect x="1092.6" y="643.0" width="7.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1095.6" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.33%)</title><rect x="1100.4" y="659.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.4" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.66%)</title><rect x="1104.3" y="675.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.3" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.33%)</title><rect x="1104.3" y="659.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.3" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.33%)</title><rect x="1104.3" y="643.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.3" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.33%)</title><rect x="1104.3" y="627.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.3" y="638.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.33%)</title><rect x="1104.3" y="611.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.3" y="622.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.33%)</title><rect x="1104.3" y="595.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.3" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.33%)</title><rect x="1108.2" y="659.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.2" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.33%)</title><rect x="1108.2" y="643.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::run() (19 samples, 6.27%)</title><rect x="1112.1" y="707.0" width="74.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.1" y="718.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (19 samples, 6.27%)</title><rect x="1112.1" y="691.0" width="74.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.1" y="702.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (19 samples, 6.27%)</title><rect x="1112.1" y="675.0" width="74.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.1" y="686.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (17 samples, 5.61%)</title><rect x="1112.1" y="659.0" width="66.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.1" y="670.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (15 samples, 4.95%)</title><rect x="1112.1" y="643.0" width="58.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.1" y="654.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (15 samples, 4.95%)</title><rect x="1112.1" y="627.0" width="58.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.1" y="638.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 2.64%)</title><rect x="1112.1" y="611.0" width="31.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.1" y="622.0">Co..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.66%)</title><rect x="1112.1" y="595.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.1" y="606.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.33%)</title><rect x="1112.1" y="579.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.1" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.33%)</title><rect x="1116.0" y="579.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.0" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.33%)</title><rect x="1119.9" y="595.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.33%)</title><rect x="1119.9" y="579.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1119.9" y="563.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.9" y="574.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.33%)</title><rect x="1119.9" y="547.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 1.65%)</title><rect x="1123.8" y="595.0" width="19.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.66%)</title><rect x="1123.8" y="579.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.8" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.33%)</title><rect x="1127.7" y="563.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.33%)</title><rect x="1131.6" y="579.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.33%)</title><rect x="1131.6" y="563.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1131.6" y="547.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.33%)</title><rect x="1135.5" y="579.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.33%)</title><rect x="1139.4" y="579.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.99%)</title><rect x="1143.3" y="611.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 0.99%)</title><rect x="1143.3" y="595.0" width="11.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.33%)</title><rect x="1143.3" y="579.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.66%)</title><rect x="1147.2" y="579.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.33%)</title><rect x="1151.1" y="563.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.33%)</title><rect x="1151.1" y="547.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.33%)</title><rect x="1151.1" y="531.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.32%)</title><rect x="1155.0" y="611.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.32%)</title><rect x="1155.0" y="595.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.32%)</title><rect x="1155.0" y="579.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.99%)</title><rect x="1155.0" y="563.0" width="11.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.99%)</title><rect x="1155.0" y="547.0" width="11.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.99%)</title><rect x="1155.0" y="531.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.99%)</title><rect x="1155.0" y="515.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.99%)</title><rect x="1155.0" y="499.0" width="11.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.99%)</title><rect x="1155.0" y="483.0" width="11.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.99%)</title><rect x="1155.0" y="467.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.99%)</title><rect x="1155.0" y="451.0" width="11.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.99%)</title><rect x="1155.0" y="435.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.99%)</title><rect x="1155.0" y="419.0" width="11.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.99%)</title><rect x="1155.0" y="403.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.99%)</title><rect x="1155.0" y="387.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.99%)</title><rect x="1155.0" y="371.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.99%)</title><rect x="1155.0" y="355.0" width="11.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.99%)</title><rect x="1155.0" y="339.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="323.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="307.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1155.0" y="291.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1155.0" y="275.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1155.0" y="259.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1155.0" y="243.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1155.0" y="227.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1155.0" y="211.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1155.0" y="195.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1155.0" y="179.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1155.0" y="163.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1155.0" y="147.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1155.0" y="131.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1155.0" y="115.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1155.0" y="99.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1155.0" y="83.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1155.0" y="67.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1155.0" y="51.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="62.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1155.0" y="35.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.33%)</title><rect x="1158.8" y="291.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1158.8" y="275.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.8" y="286.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="259.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.8" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1162.7" y="323.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1162.7" y="307.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1162.7" y="291.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1162.7" y="275.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="286.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.33%)</title><rect x="1162.7" y="259.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="270.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.33%)</title><rect x="1166.6" y="563.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="574.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.33%)</title><rect x="1166.6" y="547.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1166.6" y="531.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.6" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1166.6" y="515.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.6" y="526.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.33%)</title><rect x="1166.6" y="499.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.6" y="510.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.33%)</title><rect x="1166.6" y="483.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.6" y="494.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.66%)</title><rect x="1170.5" y="643.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.66%)</title><rect x="1170.5" y="627.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.66%)</title><rect x="1170.5" y="611.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.66%)</title><rect x="1170.5" y="595.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="606.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.66%)</title><rect x="1170.5" y="579.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.66%)</title><rect x="1170.5" y="563.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="574.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.33%)</title><rect x="1170.5" y="547.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="558.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.33%)</title><rect x="1170.5" y="531.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.5" y="542.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.33%)</title><rect x="1170.5" y="515.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="526.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.33%)</title><rect x="1170.5" y="499.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="510.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.33%)</title><rect x="1174.4" y="547.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="558.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.66%)</title><rect x="1178.3" y="659.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.66%)</title><rect x="1178.3" y="643.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.66%)</title><rect x="1178.3" y="627.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.66%)</title><rect x="1178.3" y="611.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.33%)</title><rect x="1182.2" y="595.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.33%)</title><rect x="1186.1" y="707.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.33%)</title><rect x="1186.1" y="691.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.33%)</title><rect x="1186.1" y="675.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="686.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.33%)</title><rect x="1186.1" y="659.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.33%)</title><rect x="1186.1" y="643.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.1" y="654.0"></text>
</g>
</g>
</svg>
