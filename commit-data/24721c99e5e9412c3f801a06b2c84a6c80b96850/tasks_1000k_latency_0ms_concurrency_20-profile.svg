<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (1,142 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.09%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (1 samples, 0.09%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (293 samples, 25.66%)</title><rect x="11.0" y="947.0" width="302.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="958.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.18%)</title><rect x="12.1" y="931.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.18%)</title><rect x="12.1" y="915.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.18%)</title><rect x="12.1" y="899.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.18%)</title><rect x="12.1" y="883.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.18%)</title><rect x="12.1" y="867.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.18%)</title><rect x="12.1" y="851.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.18%)</title><rect x="12.1" y="835.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.18%)</title><rect x="12.1" y="819.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.completeDelayedChannelClose (1 samples, 0.09%)</title><rect x="12.1" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="13.1" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.09%)</title><rect x="13.1" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="13.1" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="13.1" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.09%)</title><rect x="13.1" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (290 samples, 25.39%)</title><rect x="14.1" y="931.0" width="299.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="942.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.26%)</title><rect x="14.1" y="915.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.26%)</title><rect x="14.1" y="899.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="15.2" y="883.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="15.2" y="867.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="15.2" y="851.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="15.2" y="835.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="15.2" y="819.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.18%)</title><rect x="15.2" y="803.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.2" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="16.2" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="16.2" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="16.2" y="739.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="19.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.18%)</title><rect x="17.2" y="915.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.18%)</title><rect x="17.2" y="899.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.35%)</title><rect x="19.3" y="915.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.35%)</title><rect x="19.3" y="899.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.35%)</title><rect x="19.3" y="883.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1649181109.accept (3 samples, 0.26%)</title><rect x="20.3" y="867.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="20.3" y="851.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="21.4" y="835.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="21.4" y="819.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="23.4" y="915.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="23.4" y="899.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="23.4" y="883.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="26.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (217 samples, 19.00%)</title><rect x="24.5" y="915.0" width="224.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.5" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1356205958.accept (212 samples, 18.56%)</title><rect x="24.5" y="899.0" width="219.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="910.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (212 samples, 18.56%)</title><rect x="24.5" y="883.0" width="219.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.5" y="894.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (167 samples, 14.62%)</title><rect x="33.8" y="867.0" width="172.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.8" y="878.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (167 samples, 14.62%)</title><rect x="33.8" y="851.0" width="172.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.8" y="862.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (167 samples, 14.62%)</title><rect x="33.8" y="835.0" width="172.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.8" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 14.62%)</title><rect x="33.8" y="819.0" width="172.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.8" y="830.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 14.62%)</title><rect x="33.8" y="803.0" width="172.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="814.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (167 samples, 14.62%)</title><rect x="33.8" y="787.0" width="172.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.8" y="798.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (107 samples, 9.37%)</title><rect x="80.3" y="771.0" width="110.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.3" y="782.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="81.3" y="755.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (30 samples, 2.63%)</title><rect x="83.4" y="755.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.4" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (30 samples, 2.63%)</title><rect x="83.4" y="739.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.4" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (30 samples, 2.63%)</title><rect x="83.4" y="723.0" width="31.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.53%)</title><rect x="114.4" y="755.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.53%)</title><rect x="114.4" y="739.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="115.4" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.4" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="115.4" y="707.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="118.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.35%)</title><rect x="116.4" y="723.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (68 samples, 5.95%)</title><rect x="120.6" y="755.0" width="70.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.6" y="766.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (68 samples, 5.95%)</title><rect x="120.6" y="739.0" width="70.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.6" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (66 samples, 5.78%)</title><rect x="121.6" y="723.0" width="68.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.6" y="734.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (66 samples, 5.78%)</title><rect x="121.6" y="707.0" width="68.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.6" y="718.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (64 samples, 5.60%)</title><rect x="123.7" y="691.0" width="66.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.7" y="702.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="123.7" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="126.7" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (56 samples, 4.90%)</title><rect x="124.7" y="675.0" width="57.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="127.7" y="686.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="124.7" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="127.7" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.18%)</title><rect x="125.7" y="659.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="128.7" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 3.33%)</title><rect x="127.8" y="659.0" width="39.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="130.8" y="670.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.31%)</title><rect x="167.1" y="659.0" width="15.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="170.1" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.35%)</title><rect x="182.6" y="675.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="185.6" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="186.7" y="675.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="189.7" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="188.8" y="675.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="191.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="189.8" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.88%)</title><rect x="190.8" y="771.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (9 samples, 0.79%)</title><rect x="190.8" y="755.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.79%)</title><rect x="190.8" y="739.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.09%)</title><rect x="200.1" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="200.1" y="739.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.35%)</title><rect x="201.2" y="771.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.35%)</title><rect x="201.2" y="755.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="201.2" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="201.2" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.26%)</title><rect x="202.2" y="739.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="202.2" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.18%)</title><rect x="203.2" y="723.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.2" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="205.3" y="771.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="208.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="206.3" y="867.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="206.3" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.35%)</title><rect x="207.4" y="867.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="207.4" y="851.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="210.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="207.4" y="835.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (30 samples, 2.63%)</title><rect x="211.5" y="867.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.5" y="878.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.54%)</title><rect x="211.5" y="851.0" width="30.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.5" y="862.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="234.2" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="234.2" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.2" y="830.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="235.3" y="835.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="238.3" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="236.3" y="835.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="239.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="241.5" y="851.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="241.5" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="244.5" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="241.5" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="244.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="241.5" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="244.5" y="814.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="241.5" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="244.5" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="242.5" y="867.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="245.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.44%)</title><rect x="243.5" y="899.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.44%)</title><rect x="243.5" y="883.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="243.5" y="867.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="243.5" y="851.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 5.52%)</title><rect x="248.7" y="915.0" width="65.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.7" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 5.52%)</title><rect x="248.7" y="899.0" width="65.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.7" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 3.42%)</title><rect x="248.7" y="883.0" width="40.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.7" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 3.42%)</title><rect x="248.7" y="867.0" width="40.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.7" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.42%)</title><rect x="248.7" y="851.0" width="40.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.7" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 2.98%)</title><rect x="248.7" y="835.0" width="35.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.7" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 2.98%)</title><rect x="248.7" y="819.0" width="35.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.7" y="830.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.18%)</title><rect x="249.7" y="803.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (2 samples, 0.18%)</title><rect x="249.7" y="787.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (2 samples, 0.18%)</title><rect x="249.7" y="771.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.7" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.18%)</title><rect x="249.7" y="755.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.7" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.18%)</title><rect x="249.7" y="739.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (20 samples, 1.75%)</title><rect x="251.8" y="803.0" width="20.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (8 samples, 0.70%)</title><rect x="251.8" y="787.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.88%)</title><rect x="260.1" y="787.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.88%)</title><rect x="260.1" y="771.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.88%)</title><rect x="260.1" y="755.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.88%)</title><rect x="260.1" y="739.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.88%)</title><rect x="260.1" y="723.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.88%)</title><rect x="260.1" y="707.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.88%)</title><rect x="260.1" y="691.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="270.4" y="787.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.18%)</title><rect x="270.4" y="771.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="270.4" y="755.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="270.4" y="739.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.4" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.18%)</title><rect x="270.4" y="723.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.96%)</title><rect x="272.5" y="803.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.96%)</title><rect x="272.5" y="787.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (11 samples, 0.96%)</title><rect x="272.5" y="771.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.5" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (11 samples, 0.96%)</title><rect x="272.5" y="755.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.5" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.53%)</title><rect x="277.6" y="739.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.53%)</title><rect x="277.6" y="723.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.53%)</title><rect x="277.6" y="707.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.53%)</title><rect x="277.6" y="691.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="283.8" y="835.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="283.8" y="819.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="283.8" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="283.8" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="283.8" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="283.8" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.8" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="283.8" y="739.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="286.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="771.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="284.9" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="285.9" y="835.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="285.9" y="819.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="285.9" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="285.9" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.9" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.9" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.9" y="771.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="286.9" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="288.0" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="288.0" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="288.0" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.0" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="288.0" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="288.0" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.79%)</title><rect x="289.0" y="883.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.61%)</title><rect x="289.0" y="867.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.61%)</title><rect x="289.0" y="851.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="290.0" y="835.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/616823838.accept (1 samples, 0.09%)</title><rect x="290.0" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="290.0" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="290.0" y="787.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="290.0" y="771.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="290.0" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.18%)</title><rect x="291.1" y="835.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="292.1" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="292.1" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="292.1" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.1" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.09%)</title><rect x="292.1" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="293.1" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="293.1" y="819.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="293.1" y="803.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="293.1" y="787.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="293.1" y="771.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="293.1" y="755.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="293.1" y="739.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="293.1" y="723.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="296.1" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="294.2" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.2" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="294.2" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="294.2" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="294.2" y="675.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="294.2" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.2" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="294.2" y="643.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="297.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.2" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="295.2" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.2" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="295.2" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/568221876.get (1 samples, 0.09%)</title><rect x="295.2" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="296.2" y="867.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="296.2" y="851.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="296.2" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="297.3" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="298.3" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.09%)</title><rect x="298.3" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.09%)</title><rect x="298.3" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="298.3" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="298.3" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="298.3" y="803.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.79%)</title><rect x="299.3" y="883.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.70%)</title><rect x="299.3" y="867.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.18%)</title><rect x="299.3" y="851.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="299.3" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="299.3" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="299.3" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="299.3" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="299.3" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="299.3" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="299.3" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="299.3" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="299.3" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="299.3" y="691.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="299.3" y="675.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.09%)</title><rect x="299.3" y="659.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (1 samples, 0.09%)</title><rect x="299.3" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.09%)</title><rect x="300.4" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.09%)</title><rect x="300.4" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getArray (1 samples, 0.09%)</title><rect x="300.4" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.09%)</title><rect x="300.4" y="787.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="300.4" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="300.4" y="755.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="300.4" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.53%)</title><rect x="301.4" y="851.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.53%)</title><rect x="301.4" y="835.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (6 samples, 0.53%)</title><rect x="301.4" y="819.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.44%)</title><rect x="301.4" y="803.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (5 samples, 0.44%)</title><rect x="301.4" y="787.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (5 samples, 0.44%)</title><rect x="301.4" y="771.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (5 samples, 0.44%)</title><rect x="301.4" y="755.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.44%)</title><rect x="301.4" y="739.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.4" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="302.4" y="723.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="305.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="304.5" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.09%)</title><rect x="304.5" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.09%)</title><rect x="304.5" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.09%)</title><rect x="304.5" y="675.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.5" y="686.0"></text>
</g>
<g>
<title>__read (1 samples, 0.09%)</title><rect x="304.5" y="659.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="307.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="305.5" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.5" y="734.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.09%)</title><rect x="305.5" y="707.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="308.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.09%)</title><rect x="306.5" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="306.5" y="787.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="309.5" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="306.5" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="309.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="307.6" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="307.6" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="307.6" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="307.6" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="307.6" y="803.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="307.6" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="307.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="307.6" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="307.6" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="307.6" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="307.6" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="307.6" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.35%)</title><rect x="308.6" y="883.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.35%)</title><rect x="308.6" y="867.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="308.6" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/1964159502.accept (1 samples, 0.09%)</title><rect x="308.6" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="309.6" y="851.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.18%)</title><rect x="310.7" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="310.7" y="819.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="310.7" y="803.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="310.7" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="310.7" y="771.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="310.7" y="755.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.7" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="310.7" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.7" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="310.7" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.7" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="310.7" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.7" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="311.7" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.7" y="750.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="311.7" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="311.7" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="311.7" y="691.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$253/1379853265.test (1 samples, 0.09%)</title><rect x="311.7" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="311.7" y="659.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$252/1273162183.test (1 samples, 0.09%)</title><rect x="311.7" y="643.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="311.7" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="311.7" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="311.7" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="311.7" y="579.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="311.7" y="563.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="312.7" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="312.7" y="867.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="312.7" y="851.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="312.7" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="312.7" y="819.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="315.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (724 samples, 63.40%)</title><rect x="313.8" y="947.0" width="748.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.8" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (724 samples, 63.40%)</title><rect x="313.8" y="931.0" width="748.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.8" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (724 samples, 63.40%)</title><rect x="313.8" y="915.0" width="748.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/441315088.run (493 samples, 43.17%)</title><rect x="322.0" y="899.0" width="509.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.0" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (491 samples, 42.99%)</title><rect x="324.1" y="883.0" width="507.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.1" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (491 samples, 42.99%)</title><rect x="324.1" y="867.0" width="507.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.1" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (485 samples, 42.47%)</title><rect x="324.1" y="851.0" width="501.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.1" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="330.3" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (170 samples, 14.89%)</title><rect x="331.3" y="835.0" width="175.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.3" y="846.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (170 samples, 14.89%)</title><rect x="331.3" y="819.0" width="175.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.3" y="830.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (170 samples, 14.89%)</title><rect x="331.3" y="803.0" width="175.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.3" y="814.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 14.80%)</title><rect x="331.3" y="787.0" width="174.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.3" y="798.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 14.80%)</title><rect x="331.3" y="771.0" width="174.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.3" y="782.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (169 samples, 14.80%)</title><rect x="331.3" y="755.0" width="174.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.3" y="766.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.55%)</title><rect x="331.3" y="739.0" width="53.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.3" y="750.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="351.0" y="723.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="354.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="352.0" y="707.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="355.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.96%)</title><rect x="356.1" y="723.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.96%)</title><rect x="356.1" y="707.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.96%)</title><rect x="356.1" y="691.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.96%)</title><rect x="356.1" y="675.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.88%)</title><rect x="356.1" y="659.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.88%)</title><rect x="356.1" y="643.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (10 samples, 0.88%)</title><rect x="356.1" y="627.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.09%)</title><rect x="366.5" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="366.5" y="643.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="366.5" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.5" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.5" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="369.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.5" y="579.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.5" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.5" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="366.5" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="369.5" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="366.5" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="369.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="366.5" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="369.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="366.5" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.5" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="366.5" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="369.5" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="366.5" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="369.5" y="478.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="366.5" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.49%)</title><rect x="367.5" y="723.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.70%)</title><rect x="376.8" y="707.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.53%)</title><rect x="376.8" y="691.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.8" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="376.8" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="379.8" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="376.8" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="379.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="376.8" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="379.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.44%)</title><rect x="377.8" y="675.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="383.0" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="386.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="383.0" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="383.0" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="383.0" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="386.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="383.0" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="386.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="383.0" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="386.0" y="622.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="383.0" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="386.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="384.0" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="384.0" y="675.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="387.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="384.0" y="659.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="387.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (104 samples, 9.11%)</title><rect x="385.1" y="739.0" width="107.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.1" y="750.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.35%)</title><rect x="388.2" y="723.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="392.3" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.44%)</title><rect x="393.3" y="723.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.35%)</title><rect x="394.4" y="707.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (3 samples, 0.26%)</title><rect x="395.4" y="691.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (15 samples, 1.31%)</title><rect x="398.5" y="723.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.14%)</title><rect x="400.6" y="707.0" width="13.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="402.6" y="691.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.61%)</title><rect x="404.7" y="691.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.44%)</title><rect x="406.8" y="675.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="410.9" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="413.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="410.9" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="413.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="410.9" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="413.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="410.9" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="413.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="410.9" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="413.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.18%)</title><rect x="411.9" y="691.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.26%)</title><rect x="414.0" y="723.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.26%)</title><rect x="414.0" y="707.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (72 samples, 6.30%)</title><rect x="417.1" y="723.0" width="74.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.1" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.49%)</title><rect x="418.1" y="707.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.61%)</title><rect x="418.1" y="691.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.61%)</title><rect x="418.1" y="675.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.61%)</title><rect x="418.1" y="659.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.61%)</title><rect x="418.1" y="643.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.35%)</title><rect x="421.2" y="627.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.53%)</title><rect x="425.4" y="691.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.18%)</title><rect x="425.4" y="675.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.18%)</title><rect x="425.4" y="659.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="427.4" y="675.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="427.4" y="659.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.26%)</title><rect x="428.5" y="643.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="431.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.26%)</title><rect x="428.5" y="627.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="431.6" y="691.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="431.6" y="675.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (54 samples, 4.73%)</title><rect x="435.7" y="707.0" width="55.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.7" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (54 samples, 4.73%)</title><rect x="435.7" y="691.0" width="55.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.7" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.55%)</title><rect x="437.8" y="675.0" width="53.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="440.8" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.75%)</title><rect x="440.9" y="659.0" width="20.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="441.9" y="643.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="444.0" y="643.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (11 samples, 0.96%)</title><rect x="445.0" y="643.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (11 samples, 0.96%)</title><rect x="445.0" y="627.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (11 samples, 0.96%)</title><rect x="445.0" y="611.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="445.0" y="595.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (10 samples, 0.88%)</title><rect x="446.0" y="595.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.79%)</title><rect x="447.1" y="579.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.35%)</title><rect x="452.2" y="563.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.35%)</title><rect x="452.2" y="547.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="456.4" y="643.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="456.4" y="627.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="456.4" y="611.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="457.4" y="643.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="457.4" y="627.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="457.4" y="611.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.18%)</title><rect x="459.5" y="643.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.96%)</title><rect x="461.5" y="659.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.88%)</title><rect x="462.6" y="643.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="462.6" y="627.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="462.6" y="611.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.88%)</title><rect x="462.6" y="595.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.53%)</title><rect x="472.9" y="659.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.44%)</title><rect x="479.1" y="659.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.44%)</title><rect x="479.1" y="643.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.44%)</title><rect x="479.1" y="627.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.44%)</title><rect x="479.1" y="611.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.1" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.44%)</title><rect x="479.1" y="595.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.35%)</title><rect x="484.3" y="659.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="484.3" y="643.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="484.3" y="627.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.26%)</title><rect x="488.4" y="659.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="490.5" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="490.5" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="491.5" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.14%)</title><rect x="492.5" y="739.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.18%)</title><rect x="492.5" y="723.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.96%)</title><rect x="494.6" y="723.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="497.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.96%)</title><rect x="494.6" y="707.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.96%)</title><rect x="494.6" y="691.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.96%)</title><rect x="494.6" y="675.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="497.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.09%)</title><rect x="506.0" y="787.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="509.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="506.0" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="509.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="506.0" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="509.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="506.0" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="506.0" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="509.0" y="734.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="506.0" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (282 samples, 24.69%)</title><rect x="507.0" y="835.0" width="291.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.0" y="846.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="509.1" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.1" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="509.1" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.1" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="509.1" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="509.1" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (43 samples, 3.77%)</title><rect x="510.1" y="819.0" width="44.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="513.1" y="830.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.77%)</title><rect x="510.1" y="803.0" width="44.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.1" y="814.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.77%)</title><rect x="510.1" y="787.0" width="44.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.1" y="798.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="510.1" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="513.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="510.1" y="755.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="510.1" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="510.1" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="511.1" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="514.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="511.1" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="514.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="511.1" y="739.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="511.1" y="723.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 3.59%)</title><rect x="512.2" y="771.0" width="42.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="515.2" y="782.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (33 samples, 2.89%)</title><rect x="520.4" y="755.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="523.4" y="766.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.44%)</title><rect x="549.4" y="739.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskData (1 samples, 0.09%)</title><rect x="554.5" y="819.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="554.5" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.53%)</title><rect x="555.6" y="819.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.53%)</title><rect x="555.6" y="803.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.53%)</title><rect x="555.6" y="787.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (154 samples, 13.49%)</title><rect x="561.8" y="819.0" width="159.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.8" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (154 samples, 13.49%)</title><rect x="561.8" y="803.0" width="159.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.8" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (42 samples, 3.68%)</title><rect x="576.2" y="787.0" width="43.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.2" y="798.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 3.68%)</title><rect x="576.2" y="771.0" width="43.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="579.2" y="782.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (42 samples, 3.68%)</title><rect x="576.2" y="755.0" width="43.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.2" y="766.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.01%)</title><rect x="576.2" y="739.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.2" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.01%)</title><rect x="576.2" y="723.0" width="23.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.01%)</title><rect x="576.2" y="707.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.2" y="718.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.88%)</title><rect x="582.4" y="691.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="585.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="583.5" y="675.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="586.5" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="583.5" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="586.5" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="583.5" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="586.5" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="584.5" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="587.5" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.61%)</title><rect x="585.5" y="675.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="587.6" y="659.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="590.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="587.6" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="590.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="587.6" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.6" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="588.6" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.6" y="654.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="589.7" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="592.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="590.7" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.7" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="591.7" y="659.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.7" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.61%)</title><rect x="592.8" y="691.0" width="7.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="595.8" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (19 samples, 1.66%)</title><rect x="600.0" y="739.0" width="19.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.0" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="612.4" y="723.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="615.4" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="614.5" y="723.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="617.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (16 samples, 1.40%)</title><rect x="619.6" y="787.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (9 samples, 0.79%)</title><rect x="619.6" y="771.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (9 samples, 0.79%)</title><rect x="619.6" y="755.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.61%)</title><rect x="628.9" y="771.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.61%)</title><rect x="628.9" y="755.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="631.9" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="636.2" y="787.0" width="4.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="639.2" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 6.83%)</title><rect x="640.3" y="787.0" width="80.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.3" y="798.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.74%)</title><rect x="641.3" y="771.0" width="79.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.3" y="782.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.88%)</title><rect x="641.3" y="755.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.88%)</title><rect x="641.3" y="739.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.88%)</title><rect x="641.3" y="723.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.88%)</title><rect x="641.3" y="707.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="651.7" y="755.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="651.7" y="739.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="651.7" y="723.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="651.7" y="707.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="653.7" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (64 samples, 5.60%)</title><rect x="654.8" y="755.0" width="66.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.8" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 5.08%)</title><rect x="661.0" y="739.0" width="59.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.0" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 3.42%)</title><rect x="680.6" y="723.0" width="40.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.6" y="734.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.53%)</title><rect x="696.1" y="707.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="699.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.23%)</title><rect x="702.3" y="707.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="714.7" y="691.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="714.7" y="675.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="717.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="714.7" y="659.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="714.7" y="643.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="717.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="714.7" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="717.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="714.7" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="717.7" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="714.7" y="595.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="717.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="714.7" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="717.7" y="590.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="714.7" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.7" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="715.7" y="627.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="718.7" y="638.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.35%)</title><rect x="716.8" y="707.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="719.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 5.43%)</title><rect x="720.9" y="819.0" width="64.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.9" y="830.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (61 samples, 5.34%)</title><rect x="721.9" y="803.0" width="63.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.9" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1014288372.process (28 samples, 2.45%)</title><rect x="725.0" y="787.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="728.0" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (28 samples, 2.45%)</title><rect x="725.0" y="771.0" width="29.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.0" y="782.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.75%)</title><rect x="725.0" y="755.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="732.3" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="735.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="732.3" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="735.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="732.3" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="735.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="732.3" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="732.3" y="675.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.79%)</title><rect x="733.3" y="739.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.3" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="736.4" y="723.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="739.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="736.4" y="707.0" width="6.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="739.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="742.6" y="739.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="744.7" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="744.7" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="744.7" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="747.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="744.7" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (8 samples, 0.70%)</title><rect x="745.7" y="755.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="748.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.70%)</title><rect x="745.7" y="739.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="748.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.70%)</title><rect x="745.7" y="723.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.70%)</title><rect x="745.7" y="707.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (8 samples, 0.70%)</title><rect x="745.7" y="691.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 0.70%)</title><rect x="754.0" y="787.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.0" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="759.1" y="771.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="762.1" y="782.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="759.1" y="755.0" width="2.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="762.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="761.2" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="762.2" y="787.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.18%)</title><rect x="762.2" y="771.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="765.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="764.3" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="764.3" y="771.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$287/288747493.get$Lambda (1 samples, 0.09%)</title><rect x="764.3" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="764.3" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="767.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="764.3" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.3" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="764.3" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.3" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.70%)</title><rect x="765.3" y="787.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.26%)</title><rect x="770.5" y="771.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.5" y="782.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="770.5" y="755.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="773.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="772.6" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="773.6" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.88%)</title><rect x="774.6" y="787.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="777.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="782.9" y="771.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.44%)</title><rect x="785.0" y="819.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (4 samples, 0.35%)</title><rect x="785.0" y="803.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.0" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="786.0" y="787.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="789.0" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="786.0" y="771.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="789.0" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="789.1" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="789.1" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="792.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="790.1" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="790.1" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.1" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.09%)</title><rect x="791.2" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.2" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.09%)</title><rect x="791.2" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.2" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="791.2" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.53%)</title><rect x="792.2" y="819.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.53%)</title><rect x="792.2" y="803.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.44%)</title><rect x="793.2" y="787.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$288/1709629550.accept (5 samples, 0.44%)</title><rect x="793.2" y="771.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (5 samples, 0.44%)</title><rect x="793.2" y="755.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.2" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.44%)</title><rect x="793.2" y="739.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.2" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.44%)</title><rect x="793.2" y="723.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.2" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="795.3" y="707.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="795.3" y="691.0" width="3.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="798.3" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="798.4" y="835.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.4" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="798.4" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/129976874.get$Lambda (1 samples, 0.09%)</title><rect x="798.4" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="798.4" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="798.4" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="801.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="798.4" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.01%)</title><rect x="799.4" y="835.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.4" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.01%)</title><rect x="799.4" y="819.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.4" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.84%)</title><rect x="801.5" y="803.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.5" y="814.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/129976874.accept (21 samples, 1.84%)</title><rect x="801.5" y="787.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="804.5" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (21 samples, 1.84%)</title><rect x="801.5" y="771.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.5" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/2097184527.complete (21 samples, 1.84%)</title><rect x="801.5" y="755.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.5" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (21 samples, 1.84%)</title><rect x="801.5" y="739.0" width="21.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="804.5" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1251198481.complete (21 samples, 1.84%)</title><rect x="801.5" y="723.0" width="21.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.5" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (21 samples, 1.84%)</title><rect x="801.5" y="707.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.5" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (21 samples, 1.84%)</title><rect x="801.5" y="691.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.5" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (21 samples, 1.84%)</title><rect x="801.5" y="675.0" width="21.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.5" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (21 samples, 1.84%)</title><rect x="801.5" y="659.0" width="21.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.5" y="670.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="822.2" y="643.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.2" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="822.2" y="627.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.2" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="823.2" y="835.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="823.2" y="819.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="826.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.53%)</title><rect x="825.3" y="851.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.3" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="827.3" y="835.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="830.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="827.3" y="819.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="830.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.79%)</title><rect x="831.5" y="899.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.79%)</title><rect x="831.5" y="883.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.79%)</title><rect x="831.5" y="867.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.79%)</title><rect x="831.5" y="851.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 0.35%)</title><rect x="836.6" y="835.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="839.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 18.74%)</title><rect x="840.8" y="899.0" width="221.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="843.8" y="910.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 18.65%)</title><rect x="841.8" y="883.0" width="220.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.8" y="894.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (209 samples, 18.30%)</title><rect x="841.8" y="867.0" width="215.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.8" y="878.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (29 samples, 2.54%)</title><rect x="854.2" y="851.0" width="30.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.2" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.61%)</title><rect x="884.2" y="851.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="887.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.61%)</title><rect x="884.2" y="835.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 14.01%)</title><rect x="891.4" y="851.0" width="165.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="894.4" y="862.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (140 samples, 12.26%)</title><rect x="912.0" y="835.0" width="144.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="915.0" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="918.2" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.2" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="919.3" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.3" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="920.3" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.3" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="921.3" y="819.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="924.3" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (125 samples, 10.95%)</title><rect x="924.4" y="819.0" width="129.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="927.4" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="926.5" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.5" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.93%)</title><rect x="927.5" y="803.0" width="22.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.5" y="814.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.35%)</title><rect x="936.8" y="787.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.8" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="937.9" y="771.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.9" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="937.9" y="755.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="940.9" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="939.9" y="771.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="942.9" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.79%)</title><rect x="941.0" y="787.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="950.3" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.3" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.96%)</title><rect x="951.3" y="803.0" width="11.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="954.3" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.54%)</title><rect x="962.7" y="803.0" width="29.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="965.7" y="814.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.85%)</title><rect x="992.6" y="803.0" width="45.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="995.6" y="814.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.35%)</title><rect x="1038.1" y="803.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1041.1" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1042.2" y="803.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1045.2" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.18%)</title><rect x="1043.3" y="803.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1046.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1045.3" y="803.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1048.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1049.5" y="803.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1052.5" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1050.5" y="803.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.5" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1052.6" y="803.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1055.6" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1053.6" y="819.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1056.6" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1055.7" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.7" y="830.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1056.7" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.18%)</title><rect x="1057.7" y="867.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="1059.8" y="867.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="1059.8" y="851.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="1059.8" y="835.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1062.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="1059.8" y="819.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1061.9" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1061.9" y="931.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1064.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1061.9" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1064.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1061.9" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1064.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1061.9" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1061.9" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1061.9" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1064.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1061.9" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1064.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1061.9" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.09%)</title><rect x="1061.9" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1064.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (1 samples, 0.09%)</title><rect x="1061.9" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1061.9" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1064.9" y="782.0"></text>
</g>
<g>
<title>Runtime1::new_instance(JavaThread*, Klass*) (1 samples, 0.09%)</title><rect x="1061.9" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::should_be_initialized() const (1 samples, 0.09%)</title><rect x="1061.9" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.9" y="750.0"></text>
</g>
<g>
<title>start_thread (123 samples, 10.77%)</title><rect x="1062.9" y="947.0" width="127.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1065.9" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (123 samples, 10.77%)</title><rect x="1062.9" y="931.0" width="127.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1065.9" y="942.0">java_start(Threa..</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.09%)</title><rect x="1062.9" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.9" y="926.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.09%)</title><rect x="1062.9" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.9" y="910.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.09%)</title><rect x="1062.9" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.9" y="894.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.09%)</title><rect x="1062.9" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.9" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::update_incremental_cset_info(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="1062.9" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.9" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="1062.9" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.9" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="1062.9" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.9" y="830.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.09%)</title><rect x="1062.9" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.9" y="814.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.01%)</title><rect x="1063.9" y="915.0" width="23.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.9" y="926.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.26%)</title><rect x="1063.9" y="899.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.9" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.26%)</title><rect x="1063.9" y="883.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.9" y="894.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="1063.9" y="867.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1066.9" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.75%)</title><rect x="1067.0" y="899.0" width="20.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.0" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.44%)</title><rect x="1068.1" y="883.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.1" y="894.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1068.1" y="867.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.1" y="878.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.35%)</title><rect x="1069.1" y="867.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1072.1" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="1073.2" y="883.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.2" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1073.2" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.2" y="878.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1073.2" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (13 samples, 1.14%)</title><rect x="1074.3" y="883.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.3" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 1.05%)</title><rect x="1075.3" y="867.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.3" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (10 samples, 0.88%)</title><rect x="1075.3" y="851.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.3" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (10 samples, 0.88%)</title><rect x="1075.3" y="835.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.3" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (10 samples, 0.88%)</title><rect x="1075.3" y="819.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (10 samples, 0.88%)</title><rect x="1075.3" y="803.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.3" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.53%)</title><rect x="1079.4" y="787.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.4" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.18%)</title><rect x="1080.5" y="771.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1082.5" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.5" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1082.5" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.5" y="766.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1083.6" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1083.6" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.6" y="766.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1083.6" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.6" y="750.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1084.6" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1085.6" y="851.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.18%)</title><rect x="1085.6" y="835.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.6" y="846.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1085.6" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.6" y="830.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1086.7" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.7" y="830.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.09%)</title><rect x="1086.7" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.7" y="814.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.09%)</title><rect x="1086.7" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.7" y="798.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.09%)</title><rect x="1086.7" y="771.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.7" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (96 samples, 8.41%)</title><rect x="1087.7" y="915.0" width="99.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="926.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (96 samples, 8.41%)</title><rect x="1087.7" y="899.0" width="99.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="910.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (96 samples, 8.41%)</title><rect x="1087.7" y="883.0" width="99.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="894.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (95 samples, 8.32%)</title><rect x="1087.7" y="867.0" width="98.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.7" y="878.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (93 samples, 8.14%)</title><rect x="1087.7" y="851.0" width="96.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="862.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (93 samples, 8.14%)</title><rect x="1087.7" y="835.0" width="96.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.7" y="846.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 4.03%)</title><rect x="1087.7" y="819.0" width="47.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="830.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="1087.7" y="803.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.18%)</title><rect x="1087.7" y="787.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.18%)</title><rect x="1087.7" y="771.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.7" y="782.0"></text>
</g>
<g>
<title>andI_rReg_mem_0Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1088.7" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.7" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.18%)</title><rect x="1089.8" y="803.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.8" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1089.8" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.8" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1089.8" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.8" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1089.8" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.8" y="766.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1090.8" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.8" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.35%)</title><rect x="1091.8" y="803.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.8" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.35%)</title><rect x="1091.8" y="787.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.8" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1092.9" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.9" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="1093.9" y="771.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.9" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1093.9" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.9" y="766.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1093.9" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.9" y="750.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.09%)</title><rect x="1093.9" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.9" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1094.9" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.9" y="766.0"></text>
</g>
<g>
<title>Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1096.0" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.0" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1097.0" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.0" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1097.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.0" y="798.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.09%)</title><rect x="1097.0" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.0" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1097.0" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1098.0" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1098.0" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1098.0" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.0" y="782.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.09%)</title><rect x="1098.0" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.0" y="766.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.09%)</title><rect x="1098.0" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 2.98%)</title><rect x="1099.1" y="803.0" width="35.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.1" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.18%)</title><rect x="1099.1" y="787.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.1" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1100.1" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.1" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1100.1" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.18%)</title><rect x="1101.1" y="787.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.1" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.18%)</title><rect x="1101.1" y="771.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1103.2" y="787.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.2" y="798.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1105.3" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1106.3" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.3" y="782.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1106.3" y="755.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.79%)</title><rect x="1107.3" y="787.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1113.5" y="771.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.61%)</title><rect x="1116.6" y="787.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.6" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1121.8" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.8" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1122.8" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.35%)</title><rect x="1123.9" y="787.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1127.0" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.0" y="782.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1128.0" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.0" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1128.0" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.0" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1128.0" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.0" y="766.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1128.0" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.0" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1129.0" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.0" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.35%)</title><rect x="1130.1" y="787.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.1" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1133.2" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1133.2" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.2" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1134.2" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.2" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (36 samples, 3.15%)</title><rect x="1135.2" y="819.0" width="37.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.2" y="830.0">Com..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1135.2" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1135.2" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="659.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="563.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="515.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="467.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="419.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="387.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="371.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="339.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="307.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="291.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="259.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="227.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="211.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="179.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="163.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="147.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="131.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="115.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="99.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="83.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="67.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="51.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.2" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="35.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.2" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1136.3" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.3" y="814.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1136.3" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.3" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1136.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 2.01%)</title><rect x="1137.3" y="803.0" width="23.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.3" y="814.0">P..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1137.3" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1138.3" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1139.4" y="787.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.18%)</title><rect x="1140.4" y="771.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 1.58%)</title><rect x="1142.5" y="787.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.49%)</title><rect x="1143.5" y="771.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.26%)</title><rect x="1144.5" y="755.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 1.05%)</title><rect x="1147.6" y="755.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.26%)</title><rect x="1155.9" y="739.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.0" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1160.0" y="755.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1163.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1161.1" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="814.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.09%)</title><rect x="1161.1" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.70%)</title><rect x="1162.1" y="803.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.70%)</title><rect x="1162.1" y="787.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1162.1" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1163.1" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="782.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.2" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.2" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1165.2" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.2" y="782.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.09%)</title><rect x="1165.2" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.2" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1168.3" y="771.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.18%)</title><rect x="1168.3" y="755.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1168.3" y="739.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1168.3" y="723.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="675.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.3" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1168.3" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.3" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.3" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1170.4" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1170.4" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1170.4" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1170.4" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1171.4" y="803.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.79%)</title><rect x="1172.4" y="819.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.79%)</title><rect x="1172.4" y="803.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.79%)</title><rect x="1172.4" y="787.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.79%)</title><rect x="1172.4" y="771.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.79%)</title><rect x="1172.4" y="755.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_anewarray() (1 samples, 0.09%)</title><rect x="1172.4" y="739.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.09%)</title><rect x="1172.4" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1172.4" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1172.4" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1172.4" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1173.5" y="739.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.5" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1173.5" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1173.5" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1173.5" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.5" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.5" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1173.5" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1173.5" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1173.5" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.5" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.5" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.5" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.09%)</title><rect x="1173.5" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="526.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.09%)</title><rect x="1173.5" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1174.5" y="723.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1174.5" y="707.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.09%)</title><rect x="1174.5" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1175.5" y="691.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1175.5" y="675.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1175.5" y="659.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1175.5" y="643.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1175.5" y="627.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1175.5" y="611.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1175.5" y="595.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1175.5" y="579.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1175.5" y="563.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1175.5" y="547.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1175.5" y="531.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1175.5" y="515.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1175.5" y="499.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1175.5" y="483.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1175.5" y="467.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1175.5" y="451.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1175.5" y="435.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1175.5" y="419.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="430.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1175.5" y="403.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1175.5" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="398.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1175.5" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.6" y="403.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.6" y="387.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.6" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.6" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.6" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.6" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1176.6" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.6" y="627.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.6" y="611.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.6" y="595.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.6" y="579.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.6" y="563.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.6" y="547.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.6" y="531.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.6" y="515.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.6" y="499.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.6" y="483.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.6" y="467.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.6" y="451.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.6" y="435.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.6" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.6" y="403.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.6" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1177.6" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>TypeTuple::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1177.6" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="355.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="339.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="323.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1178.6" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1178.6" y="211.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="595.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.7" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1179.7" y="467.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1179.7" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1179.7" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.7" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.7" y="403.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.7" y="387.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="371.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1179.7" y="355.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.7" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.7" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="307.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.09%)</title><rect x="1180.7" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1181.7" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1182.8" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1182.8" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>CodeHeap::header_size() (1 samples, 0.09%)</title><rect x="1182.8" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.18%)</title><rect x="1183.8" y="851.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.18%)</title><rect x="1183.8" y="835.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.18%)</title><rect x="1183.8" y="819.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.18%)</title><rect x="1183.8" y="803.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1183.8" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.8" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1183.8" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.09%)</title><rect x="1183.8" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.09%)</title><rect x="1183.8" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1184.8" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1184.8" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1185.9" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1185.9" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1185.9" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.09%)</title><rect x="1185.9" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.09%)</title><rect x="1185.9" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1186.9" y="915.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1186.9" y="899.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.18%)</title><rect x="1186.9" y="883.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="787.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="1187.9" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="1187.9" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>G1CopyingKeepAliveClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
</g>
</svg>
