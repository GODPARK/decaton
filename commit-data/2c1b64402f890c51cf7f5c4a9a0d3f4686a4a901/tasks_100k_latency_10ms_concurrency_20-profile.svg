<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (493 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.41%)</title><rect x="10.0" y="1283.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.41%)</title><rect x="10.0" y="1267.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 6.49%)</title><rect x="14.8" y="1283.0" width="76.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1294.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 6.49%)</title><rect x="14.8" y="1267.0" width="76.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1278.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.20%)</title><rect x="14.8" y="1251.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.20%)</title><rect x="14.8" y="1235.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/698405056.accept (1 samples, 0.20%)</title><rect x="14.8" y="1219.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.20%)</title><rect x="14.8" y="1203.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.20%)</title><rect x="14.8" y="1187.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.8" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.20%)</title><rect x="14.8" y="1171.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.41%)</title><rect x="17.2" y="1251.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.41%)</title><rect x="17.2" y="1235.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.20%)</title><rect x="19.6" y="1219.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="19.6" y="1203.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.20%)</title><rect x="19.6" y="1187.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.20%)</title><rect x="19.6" y="1171.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.20%)</title><rect x="19.6" y="1155.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.20%)</title><rect x="19.6" y="1139.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.20%)</title><rect x="19.6" y="1123.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.20%)</title><rect x="19.6" y="1107.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.20%)</title><rect x="19.6" y="1091.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.6" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="19.6" y="1075.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="22.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.41%)</title><rect x="22.0" y="1251.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.41%)</title><rect x="22.0" y="1235.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.41%)</title><rect x="22.0" y="1219.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.41%)</title><rect x="22.0" y="1203.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.41%)</title><rect x="22.0" y="1187.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.41%)</title><rect x="22.0" y="1171.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.41%)</title><rect x="22.0" y="1155.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.41%)</title><rect x="22.0" y="1139.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.41%)</title><rect x="22.0" y="1123.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.41%)</title><rect x="22.0" y="1107.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$269/803108689.test (2 samples, 0.41%)</title><rect x="22.0" y="1091.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsResume$61 (2 samples, 0.41%)</title><rect x="22.0" y="1075.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.20%)</title><rect x="24.4" y="1059.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.20%)</title><rect x="24.4" y="1043.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 2.23%)</title><rect x="26.8" y="1251.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.8" y="1262.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1191485037.accept (10 samples, 2.03%)</title><rect x="26.8" y="1235.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.8" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (10 samples, 2.03%)</title><rect x="26.8" y="1219.0" width="23.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.8" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (7 samples, 1.42%)</title><rect x="26.8" y="1203.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (7 samples, 1.42%)</title><rect x="26.8" y="1187.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (7 samples, 1.42%)</title><rect x="26.8" y="1171.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (7 samples, 1.42%)</title><rect x="26.8" y="1155.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 1.42%)</title><rect x="26.8" y="1139.0" width="16.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (7 samples, 1.42%)</title><rect x="26.8" y="1123.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 1.01%)</title><rect x="26.8" y="1107.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 1.01%)</title><rect x="26.8" y="1091.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 1.01%)</title><rect x="26.8" y="1075.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.41%)</title><rect x="38.7" y="1107.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.41%)</title><rect x="38.7" y="1091.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.41%)</title><rect x="38.7" y="1075.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.61%)</title><rect x="43.5" y="1203.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.61%)</title><rect x="43.5" y="1187.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.20%)</title><rect x="48.3" y="1171.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.20%)</title><rect x="48.3" y="1155.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.20%)</title><rect x="50.7" y="1235.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.20%)</title><rect x="50.7" y="1219.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.20%)</title><rect x="50.7" y="1203.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$EmptyMap.values (1 samples, 0.20%)</title><rect x="50.7" y="1187.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.25%)</title><rect x="53.1" y="1251.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.1" y="1262.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.25%)</title><rect x="53.1" y="1235.0" width="38.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.1" y="1246.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 2.23%)</title><rect x="53.1" y="1219.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.1" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.81%)</title><rect x="53.1" y="1203.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.81%)</title><rect x="53.1" y="1187.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.81%)</title><rect x="53.1" y="1171.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.20%)</title><rect x="53.1" y="1155.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.20%)</title><rect x="53.1" y="1139.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.20%)</title><rect x="53.1" y="1123.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.20%)</title><rect x="53.1" y="1107.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.20%)</title><rect x="53.1" y="1091.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.61%)</title><rect x="55.5" y="1155.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.20%)</title><rect x="55.5" y="1139.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.20%)</title><rect x="55.5" y="1123.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.20%)</title><rect x="55.5" y="1107.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.20%)</title><rect x="55.5" y="1091.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.20%)</title><rect x="55.5" y="1075.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.20%)</title><rect x="57.9" y="1139.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.20%)</title><rect x="57.9" y="1123.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.20%)</title><rect x="57.9" y="1107.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.20%)</title><rect x="57.9" y="1091.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.20%)</title><rect x="57.9" y="1075.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.20%)</title><rect x="57.9" y="1059.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.20%)</title><rect x="57.9" y="1043.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.9" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="57.9" y="1027.0" width="2.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="60.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.20%)</title><rect x="60.3" y="1139.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.3" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.20%)</title><rect x="60.3" y="1123.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.20%)</title><rect x="60.3" y="1107.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.20%)</title><rect x="60.3" y="1091.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.20%)</title><rect x="60.3" y="1075.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.20%)</title><rect x="60.3" y="1059.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.42%)</title><rect x="62.7" y="1203.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (2 samples, 0.41%)</title><rect x="62.7" y="1187.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.checkNotNull (2 samples, 0.41%)</title><rect x="62.7" y="1171.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.7" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.next (1 samples, 0.20%)</title><rect x="65.1" y="1155.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 0.81%)</title><rect x="67.4" y="1187.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.61%)</title><rect x="67.4" y="1171.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.61%)</title><rect x="67.4" y="1155.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.20%)</title><rect x="67.4" y="1139.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.20%)</title><rect x="67.4" y="1123.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.20%)</title><rect x="67.4" y="1107.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.20%)</title><rect x="67.4" y="1091.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.20%)</title><rect x="67.4" y="1075.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.20%)</title><rect x="67.4" y="1059.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.20%)</title><rect x="67.4" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.20%)</title><rect x="67.4" y="1027.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.41%)</title><rect x="69.8" y="1139.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.41%)</title><rect x="69.8" y="1123.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.41%)</title><rect x="69.8" y="1107.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.8" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.41%)</title><rect x="69.8" y="1091.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.20%)</title><rect x="74.6" y="1171.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.20%)</title><rect x="74.6" y="1155.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.20%)</title><rect x="74.6" y="1139.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.20%)</title><rect x="74.6" y="1123.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.20%)</title><rect x="74.6" y="1107.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.20%)</title><rect x="74.6" y="1091.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.20%)</title><rect x="77.0" y="1187.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.0" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.20%)</title><rect x="77.0" y="1171.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.0" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.20%)</title><rect x="77.0" y="1155.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.0" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.20%)</title><rect x="77.0" y="1139.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.20%)</title><rect x="77.0" y="1123.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.41%)</title><rect x="79.4" y="1219.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.41%)</title><rect x="79.4" y="1203.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.20%)</title><rect x="79.4" y="1187.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.20%)</title><rect x="79.4" y="1171.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.20%)</title><rect x="81.8" y="1187.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.20%)</title><rect x="81.8" y="1171.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="81.8" y="1155.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.20%)</title><rect x="81.8" y="1139.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.20%)</title><rect x="81.8" y="1123.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.20%)</title><rect x="84.2" y="1219.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.20%)</title><rect x="84.2" y="1203.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.20%)</title><rect x="84.2" y="1187.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="84.2" y="1171.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="84.2" y="1155.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.20%)</title><rect x="84.2" y="1139.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.20%)</title><rect x="84.2" y="1123.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.20%)</title><rect x="84.2" y="1107.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.20%)</title><rect x="84.2" y="1091.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.41%)</title><rect x="86.6" y="1219.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.20%)</title><rect x="86.6" y="1203.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.20%)</title><rect x="86.6" y="1187.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.20%)</title><rect x="86.6" y="1171.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.20%)</title><rect x="86.6" y="1155.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="86.6" y="1139.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.20%)</title><rect x="86.6" y="1123.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.20%)</title><rect x="86.6" y="1107.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.20%)</title><rect x="86.6" y="1091.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.6" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.20%)</title><rect x="86.6" y="1075.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.20%)</title><rect x="86.6" y="1059.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.20%)</title><rect x="86.6" y="1043.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.isolationLevel (1 samples, 0.20%)</title><rect x="89.0" y="1203.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.0" y="1214.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.20%)</title><rect x="89.0" y="1187.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.0" y="1198.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.20%)</title><rect x="89.0" y="1171.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.0" y="1182.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.20%)</title><rect x="89.0" y="1155.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="92.0" y="1166.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.20%)</title><rect x="89.0" y="1139.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.0" y="1150.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.20%)</title><rect x="89.0" y="1123.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.0" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.20%)</title><rect x="89.0" y="1107.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="92.0" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.20%)</title><rect x="89.0" y="1091.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="92.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (248 samples, 50.30%)</title><rect x="91.4" y="1283.0" width="593.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.4" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (248 samples, 50.30%)</title><rect x="91.4" y="1267.0" width="593.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.4" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (248 samples, 50.30%)</title><rect x="91.4" y="1251.0" width="593.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.4" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/978837454.run (238 samples, 48.28%)</title><rect x="91.4" y="1235.0" width="569.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.4" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/978837454.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (238 samples, 48.28%)</title><rect x="91.4" y="1219.0" width="569.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.4" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (238 samples, 48.28%)</title><rect x="91.4" y="1203.0" width="569.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.4" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (230 samples, 46.65%)</title><rect x="91.4" y="1187.0" width="550.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.4" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.20%)</title><rect x="91.4" y="1171.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (38 samples, 7.71%)</title><rect x="93.8" y="1171.0" width="90.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.8" y="1182.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (38 samples, 7.71%)</title><rect x="93.8" y="1155.0" width="90.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.8" y="1166.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (38 samples, 7.71%)</title><rect x="93.8" y="1139.0" width="90.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.8" y="1150.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 7.71%)</title><rect x="93.8" y="1123.0" width="90.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.8" y="1134.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 7.71%)</title><rect x="93.8" y="1107.0" width="90.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.8" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 7.71%)</title><rect x="93.8" y="1091.0" width="90.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.8" y="1102.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 2.64%)</title><rect x="93.8" y="1075.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.8" y="1086.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="101.0" y="1059.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="104.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="101.0" y="1043.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="104.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.41%)</title><rect x="103.3" y="1059.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.41%)</title><rect x="103.3" y="1043.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.41%)</title><rect x="103.3" y="1027.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.41%)</title><rect x="103.3" y="1011.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.41%)</title><rect x="103.3" y="995.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.41%)</title><rect x="103.3" y="979.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.41%)</title><rect x="103.3" y="963.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.42%)</title><rect x="108.1" y="1059.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.20%)</title><rect x="122.5" y="1043.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.20%)</title><rect x="122.5" y="1027.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="122.5" y="1011.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="125.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="122.5" y="995.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="125.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="122.5" y="979.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="125.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="122.5" y="963.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="125.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 4.67%)</title><rect x="124.9" y="1075.0" width="55.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.9" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.41%)</title><rect x="127.3" y="1059.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.41%)</title><rect x="127.3" y="1043.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.41%)</title><rect x="132.1" y="1059.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.41%)</title><rect x="132.1" y="1043.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.20%)</title><rect x="134.5" y="1027.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.20%)</title><rect x="134.5" y="1011.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.20%)</title><rect x="134.5" y="995.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 1.42%)</title><rect x="136.9" y="1059.0" width="16.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 1.22%)</title><rect x="139.2" y="1043.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 2.23%)</title><rect x="153.6" y="1059.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.6" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.61%)</title><rect x="158.4" y="1043.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.41%)</title><rect x="160.8" y="1027.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.41%)</title><rect x="160.8" y="1011.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.22%)</title><rect x="165.6" y="1043.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.22%)</title><rect x="165.6" y="1027.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 1.22%)</title><rect x="165.6" y="1011.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.41%)</title><rect x="165.6" y="995.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.20%)</title><rect x="168.0" y="979.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.41%)</title><rect x="170.4" y="995.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.41%)</title><rect x="170.4" y="979.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.41%)</title><rect x="170.4" y="963.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.41%)</title><rect x="170.4" y="947.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.41%)</title><rect x="170.4" y="931.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.41%)</title><rect x="175.2" y="995.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.41%)</title><rect x="175.2" y="979.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.41%)</title><rect x="175.2" y="963.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.41%)</title><rect x="175.2" y="947.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.2" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.41%)</title><rect x="175.2" y="931.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.20%)</title><rect x="175.2" y="915.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="178.2" y="926.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.20%)</title><rect x="177.5" y="915.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.41%)</title><rect x="179.9" y="1075.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.41%)</title><rect x="179.9" y="1059.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.41%)</title><rect x="179.9" y="1043.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.41%)</title><rect x="179.9" y="1027.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.41%)</title><rect x="179.9" y="1011.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (177 samples, 35.90%)</title><rect x="184.7" y="1171.0" width="423.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.7" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (29 samples, 5.88%)</title><rect x="184.7" y="1155.0" width="69.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="187.7" y="1166.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 5.27%)</title><rect x="191.9" y="1139.0" width="62.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.9" y="1150.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 4.87%)</title><rect x="196.7" y="1123.0" width="57.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.7" y="1134.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 1.83%)</title><rect x="199.1" y="1107.0" width="21.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.1" y="1118.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.83%)</title><rect x="199.1" y="1091.0" width="21.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.1" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 1.01%)</title><rect x="208.7" y="1075.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 1.01%)</title><rect x="208.7" y="1059.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (5 samples, 1.01%)</title><rect x="208.7" y="1043.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 2.84%)</title><rect x="220.6" y="1107.0" width="33.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.6" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 2.23%)</title><rect x="227.8" y="1091.0" width="26.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 2.23%)</title><rect x="227.8" y="1075.0" width="26.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.41%)</title><rect x="249.4" y="1059.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.20%)</title><rect x="254.1" y="1155.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (33 samples, 6.69%)</title><rect x="256.5" y="1155.0" width="79.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.5" y="1166.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="256.5" y="1139.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="259.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="256.5" y="1123.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="259.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (32 samples, 6.49%)</title><rect x="258.9" y="1139.0" width="76.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.9" y="1150.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (18 samples, 3.65%)</title><rect x="258.9" y="1123.0" width="43.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.9" y="1134.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 2.23%)</title><rect x="270.9" y="1107.0" width="26.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.9" y="1118.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 2.23%)</title><rect x="270.9" y="1091.0" width="26.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.9" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.42%)</title><rect x="278.1" y="1075.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.42%)</title><rect x="278.1" y="1059.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="281.1" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.42%)</title><rect x="278.1" y="1043.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.61%)</title><rect x="285.3" y="1027.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.20%)</title><rect x="287.6" y="1011.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="290.6" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.20%)</title><rect x="287.6" y="995.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="290.6" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.20%)</title><rect x="287.6" y="979.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="290.6" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.20%)</title><rect x="287.6" y="963.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="290.6" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="290.0" y="1011.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="293.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="290.0" y="995.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="293.0" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.20%)</title><rect x="290.0" y="979.0" width="2.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="293.0" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="292.4" y="1027.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="295.4" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="294.8" y="1075.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="297.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.20%)</title><rect x="297.2" y="1107.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.20%)</title><rect x="297.2" y="1091.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.2" y="1102.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.20%)</title><rect x="297.2" y="1075.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="300.2" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="299.6" y="1107.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="302.6" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 2.84%)</title><rect x="302.0" y="1123.0" width="33.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.0" y="1134.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (14 samples, 2.84%)</title><rect x="302.0" y="1107.0" width="33.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.0" y="1118.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 1.22%)</title><rect x="302.0" y="1091.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 1.22%)</title><rect x="302.0" y="1075.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 1.01%)</title><rect x="304.4" y="1059.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 1.01%)</title><rect x="304.4" y="1043.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (5 samples, 1.01%)</title><rect x="304.4" y="1027.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.20%)</title><rect x="316.4" y="1091.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.20%)</title><rect x="316.4" y="1075.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.20%)</title><rect x="316.4" y="1059.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.20%)</title><rect x="316.4" y="1043.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.20%)</title><rect x="316.4" y="1027.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.42%)</title><rect x="318.8" y="1091.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.22%)</title><rect x="321.2" y="1075.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="321.2" y="1059.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.20%)</title><rect x="321.2" y="1043.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.01%)</title><rect x="323.5" y="1059.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.61%)</title><rect x="328.3" y="1043.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (95 samples, 19.27%)</title><rect x="335.5" y="1155.0" width="227.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.5" y="1166.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (95 samples, 19.27%)</title><rect x="335.5" y="1139.0" width="227.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.5" y="1150.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/996459959.process (73 samples, 14.81%)</title><rect x="359.5" y="1123.0" width="174.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.5" y="1134.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (73 samples, 14.81%)</title><rect x="359.5" y="1107.0" width="174.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.5" y="1118.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 14.40%)</title><rect x="364.2" y="1091.0" width="170.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.2" y="1102.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (69 samples, 14.00%)</title><rect x="369.0" y="1075.0" width="165.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.0" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (69 samples, 14.00%)</title><rect x="369.0" y="1059.0" width="165.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.0" y="1070.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (65 samples, 13.18%)</title><rect x="378.6" y="1043.0" width="155.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="381.6" y="1054.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.61%)</title><rect x="383.4" y="1027.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.41%)</title><rect x="390.6" y="1027.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="393.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.41%)</title><rect x="395.4" y="1027.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="398.4" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 1.22%)</title><rect x="400.1" y="1027.0" width="14.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="403.1" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="412.1" y="1011.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="415.1" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.41%)</title><rect x="414.5" y="1027.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="417.5" y="1038.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (48 samples, 9.74%)</title><rect x="419.3" y="1027.0" width="114.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="422.3" y="1038.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.81%)</title><rect x="428.9" y="1011.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.9" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.41%)</title><rect x="433.7" y="995.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="436.7" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.20%)</title><rect x="438.4" y="1011.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="441.4" y="1022.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.20%)</title><rect x="440.8" y="1011.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="443.8" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.61%)</title><rect x="443.2" y="1011.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="446.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.61%)</title><rect x="443.2" y="995.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="446.2" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.81%)</title><rect x="450.4" y="1011.0" width="9.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="453.4" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.41%)</title><rect x="460.0" y="1011.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="463.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (24 samples, 4.87%)</title><rect x="464.8" y="1011.0" width="57.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="467.8" y="1022.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.20%)</title><rect x="522.2" y="1011.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="525.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.20%)</title><rect x="524.6" y="1011.0" width="2.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="527.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.41%)</title><rect x="527.0" y="1011.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="530.0" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="531.8" y="1011.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="534.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$287/1153883508.complete (1 samples, 0.20%)</title><rect x="534.2" y="1123.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.20%)</title><rect x="534.2" y="1107.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="534.2" y="1091.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="537.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="534.2" y="1075.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="537.2" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="534.2" y="1059.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="537.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="534.2" y="1043.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="537.2" y="1054.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.20%)</title><rect x="534.2" y="1027.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="537.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.41%)</title><rect x="536.6" y="1123.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.41%)</title><rect x="536.6" y="1107.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 1.42%)</title><rect x="541.4" y="1123.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="544.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.41%)</title><rect x="553.3" y="1107.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="556.3" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="553.3" y="1091.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="556.3" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.20%)</title><rect x="555.7" y="1091.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.41%)</title><rect x="558.1" y="1123.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 3.85%)</title><rect x="562.9" y="1155.0" width="45.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.9" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 3.85%)</title><rect x="562.9" y="1139.0" width="45.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.9" y="1150.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="594.0" y="1123.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="597.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="594.0" y="1107.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="597.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.81%)</title><rect x="596.4" y="1123.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/246330965.accept (4 samples, 0.81%)</title><rect x="596.4" y="1107.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (4 samples, 0.81%)</title><rect x="596.4" y="1091.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1194216973.complete (4 samples, 0.81%)</title><rect x="596.4" y="1075.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (4 samples, 0.81%)</title><rect x="596.4" y="1059.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1791347205.complete (4 samples, 0.81%)</title><rect x="596.4" y="1043.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (4 samples, 0.81%)</title><rect x="596.4" y="1027.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 0.81%)</title><rect x="596.4" y="1011.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="599.4" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.81%)</title><rect x="596.4" y="995.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.4" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.81%)</title><rect x="596.4" y="979.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.81%)</title><rect x="596.4" y="963.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.4" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="603.6" y="947.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="606.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="603.6" y="931.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="606.6" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.20%)</title><rect x="606.0" y="1123.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="609.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 2.64%)</title><rect x="608.4" y="1171.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="611.4" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 2.64%)</title><rect x="608.4" y="1155.0" width="31.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.4" y="1166.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.20%)</title><rect x="608.4" y="1139.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 2.43%)</title><rect x="610.8" y="1139.0" width="28.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.8" y="1150.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/246330965.accept (12 samples, 2.43%)</title><rect x="610.8" y="1123.0" width="28.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.8" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (12 samples, 2.43%)</title><rect x="610.8" y="1107.0" width="28.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.8" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1194216973.complete (12 samples, 2.43%)</title><rect x="610.8" y="1091.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="613.8" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (12 samples, 2.43%)</title><rect x="610.8" y="1075.0" width="28.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.8" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1791347205.complete (12 samples, 2.43%)</title><rect x="610.8" y="1059.0" width="28.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.8" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (12 samples, 2.43%)</title><rect x="610.8" y="1043.0" width="28.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.8" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 2.43%)</title><rect x="610.8" y="1027.0" width="28.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.8" y="1038.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 2.43%)</title><rect x="610.8" y="1011.0" width="28.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.8" y="1022.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 2.43%)</title><rect x="610.8" y="995.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.8" y="1006.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 2.43%)</title><rect x="610.8" y="979.0" width="28.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="613.8" y="990.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.20%)</title><rect x="639.5" y="1171.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="642.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="639.5" y="1155.0" width="2.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="642.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 1.62%)</title><rect x="641.9" y="1187.0" width="19.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.9" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.20%)</title><rect x="658.6" y="1171.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="661.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.20%)</title><rect x="661.0" y="1235.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="664.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.20%)</title><rect x="663.4" y="1235.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.20%)</title><rect x="663.4" y="1219.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.20%)</title><rect x="663.4" y="1203.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.20%)</title><rect x="663.4" y="1187.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 1.62%)</title><rect x="665.8" y="1235.0" width="19.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.42%)</title><rect x="668.2" y="1219.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="671.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.41%)</title><rect x="668.2" y="1203.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.41%)</title><rect x="668.2" y="1187.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.41%)</title><rect x="668.2" y="1171.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.41%)</title><rect x="668.2" y="1155.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.41%)</title><rect x="668.2" y="1139.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.01%)</title><rect x="673.0" y="1203.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.01%)</title><rect x="673.0" y="1187.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.01%)</title><rect x="673.0" y="1171.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.01%)</title><rect x="673.0" y="1155.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.41%)</title><rect x="685.0" y="1283.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.20%)</title><rect x="687.4" y="1267.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="690.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.20%)</title><rect x="687.4" y="1251.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.20%)</title><rect x="687.4" y="1235.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.20%)</title><rect x="687.4" y="1219.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="690.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.20%)</title><rect x="687.4" y="1203.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.4" y="1214.0"></text>
</g>
<g>
<title>start_thread (209 samples, 42.39%)</title><rect x="689.8" y="1283.0" width="500.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="692.8" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (209 samples, 42.39%)</title><rect x="689.8" y="1267.0" width="500.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="692.8" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 3.65%)</title><rect x="689.8" y="1251.0" width="43.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.8" y="1262.0">Gang..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.41%)</title><rect x="689.8" y="1235.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.8" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.41%)</title><rect x="689.8" y="1219.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.8" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.41%)</title><rect x="689.8" y="1203.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="692.8" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 3.25%)</title><rect x="694.5" y="1235.0" width="38.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="697.5" y="1246.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 2.84%)</title><rect x="694.5" y="1219.0" width="33.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="697.5" y="1230.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 2.84%)</title><rect x="694.5" y="1203.0" width="33.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.5" y="1214.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 1.83%)</title><rect x="704.1" y="1187.0" width="21.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="707.1" y="1198.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (5 samples, 1.01%)</title><rect x="711.3" y="1171.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="714.3" y="1182.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.20%)</title><rect x="723.3" y="1171.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.3" y="1182.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.20%)</title><rect x="725.7" y="1187.0" width="2.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="728.7" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.20%)</title><rect x="728.1" y="1219.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="731.1" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.20%)</title><rect x="728.1" y="1203.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.1" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.20%)</title><rect x="728.1" y="1187.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="731.1" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.20%)</title><rect x="728.1" y="1171.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="731.1" y="1182.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.20%)</title><rect x="728.1" y="1155.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.1" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.20%)</title><rect x="728.1" y="1139.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.1" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.20%)</title><rect x="728.1" y="1123.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="731.1" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.20%)</title><rect x="728.1" y="1107.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="731.1" y="1118.0"></text>
</g>
<g>
<title>ageTable::merge_par(ageTable*) (1 samples, 0.20%)</title><rect x="730.4" y="1219.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="733.4" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (189 samples, 38.34%)</title><rect x="732.8" y="1251.0" width="452.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="735.8" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (189 samples, 38.34%)</title><rect x="732.8" y="1235.0" width="452.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.8" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (189 samples, 38.34%)</title><rect x="732.8" y="1219.0" width="452.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="735.8" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (188 samples, 38.13%)</title><rect x="732.8" y="1203.0" width="450.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="735.8" y="1214.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (184 samples, 37.32%)</title><rect x="732.8" y="1187.0" width="440.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="735.8" y="1198.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (184 samples, 37.32%)</title><rect x="732.8" y="1171.0" width="440.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="735.8" y="1182.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 13.18%)</title><rect x="735.2" y="1155.0" width="155.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.2" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.41%)</title><rect x="735.2" y="1139.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="738.2" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.41%)</title><rect x="735.2" y="1123.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.2" y="1134.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.20%)</title><rect x="735.2" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="738.2" y="1118.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.20%)</title><rect x="735.2" y="1091.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.2" y="1102.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.20%)</title><rect x="735.2" y="1075.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.2" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.20%)</title><rect x="735.2" y="1059.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.2" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.20%)</title><rect x="737.6" y="1107.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="740.6" y="1118.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.20%)</title><rect x="737.6" y="1091.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.6" y="1102.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.20%)</title><rect x="737.6" y="1075.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.6" y="1086.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.20%)</title><rect x="737.6" y="1059.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.6" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.81%)</title><rect x="740.0" y="1139.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.0" y="1150.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.41%)</title><rect x="740.0" y="1123.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="743.0" y="1134.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="740.0" y="1107.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.0" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="742.4" y="1107.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.4" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.20%)</title><rect x="742.4" y="1091.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.4" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.20%)</title><rect x="744.8" y="1123.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.8" y="1134.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.20%)</title><rect x="747.2" y="1123.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.01%)</title><rect x="749.6" y="1139.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.20%)</title><rect x="749.6" y="1123.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="752.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.81%)</title><rect x="752.0" y="1123.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.0" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.81%)</title><rect x="752.0" y="1107.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="755.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.61%)</title><rect x="761.6" y="1139.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.61%)</title><rect x="761.6" y="1123.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.41%)</title><rect x="761.6" y="1107.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.20%)</title><rect x="761.6" y="1091.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.20%)</title><rect x="764.0" y="1091.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="767.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.20%)</title><rect x="766.3" y="1107.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="769.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 10.34%)</title><rect x="768.7" y="1139.0" width="122.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.7" y="1150.0">PhaseChaitin::R..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.20%)</title><rect x="768.7" y="1123.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.7" y="1134.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.20%)</title><rect x="771.1" y="1123.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.1" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.41%)</title><rect x="773.5" y="1123.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="776.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.20%)</title><rect x="775.9" y="1107.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="778.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.81%)</title><rect x="778.3" y="1123.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="781.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="778.3" y="1107.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="781.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.61%)</title><rect x="780.7" y="1107.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="783.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.61%)</title><rect x="780.7" y="1091.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.41%)</title><rect x="787.9" y="1123.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="790.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.01%)</title><rect x="792.7" y="1123.0" width="11.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.20%)</title><rect x="799.9" y="1107.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.20%)</title><rect x="799.9" y="1091.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="802.9" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.20%)</title><rect x="799.9" y="1075.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.9" y="1086.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.20%)</title><rect x="802.3" y="1107.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="805.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.22%)</title><rect x="804.6" y="1123.0" width="14.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="807.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.41%)</title><rect x="814.2" y="1107.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.61%)</title><rect x="819.0" y="1123.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.81%)</title><rect x="826.2" y="1123.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="829.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.61%)</title><rect x="828.6" y="1107.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (15 samples, 3.04%)</title><rect x="835.8" y="1123.0" width="35.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.8" y="1134.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.20%)</title><rect x="835.8" y="1107.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.8" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 2.84%)</title><rect x="838.2" y="1107.0" width="33.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.2" y="1118.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.20%)</title><rect x="838.2" y="1091.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="841.2" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 2.64%)</title><rect x="840.5" y="1091.0" width="31.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.5" y="1102.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.61%)</title><rect x="840.5" y="1075.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="843.5" y="1086.0"></text>
</g>
<g>
<title>IndexSet::swap(IndexSet*) (1 samples, 0.20%)</title><rect x="847.7" y="1075.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.7" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 1.42%)</title><rect x="850.1" y="1075.0" width="16.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.41%)</title><rect x="866.9" y="1075.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.20%)</title><rect x="871.7" y="1123.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.41%)</title><rect x="874.1" y="1123.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.41%)</title><rect x="874.1" y="1107.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.20%)</title><rect x="878.8" y="1123.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="881.8" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.20%)</title><rect x="878.8" y="1107.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="881.8" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.81%)</title><rect x="881.2" y="1123.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.2" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.61%)</title><rect x="881.2" y="1107.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="884.2" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.20%)</title><rect x="888.4" y="1107.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.4" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (111 samples, 22.52%)</title><rect x="890.8" y="1155.0" width="265.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.8" y="1166.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.20%)</title><rect x="890.8" y="1139.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.8" y="1150.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.20%)</title><rect x="890.8" y="1123.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.81%)</title><rect x="893.2" y="1139.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="896.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.81%)</title><rect x="893.2" y="1123.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="893.2" y="1107.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="896.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.20%)</title><rect x="893.2" y="1091.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.20%)</title><rect x="893.2" y="1075.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="896.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.61%)</title><rect x="895.6" y="1107.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.41%)</title><rect x="898.0" y="1091.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="1075.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="1059.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="1043.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="1027.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="1011.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="995.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="901.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.20%)</title><rect x="898.0" y="979.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.0" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.20%)</title><rect x="898.0" y="963.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="900.4" y="1075.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.20%)</title><rect x="900.4" y="1059.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (93 samples, 18.86%)</title><rect x="902.8" y="1139.0" width="222.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.8" y="1150.0">PhaseIdealLoop::build_and_opt..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.61%)</title><rect x="902.8" y="1123.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.8" y="1134.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.20%)</title><rect x="907.6" y="1107.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.61%)</title><rect x="910.0" y="1123.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.0" y="1134.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.20%)</title><rect x="914.7" y="1107.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="917.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (83 samples, 16.84%)</title><rect x="917.1" y="1123.0" width="198.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.1" y="1134.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (79 samples, 16.02%)</title><rect x="926.7" y="1107.0" width="189.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.7" y="1118.0">PhaseIdealLoop::build_loo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.22%)</title><rect x="926.7" y="1091.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (73 samples, 14.81%)</title><rect x="941.1" y="1091.0" width="174.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.1" y="1102.0">PhaseIdealLoop::get_la..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 1.62%)</title><rect x="1096.7" y="1075.0" width="19.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.41%)</title><rect x="1115.8" y="1123.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.20%)</title><rect x="1118.2" y="1107.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.20%)</title><rect x="1120.6" y="1123.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.20%)</title><rect x="1120.6" y="1107.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.20%)</title><rect x="1120.6" y="1091.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.20%)</title><rect x="1120.6" y="1075.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="1086.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.20%)</title><rect x="1120.6" y="1059.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="1070.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.20%)</title><rect x="1123.0" y="1123.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 2.03%)</title><rect x="1125.4" y="1139.0" width="23.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="1150.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 1.83%)</title><rect x="1125.4" y="1123.0" width="21.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="1134.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1127.8" y="1107.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.8" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.20%)</title><rect x="1127.8" y="1091.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.8" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1127.8" y="1075.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.8" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1127.8" y="1059.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.8" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1130.2" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.41%)</title><rect x="1132.6" y="1107.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.20%)</title><rect x="1134.9" y="1091.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.9" y="1102.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.20%)</title><rect x="1134.9" y="1075.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.9" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.41%)</title><rect x="1137.3" y="1107.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.3" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.41%)</title><rect x="1137.3" y="1091.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.3" y="1102.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.20%)</title><rect x="1142.1" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.1" y="1118.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1144.5" y="1107.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.5" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.20%)</title><rect x="1144.5" y="1091.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.5" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1144.5" y="1075.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.5" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1144.5" y="1059.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.5" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1144.5" y="1043.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.5" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1144.5" y="1027.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.5" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.20%)</title><rect x="1146.9" y="1123.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.9" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.20%)</title><rect x="1149.3" y="1139.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.20%)</title><rect x="1149.3" y="1123.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.3" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.20%)</title><rect x="1149.3" y="1107.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.20%)</title><rect x="1149.3" y="1091.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.3" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.20%)</title><rect x="1151.7" y="1139.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.20%)</title><rect x="1151.7" y="1123.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.20%)</title><rect x="1151.7" y="1107.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.7" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.20%)</title><rect x="1154.1" y="1139.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1157.1" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.01%)</title><rect x="1156.5" y="1155.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.01%)</title><rect x="1156.5" y="1139.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.01%)</title><rect x="1156.5" y="1123.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.01%)</title><rect x="1156.5" y="1107.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.01%)</title><rect x="1156.5" y="1091.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.01%)</title><rect x="1156.5" y="1075.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="1086.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.41%)</title><rect x="1156.5" y="1059.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="1070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.41%)</title><rect x="1156.5" y="1043.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.41%)</title><rect x="1156.5" y="1027.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.41%)</title><rect x="1156.5" y="1011.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.5" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.41%)</title><rect x="1156.5" y="995.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.41%)</title><rect x="1156.5" y="979.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.41%)</title><rect x="1156.5" y="963.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.5" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.41%)</title><rect x="1156.5" y="947.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1156.5" y="931.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.20%)</title><rect x="1156.5" y="915.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="1156.5" y="899.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.20%)</title><rect x="1156.5" y="883.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="894.0"></text>
</g>
<g>
<title>FieldType::basic_type(Symbol*) (1 samples, 0.20%)</title><rect x="1156.5" y="867.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.20%)</title><rect x="1158.9" y="931.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1158.9" y="915.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1158.9" y="899.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1158.9" y="883.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.9" y="894.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.20%)</title><rect x="1158.9" y="867.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.20%)</title><rect x="1158.9" y="851.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1158.9" y="835.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="1158.9" y="819.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1158.9" y="803.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1158.9" y="787.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.20%)</title><rect x="1158.9" y="771.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.20%)</title><rect x="1158.9" y="755.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.61%)</title><rect x="1161.3" y="1059.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.61%)</title><rect x="1161.3" y="1043.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.61%)</title><rect x="1161.3" y="1027.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.61%)</title><rect x="1161.3" y="1011.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.61%)</title><rect x="1161.3" y="995.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.61%)</title><rect x="1161.3" y="979.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1161.3" y="963.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1161.3" y="947.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1161.3" y="931.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1161.3" y="915.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1161.3" y="899.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1161.3" y="883.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1161.3" y="867.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1161.3" y="851.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1161.3" y="835.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1161.3" y="819.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1161.3" y="803.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1161.3" y="787.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1161.3" y="771.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1161.3" y="755.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1161.3" y="739.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1161.3" y="723.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1161.3" y="707.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1161.3" y="691.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1161.3" y="675.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1161.3" y="659.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="670.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.20%)</title><rect x="1161.3" y="643.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="654.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.20%)</title><rect x="1161.3" y="627.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1164.3" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="963.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="947.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="931.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="915.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="899.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="883.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="867.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="851.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="819.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="803.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="787.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="771.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="755.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="739.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="723.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="707.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="691.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="675.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="659.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="643.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="627.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="611.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="595.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="579.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="563.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="547.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="531.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="515.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="499.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="483.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="467.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="451.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="435.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="419.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.41%)</title><rect x="1163.7" y="403.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1163.7" y="387.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.41%)</title><rect x="1163.7" y="371.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.41%)</title><rect x="1163.7" y="355.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.41%)</title><rect x="1163.7" y="339.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.41%)</title><rect x="1163.7" y="323.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="334.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.20%)</title><rect x="1163.7" y="307.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1166.1" y="307.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1166.1" y="291.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1166.1" y="275.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1166.1" y="259.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1166.1" y="243.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1166.1" y="227.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1166.1" y="211.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1166.1" y="195.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1166.1" y="179.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1166.1" y="163.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1166.1" y="147.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1166.1" y="131.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1166.1" y="115.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1166.1" y="99.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1166.1" y="83.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1166.1" y="67.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1166.1" y="51.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.20%)</title><rect x="1166.1" y="35.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.41%)</title><rect x="1168.5" y="1155.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.20%)</title><rect x="1168.5" y="1139.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.20%)</title><rect x="1170.9" y="1139.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1173.9" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.81%)</title><rect x="1173.2" y="1187.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.81%)</title><rect x="1173.2" y="1171.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.81%)</title><rect x="1173.2" y="1155.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.61%)</title><rect x="1173.2" y="1139.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.2" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.20%)</title><rect x="1173.2" y="1123.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.20%)</title><rect x="1173.2" y="1107.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="1118.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.20%)</title><rect x="1173.2" y="1091.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.41%)</title><rect x="1175.6" y="1123.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="1134.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::optimize(BlockList*) (1 samples, 0.20%)</title><rect x="1175.6" y="1107.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="1118.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_empty_blocks(BlockList*) (1 samples, 0.20%)</title><rect x="1175.6" y="1091.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.6" y="1102.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.20%)</title><rect x="1178.0" y="1107.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.20%)</title><rect x="1178.0" y="1091.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="1102.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.20%)</title><rect x="1178.0" y="1075.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="1086.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.20%)</title><rect x="1178.0" y="1059.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.20%)</title><rect x="1180.4" y="1139.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.20%)</title><rect x="1180.4" y="1123.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.20%)</title><rect x="1180.4" y="1107.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="1118.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.20%)</title><rect x="1180.4" y="1091.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.20%)</title><rect x="1180.4" y="1075.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="1086.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.20%)</title><rect x="1182.8" y="1203.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.20%)</title><rect x="1182.8" y="1187.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.20%)</title><rect x="1182.8" y="1171.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.20%)</title><rect x="1182.8" y="1155.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1185.8" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.41%)</title><rect x="1185.2" y="1251.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.41%)</title><rect x="1185.2" y="1235.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.20%)</title><rect x="1185.2" y="1219.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.20%)</title><rect x="1185.2" y="1203.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.20%)</title><rect x="1185.2" y="1187.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1188.2" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.20%)</title><rect x="1187.6" y="1219.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.6" y="1230.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.20%)</title><rect x="1187.6" y="1203.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.20%)</title><rect x="1187.6" y="1187.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="1198.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.20%)</title><rect x="1187.6" y="1171.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="1182.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.20%)</title><rect x="1187.6" y="1155.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.20%)</title><rect x="1187.6" y="1139.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.6" y="1150.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.20%)</title><rect x="1187.6" y="1123.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.6" y="1134.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.20%)</title><rect x="1187.6" y="1107.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="1118.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.20%)</title><rect x="1187.6" y="1091.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="1102.0"></text>
</g>
</g>
</svg>
