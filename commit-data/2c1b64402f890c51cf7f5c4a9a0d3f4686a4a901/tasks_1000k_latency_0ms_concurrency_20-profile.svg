<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1622" onload="init(evt)" viewBox="0 0 1200 1622" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1605"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1605"> </text>
<g id="frames">
<g>
<title>all (1,414 samples, 100.00%)</title><rect x="10.0" y="1571.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1582.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (284 samples, 20.08%)</title><rect x="10.8" y="1555.0" width="237.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1566.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (284 samples, 20.08%)</title><rect x="10.8" y="1539.0" width="237.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.8" y="1550.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.42%)</title><rect x="10.8" y="1523.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.8" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.42%)</title><rect x="10.8" y="1507.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/965852238.accept (6 samples, 0.42%)</title><rect x="10.8" y="1491.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.42%)</title><rect x="10.8" y="1475.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.42%)</title><rect x="10.8" y="1459.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.35%)</title><rect x="11.7" y="1443.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.7" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.28%)</title><rect x="15.8" y="1523.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.28%)</title><rect x="15.8" y="1507.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="1518.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="16.7" y="1491.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="16.7" y="1475.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="16.7" y="1459.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="17.5" y="1491.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="17.5" y="1475.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.5" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="18.3" y="1459.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="18.3" y="1443.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="18.3" y="1427.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.3" y="1438.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="18.3" y="1411.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="18.3" y="1395.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (224 samples, 15.84%)</title><rect x="19.2" y="1523.0" width="186.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.2" y="1534.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1710242964.accept (217 samples, 15.35%)</title><rect x="20.8" y="1507.0" width="181.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.8" y="1518.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (215 samples, 15.21%)</title><rect x="22.5" y="1491.0" width="179.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.5" y="1502.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (165 samples, 11.67%)</title><rect x="23.4" y="1475.0" width="137.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.4" y="1486.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (165 samples, 11.67%)</title><rect x="23.4" y="1459.0" width="137.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.4" y="1470.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (165 samples, 11.67%)</title><rect x="23.4" y="1443.0" width="137.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.4" y="1454.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="36.7" y="1427.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (146 samples, 10.33%)</title><rect x="37.5" y="1427.0" width="121.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="1438.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (146 samples, 10.33%)</title><rect x="37.5" y="1411.0" width="121.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.5" y="1422.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (146 samples, 10.33%)</title><rect x="37.5" y="1395.0" width="121.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.5" y="1406.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 7.43%)</title><rect x="37.5" y="1379.0" width="87.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.5" y="1390.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 2.33%)</title><rect x="37.5" y="1363.0" width="27.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.5" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 2.33%)</title><rect x="37.5" y="1347.0" width="27.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (33 samples, 2.33%)</title><rect x="37.5" y="1331.0" width="27.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.5" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (72 samples, 5.09%)</title><rect x="65.1" y="1363.0" width="60.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.1" y="1374.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (72 samples, 5.09%)</title><rect x="65.1" y="1347.0" width="60.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.1" y="1358.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 5.09%)</title><rect x="65.1" y="1331.0" width="60.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.1" y="1342.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 5.09%)</title><rect x="65.1" y="1315.0" width="60.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.1" y="1326.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 4.81%)</title><rect x="68.4" y="1299.0" width="56.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.4" y="1310.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="68.4" y="1283.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="71.4" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 4.31%)</title><rect x="69.3" y="1283.0" width="50.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="72.3" y="1294.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="70.1" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="73.1" y="1278.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="70.9" y="1267.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="73.9" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 2.69%)</title><rect x="71.8" y="1267.0" width="31.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="74.8" y="1278.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.21%)</title><rect x="103.5" y="1267.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.5" y="1278.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.20%)</title><rect x="106.0" y="1267.0" width="14.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="109.0" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.14%)</title><rect x="120.2" y="1283.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="123.2" y="1294.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="121.8" y="1283.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="124.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.21%)</title><rect x="125.2" y="1379.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.21%)</title><rect x="125.2" y="1363.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.21%)</title><rect x="125.2" y="1347.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 2.69%)</title><rect x="127.7" y="1379.0" width="31.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.7" y="1390.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 2.69%)</title><rect x="127.7" y="1363.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.7" y="1374.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 2.69%)</title><rect x="127.7" y="1347.0" width="31.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.7" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 2.69%)</title><rect x="127.7" y="1331.0" width="31.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.7" y="1342.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="159.4" y="1427.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="162.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.35%)</title><rect x="161.0" y="1475.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.0" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.35%)</title><rect x="161.0" y="1459.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="165.2" y="1475.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.2" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="165.2" y="1459.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.2" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="165.2" y="1443.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.2" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (43 samples, 3.04%)</title><rect x="166.1" y="1475.0" width="35.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.1" y="1486.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (43 samples, 3.04%)</title><rect x="166.1" y="1459.0" width="35.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.1" y="1470.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.20%)</title><rect x="185.2" y="1443.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.2" y="1454.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.71%)</title><rect x="188.6" y="1427.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.71%)</title><rect x="188.6" y="1411.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.6" y="1422.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.71%)</title><rect x="188.6" y="1395.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.6" y="1406.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="193.6" y="1379.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="196.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="196.9" y="1427.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="197.8" y="1427.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.8" y="1438.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="199.4" y="1443.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="202.4" y="1454.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="201.1" y="1443.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="204.1" y="1454.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="201.9" y="1507.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="204.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.28%)</title><rect x="202.8" y="1507.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.8" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.28%)</title><rect x="202.8" y="1491.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.8" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="202.8" y="1475.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="202.8" y="1459.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.54%)</title><rect x="206.1" y="1523.0" width="41.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.1" y="1534.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.54%)</title><rect x="206.1" y="1507.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.1" y="1518.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 1.91%)</title><rect x="206.1" y="1491.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.1" y="1502.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="206.1" y="1475.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="206.1" y="1459.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="206.1" y="1443.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="206.9" y="1475.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="206.9" y="1459.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="206.9" y="1443.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="206.9" y="1427.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="206.9" y="1411.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="206.9" y="1395.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="206.9" y="1379.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="206.9" y="1363.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="206.9" y="1347.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.07%)</title><rect x="206.9" y="1331.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="206.9" y="1315.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (25 samples, 1.77%)</title><rect x="207.8" y="1475.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 1.77%)</title><rect x="207.8" y="1459.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (21 samples, 1.49%)</title><rect x="207.8" y="1443.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 1.49%)</title><rect x="207.8" y="1427.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.71%)</title><rect x="208.6" y="1411.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="211.1" y="1395.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="211.1" y="1379.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.07%)</title><rect x="211.1" y="1363.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.07%)</title><rect x="211.1" y="1347.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="211.1" y="1331.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.28%)</title><rect x="212.0" y="1395.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.28%)</title><rect x="212.0" y="1379.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.28%)</title><rect x="212.0" y="1363.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.28%)</title><rect x="212.0" y="1347.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.28%)</title><rect x="212.0" y="1331.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.28%)</title><rect x="212.0" y="1315.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.28%)</title><rect x="212.0" y="1299.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.07%)</title><rect x="215.3" y="1395.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="215.3" y="1379.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="215.3" y="1363.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="216.1" y="1395.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="216.1" y="1379.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="216.1" y="1363.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="216.1" y="1347.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.71%)</title><rect x="217.0" y="1411.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.71%)</title><rect x="217.0" y="1395.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.35%)</title><rect x="217.8" y="1379.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.8" y="1390.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.35%)</title><rect x="217.8" y="1363.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.28%)</title><rect x="222.0" y="1379.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.0" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.28%)</title><rect x="222.0" y="1363.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.0" y="1374.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="223.6" y="1347.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="226.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="225.3" y="1443.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.3" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="225.3" y="1427.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="225.3" y="1411.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="225.3" y="1395.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="225.3" y="1379.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="225.3" y="1363.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="226.1" y="1443.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="226.1" y="1427.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.1" y="1411.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.1" y="1395.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="226.1" y="1379.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="226.1" y="1363.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.14%)</title><rect x="227.0" y="1443.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.07%)</title><rect x="227.8" y="1427.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.78%)</title><rect x="228.6" y="1491.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.6" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.57%)</title><rect x="229.5" y="1475.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.28%)</title><rect x="229.5" y="1459.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.5" y="1470.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="230.3" y="1443.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.3" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="231.1" y="1443.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="231.1" y="1427.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.1" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.07%)</title><rect x="231.1" y="1411.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="232.0" y="1443.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.0" y="1454.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="232.0" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="235.0" y="1438.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="232.0" y="1411.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="235.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.28%)</title><rect x="232.8" y="1459.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.8" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.28%)</title><rect x="232.8" y="1443.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.8" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.28%)</title><rect x="232.8" y="1427.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.8" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.28%)</title><rect x="232.8" y="1411.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.8" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.28%)</title><rect x="232.8" y="1395.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.8" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="232.8" y="1379.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.8" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.21%)</title><rect x="232.8" y="1363.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.8" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (3 samples, 0.21%)</title><rect x="232.8" y="1347.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.8" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (3 samples, 0.21%)</title><rect x="232.8" y="1331.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.8" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.07%)</title><rect x="233.6" y="1315.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="236.6" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="233.6" y="1299.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="236.6" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="233.6" y="1283.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.6" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.07%)</title><rect x="233.6" y="1267.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="236.6" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="233.6" y="1251.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="236.6" y="1262.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="233.6" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="236.6" y="1246.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="233.6" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="236.6" y="1230.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="234.5" y="1315.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="234.5" y="1299.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.07%)</title><rect x="235.3" y="1379.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.3" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.07%)</title><rect x="235.3" y="1363.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="236.2" y="1475.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.2" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="237.0" y="1459.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="237.0" y="1443.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="237.0" y="1427.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="237.0" y="1411.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="237.0" y="1395.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="237.0" y="1379.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="237.0" y="1363.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="237.8" y="1491.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.8" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="238.7" y="1491.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="238.7" y="1475.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.07%)</title><rect x="238.7" y="1459.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="238.7" y="1443.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.7" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.28%)</title><rect x="239.5" y="1491.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.5" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="239.5" y="1475.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.14%)</title><rect x="239.5" y="1459.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (2 samples, 0.14%)</title><rect x="239.5" y="1443.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.5" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/HeartbeatResponse.&lt;init&gt; (1 samples, 0.07%)</title><rect x="239.5" y="1427.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/HeartbeatResponseData.&lt;init&gt; (1 samples, 0.07%)</title><rect x="239.5" y="1411.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/HeartbeatResponseData.fromStruct (1 samples, 0.07%)</title><rect x="239.5" y="1395.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.07%)</title><rect x="240.3" y="1427.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.07%)</title><rect x="240.3" y="1411.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.07%)</title><rect x="240.3" y="1395.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.07%)</title><rect x="240.3" y="1379.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="241.2" y="1459.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="241.2" y="1443.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="241.2" y="1427.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="241.2" y="1411.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="241.2" y="1395.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="241.2" y="1379.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="241.2" y="1363.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="241.2" y="1347.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.2" y="1358.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="241.2" y="1331.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="244.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="242.0" y="1475.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="242.0" y="1459.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="242.0" y="1443.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="242.0" y="1427.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="242.0" y="1411.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="242.0" y="1395.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="242.0" y="1379.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="242.0" y="1363.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="242.0" y="1347.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="242.0" y="1331.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="242.0" y="1315.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.07%)</title><rect x="242.0" y="1299.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="242.0" y="1283.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.07%)</title><rect x="242.0" y="1267.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.35%)</title><rect x="242.8" y="1491.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.8" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.35%)</title><rect x="242.8" y="1475.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.8" y="1486.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="243.7" y="1459.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.07%)</title><rect x="244.5" y="1459.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.14%)</title><rect x="245.3" y="1459.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.07%)</title><rect x="245.3" y="1443.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.3" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="245.3" y="1427.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="246.2" y="1443.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="247.0" y="1491.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.0" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="247.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="250.0" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="247.0" y="1459.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="250.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/Thread.run (846 samples, 59.83%)</title><rect x="247.8" y="1555.0" width="706.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.8" y="1566.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (846 samples, 59.83%)</title><rect x="247.8" y="1539.0" width="706.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.8" y="1550.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (846 samples, 59.83%)</title><rect x="247.8" y="1523.0" width="706.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.8" y="1534.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1750217929.run (618 samples, 43.71%)</title><rect x="251.2" y="1507.0" width="515.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.2" y="1518.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/175021..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (614 samples, 43.42%)</title><rect x="254.5" y="1491.0" width="512.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.5" y="1502.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (614 samples, 43.42%)</title><rect x="254.5" y="1475.0" width="512.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.5" y="1486.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (604 samples, 42.72%)</title><rect x="254.5" y="1459.0" width="504.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.5" y="1470.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="260.4" y="1443.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.4" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="262.0" y="1443.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="262.0" y="1427.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/3431025.get (1 samples, 0.07%)</title><rect x="262.0" y="1411.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="262.0" y="1395.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.0" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="262.0" y="1379.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="265.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (174 samples, 12.31%)</title><rect x="262.9" y="1443.0" width="145.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="1454.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (174 samples, 12.31%)</title><rect x="262.9" y="1427.0" width="145.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.9" y="1438.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (174 samples, 12.31%)</title><rect x="262.9" y="1411.0" width="145.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.9" y="1422.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (174 samples, 12.31%)</title><rect x="262.9" y="1395.0" width="145.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.9" y="1406.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (174 samples, 12.31%)</title><rect x="262.9" y="1379.0" width="145.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.9" y="1390.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (174 samples, 12.31%)</title><rect x="262.9" y="1363.0" width="145.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.9" y="1374.0">com/fasterxml/jack..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="272.9" y="1347.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="275.9" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="272.9" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="275.9" y="1342.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.78%)</title><rect x="273.7" y="1347.0" width="9.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="276.7" y="1358.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.71%)</title><rect x="274.5" y="1331.0" width="8.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="277.5" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 2.97%)</title><rect x="282.9" y="1347.0" width="35.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.9" y="1358.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.07%)</title><rect x="282.9" y="1331.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.07%)</title><rect x="282.9" y="1315.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="282.9" y="1299.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.9" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="282.9" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="285.9" y="1294.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="282.9" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="285.9" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="282.9" y="1251.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="285.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="282.9" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.9" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="282.9" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="285.9" y="1230.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="282.9" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="285.9" y="1214.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="282.9" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="285.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (41 samples, 2.90%)</title><rect x="283.7" y="1331.0" width="34.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.7" y="1342.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="283.7" y="1315.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="286.7" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="283.7" y="1299.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="286.7" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="283.7" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="286.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (40 samples, 2.83%)</title><rect x="284.6" y="1315.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="1326.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="284.6" y="1299.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="287.6" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="284.6" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.6" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="284.6" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="287.6" y="1278.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="284.6" y="1251.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="287.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (36 samples, 2.55%)</title><rect x="285.4" y="1299.0" width="30.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.4" y="1310.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (36 samples, 2.55%)</title><rect x="285.4" y="1283.0" width="30.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.4" y="1294.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.21%)</title><rect x="315.4" y="1299.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.4" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="315.4" y="1283.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="318.4" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="315.4" y="1267.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.4" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="315.4" y="1251.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="318.4" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="316.3" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="319.3" y="1246.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="316.3" y="1219.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="319.3" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="316.3" y="1203.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="319.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="317.1" y="1283.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.1" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="317.1" y="1267.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.1" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="317.1" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="320.1" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="317.1" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="320.1" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="317.1" y="1219.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="320.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="317.1" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="320.1" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="317.1" y="1187.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="320.1" y="1198.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="317.1" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (98 samples, 6.93%)</title><rect x="317.9" y="1347.0" width="81.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.9" y="1358.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.28%)</title><rect x="318.8" y="1331.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.8" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="322.1" y="1331.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.1" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.07%)</title><rect x="322.9" y="1331.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.9" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.21%)</title><rect x="323.8" y="1331.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.21%)</title><rect x="323.8" y="1315.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.8" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.42%)</title><rect x="326.3" y="1331.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.3" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.42%)</title><rect x="326.3" y="1315.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.3" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.42%)</title><rect x="326.3" y="1299.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.3" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.42%)</title><rect x="326.3" y="1283.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.3" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="328.8" y="1267.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.28%)</title><rect x="331.3" y="1331.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.3" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.21%)</title><rect x="332.1" y="1315.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.1" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (75 samples, 5.30%)</title><rect x="334.6" y="1331.0" width="62.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.6" y="1342.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.27%)</title><rect x="334.6" y="1315.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.6" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.14%)</title><rect x="338.8" y="1299.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.14%)</title><rect x="338.8" y="1283.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.14%)</title><rect x="338.8" y="1267.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.50%)</title><rect x="340.5" y="1299.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.5" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="346.3" y="1299.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.3" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="346.3" y="1283.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.3" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="348.8" y="1299.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.14%)</title><rect x="349.6" y="1315.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.6" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 3.89%)</title><rect x="351.3" y="1315.0" width="45.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.3" y="1326.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (55 samples, 3.89%)</title><rect x="351.3" y="1299.0" width="45.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.3" y="1310.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 3.68%)</title><rect x="353.8" y="1283.0" width="43.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.8" y="1294.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.78%)</title><rect x="359.7" y="1267.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.42%)</title><rect x="361.3" y="1251.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.42%)</title><rect x="361.3" y="1235.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.42%)</title><rect x="361.3" y="1219.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="364.7" y="1203.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="366.3" y="1251.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="366.3" y="1235.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="367.2" y="1251.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="368.0" y="1251.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.57%)</title><rect x="368.8" y="1267.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.42%)</title><rect x="370.5" y="1251.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.5" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.42%)</title><rect x="370.5" y="1235.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.42%)</title><rect x="370.5" y="1219.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.42%)</title><rect x="370.5" y="1203.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="375.5" y="1267.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.5" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (19 samples, 1.34%)</title><rect x="376.4" y="1267.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.4" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (19 samples, 1.34%)</title><rect x="376.4" y="1251.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (19 samples, 1.34%)</title><rect x="376.4" y="1235.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (19 samples, 1.34%)</title><rect x="376.4" y="1219.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (19 samples, 1.34%)</title><rect x="376.4" y="1203.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.4" y="1214.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (19 samples, 1.34%)</title><rect x="376.4" y="1187.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.4" y="1198.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (19 samples, 1.34%)</title><rect x="376.4" y="1171.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.42%)</title><rect x="392.2" y="1267.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.42%)</title><rect x="392.2" y="1251.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.42%)</title><rect x="392.2" y="1235.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="396.4" y="1219.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.14%)</title><rect x="397.2" y="1331.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="400.2" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.07%)</title><rect x="398.9" y="1331.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.9" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.71%)</title><rect x="399.7" y="1347.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.7" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.64%)</title><rect x="400.6" y="1331.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.6" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.64%)</title><rect x="400.6" y="1315.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.6" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.64%)</title><rect x="400.6" y="1299.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.64%)</title><rect x="400.6" y="1283.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (405 samples, 28.64%)</title><rect x="408.1" y="1443.0" width="337.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.1" y="1454.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (66 samples, 4.67%)</title><rect x="408.9" y="1427.0" width="55.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.9" y="1438.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.14%)</title><rect x="408.9" y="1411.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.9" y="1422.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (64 samples, 4.53%)</title><rect x="410.6" y="1411.0" width="53.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.6" y="1422.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (58 samples, 4.10%)</title><rect x="415.6" y="1395.0" width="48.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.6" y="1406.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.71%)</title><rect x="417.2" y="1379.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.71%)</title><rect x="417.2" y="1363.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.71%)</title><rect x="417.2" y="1347.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.2" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.71%)</title><rect x="417.2" y="1331.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.28%)</title><rect x="425.6" y="1379.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.28%)</title><rect x="425.6" y="1363.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.28%)</title><rect x="425.6" y="1347.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.28%)</title><rect x="425.6" y="1331.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.21%)</title><rect x="426.4" y="1315.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.4" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (42 samples, 2.97%)</title><rect x="428.9" y="1379.0" width="35.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.9" y="1390.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.06%)</title><rect x="451.5" y="1363.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.5" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.06%)</title><rect x="451.5" y="1347.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.5" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="460.6" y="1331.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.50%)</title><rect x="464.0" y="1427.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.50%)</title><rect x="464.0" y="1411.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.0" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.50%)</title><rect x="464.0" y="1395.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (200 samples, 14.14%)</title><rect x="469.8" y="1427.0" width="166.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.8" y="1438.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="469.8" y="1411.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="472.8" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="469.8" y="1395.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="472.8" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="469.8" y="1379.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="472.8" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="469.8" y="1363.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="472.8" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="469.8" y="1347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="472.8" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="469.8" y="1331.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="472.8" y="1342.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="469.8" y="1315.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="472.8" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="469.8" y="1299.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="472.8" y="1310.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="469.8" y="1283.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="472.8" y="1294.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="469.8" y="1267.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (199 samples, 14.07%)</title><rect x="470.7" y="1411.0" width="166.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.7" y="1422.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="483.2" y="1395.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="486.2" y="1406.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="483.2" y="1379.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="486.2" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (75 samples, 5.30%)</title><rect x="487.3" y="1395.0" width="62.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.3" y="1406.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (73 samples, 5.16%)</title><rect x="488.2" y="1379.0" width="60.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.2" y="1390.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (51 samples, 3.61%)</title><rect x="495.7" y="1363.0" width="42.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.7" y="1374.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (31 samples, 2.19%)</title><rect x="504.9" y="1347.0" width="25.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.9" y="1358.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (31 samples, 2.19%)</title><rect x="504.9" y="1331.0" width="25.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.9" y="1342.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (31 samples, 2.19%)</title><rect x="504.9" y="1315.0" width="25.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.9" y="1326.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.85%)</title><rect x="514.0" y="1299.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="517.0" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.42%)</title><rect x="514.0" y="1283.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="517.0" y="1294.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="514.0" y="1267.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.0" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="514.9" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="517.9" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="514.9" y="1251.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="517.9" y="1262.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.28%)</title><rect x="515.7" y="1267.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="518.7" y="1278.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.28%)</title><rect x="515.7" y="1251.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="518.7" y="1262.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.07%)</title><rect x="515.7" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="518.7" y="1246.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.14%)</title><rect x="516.5" y="1235.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.5" y="1246.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="517.4" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="520.4" y="1230.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="518.2" y="1235.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="521.2" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.42%)</title><rect x="519.1" y="1283.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="522.1" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.35%)</title><rect x="519.9" y="1267.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="522.9" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.14%)</title><rect x="519.9" y="1251.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.14%)</title><rect x="519.9" y="1235.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="522.9" y="1246.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="519.9" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="522.9" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="519.9" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="522.9" y="1214.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="519.9" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="522.9" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="519.9" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.9" y="1182.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="520.7" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="523.7" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.14%)</title><rect x="521.6" y="1251.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.6" y="1262.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="523.2" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="526.2" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="523.2" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="526.2" y="1246.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="523.2" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="526.2" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="524.1" y="1299.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.1" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.50%)</title><rect x="524.9" y="1299.0" width="5.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="527.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.42%)</title><rect x="530.7" y="1347.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.7" y="1358.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="535.7" y="1347.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="538.7" y="1358.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="536.6" y="1347.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="539.6" y="1358.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="538.2" y="1363.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="541.2" y="1374.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.85%)</title><rect x="539.1" y="1363.0" width="10.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="542.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="549.1" y="1379.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.1" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="549.1" y="1363.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.1" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="549.1" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="552.1" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="549.1" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="552.1" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="549.1" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="552.1" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="549.1" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="552.1" y="1310.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="549.1" y="1283.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.1" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="549.1" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="552.1" y="1278.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="549.1" y="1251.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="552.1" y="1262.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="549.1" y="1235.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="552.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="549.9" y="1395.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="552.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.64%)</title><rect x="550.8" y="1395.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="550.8" y="1379.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.8" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="550.8" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.8" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="550.8" y="1347.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="553.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.57%)</title><rect x="551.6" y="1379.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.6" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="551.6" y="1363.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="554.6" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="551.6" y="1347.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="554.6" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="552.4" y="1331.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.4" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="552.4" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="555.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.42%)</title><rect x="553.3" y="1363.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="556.6" y="1347.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="559.6" y="1358.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="557.4" y="1347.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.4" y="1358.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (93 samples, 6.58%)</title><rect x="558.3" y="1395.0" width="77.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.3" y="1406.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (92 samples, 6.51%)</title><rect x="559.1" y="1379.0" width="76.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.1" y="1390.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 0.85%)</title><rect x="559.1" y="1363.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="562.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 0.85%)</title><rect x="559.1" y="1347.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.85%)</title><rect x="559.1" y="1331.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.85%)</title><rect x="559.1" y="1315.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.1" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (80 samples, 5.66%)</title><rect x="569.1" y="1363.0" width="66.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="572.1" y="1374.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (72 samples, 5.09%)</title><rect x="575.8" y="1347.0" width="60.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.8" y="1358.0">java/u..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="599.2" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.2" y="1342.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.07%)</title><rect x="599.2" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.2" y="1326.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="599.2" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.2" y="1310.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="599.2" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="602.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 3.04%)</title><rect x="600.0" y="1331.0" width="35.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.0" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.42%)</title><rect x="618.4" y="1315.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.78%)</title><rect x="623.4" y="1315.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.4" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="630.9" y="1299.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.9" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (2 samples, 0.14%)</title><rect x="630.9" y="1283.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.9" y="1294.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.28%)</title><rect x="632.5" y="1315.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="635.5" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="635.9" y="1395.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="638.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (100 samples, 7.07%)</title><rect x="636.7" y="1427.0" width="83.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.7" y="1438.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (99 samples, 7.00%)</title><rect x="637.6" y="1411.0" width="82.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.6" y="1422.0">com/linec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="639.2" y="1395.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="642.2" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="639.2" y="1379.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="642.2" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="639.2" y="1363.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="642.2" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="639.2" y="1347.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="642.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1862578241.process (67 samples, 4.74%)</title><rect x="640.1" y="1395.0" width="55.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.1" y="1406.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (66 samples, 4.67%)</title><rect x="640.9" y="1379.0" width="55.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.9" y="1390.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.41%)</title><rect x="641.7" y="1363.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.7" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="645.1" y="1347.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.1" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="645.1" y="1331.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.1" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="645.1" y="1315.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.1" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="645.1" y="1299.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="645.1" y="1283.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.35%)</title><rect x="645.9" y="1347.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.9" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.21%)</title><rect x="647.6" y="1331.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="650.6" y="1342.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="647.6" y="1315.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="650.6" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="650.1" y="1347.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.64%)</title><rect x="650.9" y="1347.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (45 samples, 3.18%)</title><rect x="658.4" y="1363.0" width="37.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.4" y="1374.0">com..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.28%)</title><rect x="692.6" y="1347.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.28%)</title><rect x="692.6" y="1331.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.28%)</title><rect x="692.6" y="1315.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.6" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (5 samples, 0.35%)</title><rect x="696.0" y="1395.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.35%)</title><rect x="700.1" y="1395.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.1" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.35%)</title><rect x="700.1" y="1379.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.07%)</title><rect x="704.3" y="1395.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="704.3" y="1379.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/1530973144.get$Lambda (1 samples, 0.07%)</title><rect x="704.3" y="1363.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.3" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="705.1" y="1395.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="708.1" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="705.1" y="1379.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="708.1" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.71%)</title><rect x="706.0" y="1395.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.0" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.64%)</title><rect x="706.8" y="1379.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.8" y="1390.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.50%)</title><rect x="706.8" y="1363.0" width="5.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="709.8" y="1374.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.14%)</title><rect x="712.7" y="1363.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.7" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="714.3" y="1395.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.3" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="714.3" y="1379.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.3" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.42%)</title><rect x="715.2" y="1395.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.2" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="716.0" y="1379.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.0" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="716.0" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.0" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="716.0" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="719.0" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="716.0" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.0" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="716.0" y="1315.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="719.0" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="716.0" y="1299.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="719.0" y="1310.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="716.0" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="719.0" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="716.0" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.0" y="1278.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="716.0" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.0" y="1262.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="716.0" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.28%)</title><rect x="716.8" y="1379.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="720.2" y="1427.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.2" y="1438.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="720.2" y="1411.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.2" y="1422.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="720.2" y="1395.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.2" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="720.2" y="1379.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="723.2" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="720.2" y="1363.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="723.2" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="720.2" y="1347.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="723.2" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="720.2" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="723.2" y="1342.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="720.2" y="1315.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="723.2" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="720.2" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="721.0" y="1427.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.0" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="721.0" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.0" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="721.0" y="1395.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="724.0" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="721.0" y="1379.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="724.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.05%)</title><rect x="721.8" y="1427.0" width="24.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.8" y="1438.0">j..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.71%)</title><rect x="730.2" y="1411.0" width="8.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="733.2" y="1422.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.71%)</title><rect x="730.2" y="1395.0" width="8.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="733.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.57%)</title><rect x="738.5" y="1411.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.57%)</title><rect x="738.5" y="1395.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/1680829148.accept (8 samples, 0.57%)</title><rect x="738.5" y="1379.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.5" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (8 samples, 0.57%)</title><rect x="738.5" y="1363.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.5" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2031879199.complete (8 samples, 0.57%)</title><rect x="738.5" y="1347.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.5" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (8 samples, 0.57%)</title><rect x="738.5" y="1331.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/751978746.complete (8 samples, 0.57%)</title><rect x="738.5" y="1315.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 0.57%)</title><rect x="738.5" y="1299.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.57%)</title><rect x="738.5" y="1283.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.5" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.57%)</title><rect x="738.5" y="1267.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.5" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.57%)</title><rect x="738.5" y="1251.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.5" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="741.9" y="1235.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="744.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="741.9" y="1219.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="744.9" y="1230.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="745.2" y="1411.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.78%)</title><rect x="746.0" y="1443.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.0" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.71%)</title><rect x="746.9" y="1427.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.71%)</title><rect x="746.9" y="1411.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.9" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/1680829148.accept (10 samples, 0.71%)</title><rect x="746.9" y="1395.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (10 samples, 0.71%)</title><rect x="746.9" y="1379.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.9" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2031879199.complete (10 samples, 0.71%)</title><rect x="746.9" y="1363.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (10 samples, 0.71%)</title><rect x="746.9" y="1347.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="749.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/751978746.complete (9 samples, 0.64%)</title><rect x="746.9" y="1331.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (9 samples, 0.64%)</title><rect x="746.9" y="1315.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="749.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.64%)</title><rect x="746.9" y="1299.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="749.9" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.64%)</title><rect x="746.9" y="1283.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.9" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.64%)</title><rect x="746.9" y="1267.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/535134601.complete (1 samples, 0.07%)</title><rect x="754.4" y="1331.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (1 samples, 0.07%)</title><rect x="754.4" y="1315.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.4" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="754.4" y="1299.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.4" y="1310.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 0.14%)</title><rect x="755.2" y="1443.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.2" y="1454.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 0.14%)</title><rect x="755.2" y="1427.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="755.2" y="1411.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="755.2" y="1395.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="755.2" y="1379.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.14%)</title><rect x="755.2" y="1363.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.2" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="756.9" y="1443.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="759.9" y="1454.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="756.9" y="1427.0" width="1.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="759.9" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="758.6" y="1459.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.6" y="1470.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="758.6" y="1443.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.6" y="1454.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="758.6" y="1427.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.6" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="758.6" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.6" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="758.6" y="1395.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="761.6" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="758.6" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="761.6" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (9 samples, 0.64%)</title><rect x="759.4" y="1459.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="762.4" y="1470.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="765.2" y="1443.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="768.2" y="1454.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="765.2" y="1427.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="768.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.35%)</title><rect x="766.9" y="1507.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.9" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.35%)</title><rect x="766.9" y="1491.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.9" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.35%)</title><rect x="766.9" y="1475.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.35%)</title><rect x="766.9" y="1459.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="770.2" y="1443.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="773.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 15.49%)</title><rect x="771.1" y="1507.0" width="182.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.1" y="1518.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (219 samples, 15.49%)</title><rect x="771.1" y="1491.0" width="182.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.1" y="1502.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 12.80%)</title><rect x="786.9" y="1475.0" width="151.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.9" y="1486.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (175 samples, 12.38%)</title><rect x="791.9" y="1459.0" width="146.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="794.9" y="1470.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 11.39%)</title><rect x="803.6" y="1443.0" width="134.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.6" y="1454.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="808.6" y="1427.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="811.6" y="1438.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.14%)</title><rect x="810.3" y="1427.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.3" y="1438.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="812.0" y="1427.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.0" y="1438.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 10.04%)</title><rect x="812.8" y="1427.0" width="118.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="815.8" y="1438.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="817.0" y="1411.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="820.0" y="1422.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="817.8" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="820.8" y="1422.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.20%)</title><rect x="818.6" y="1411.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="821.6" y="1422.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.28%)</title><rect x="823.6" y="1395.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.6" y="1406.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="825.3" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="828.3" y="1390.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="826.2" y="1379.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="829.2" y="1390.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="827.0" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.0" y="1406.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.42%)</title><rect x="827.8" y="1395.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="830.8" y="1406.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="832.8" y="1411.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="835.8" y="1422.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.14%)</title><rect x="834.5" y="1411.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="837.5" y="1422.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.14%)</title><rect x="836.2" y="1411.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="839.2" y="1422.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 2.69%)</title><rect x="837.8" y="1411.0" width="31.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="840.8" y="1422.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 3.68%)</title><rect x="869.5" y="1411.0" width="43.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="872.5" y="1422.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.57%)</title><rect x="912.9" y="1411.0" width="6.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="915.9" y="1422.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="919.6" y="1411.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="922.6" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.21%)</title><rect x="920.5" y="1411.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="923.5" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="923.0" y="1411.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="926.0" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="923.8" y="1411.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="926.8" y="1422.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="926.3" y="1411.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.3" y="1422.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.21%)</title><rect x="928.0" y="1411.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.0" y="1422.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="930.5" y="1411.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="933.5" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.28%)</title><rect x="931.3" y="1427.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="934.3" y="1438.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="934.6" y="1427.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.6" y="1438.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="935.5" y="1427.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="938.0" y="1475.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="941.0" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="938.0" y="1459.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="941.0" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="938.0" y="1443.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.0" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="938.0" y="1427.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.0" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="938.0" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.27%)</title><rect x="938.8" y="1475.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="941.8" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.27%)</title><rect x="938.8" y="1459.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.8" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.27%)</title><rect x="938.8" y="1443.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="941.8" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.27%)</title><rect x="938.8" y="1427.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.8" y="1438.0"></text>
</g>
<g>
<title>start_thread (283 samples, 20.01%)</title><rect x="953.8" y="1555.0" width="236.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="956.8" y="1566.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (283 samples, 20.01%)</title><rect x="953.8" y="1539.0" width="236.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="956.8" y="1550.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.63%)</title><rect x="953.8" y="1523.0" width="19.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.8" y="1534.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.21%)</title><rect x="953.8" y="1507.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.8" y="1518.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.21%)</title><rect x="953.8" y="1491.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.8" y="1502.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="953.8" y="1475.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.8" y="1486.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="954.7" y="1475.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="957.7" y="1486.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.34%)</title><rect x="956.3" y="1507.0" width="15.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.3" y="1518.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="956.3" y="1491.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.3" y="1502.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="956.3" y="1475.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="959.3" y="1486.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (10 samples, 0.71%)</title><rect x="958.0" y="1491.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.0" y="1502.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="958.0" y="1475.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.0" y="1486.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="958.0" y="1459.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.0" y="1470.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="958.0" y="1443.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.0" y="1454.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="958.0" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.0" y="1438.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="958.8" y="1459.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.8" y="1470.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="959.7" y="1443.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.7" y="1454.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="959.7" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.7" y="1438.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="959.7" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.7" y="1422.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.50%)</title><rect x="960.5" y="1475.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.5" y="1486.0"></text>
</g>
<g>
<title>FlatProfiler::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="960.5" y="1459.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.5" y="1470.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.35%)</title><rect x="961.3" y="1459.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.3" y="1470.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="965.5" y="1459.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.5" y="1470.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="965.5" y="1443.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.5" y="1454.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.50%)</title><rect x="966.4" y="1491.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.4" y="1502.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.50%)</title><rect x="966.4" y="1475.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.4" y="1486.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.50%)</title><rect x="966.4" y="1459.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.4" y="1470.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.50%)</title><rect x="966.4" y="1443.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.4" y="1454.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.50%)</title><rect x="966.4" y="1427.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.4" y="1438.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.35%)</title><rect x="968.0" y="1411.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.0" y="1422.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.14%)</title><rect x="969.7" y="1395.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.7" y="1406.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.14%)</title><rect x="969.7" y="1379.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.7" y="1390.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.07%)</title><rect x="971.4" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.4" y="1406.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="972.2" y="1507.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.2" y="1518.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="972.2" y="1491.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.2" y="1502.0"></text>
</g>
<g>
<title>JavaThread::run() (258 samples, 18.25%)</title><rect x="973.0" y="1523.0" width="215.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.0" y="1534.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (258 samples, 18.25%)</title><rect x="973.0" y="1507.0" width="215.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.0" y="1518.0">JavaThread::thread_main_inne..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (257 samples, 18.18%)</title><rect x="973.0" y="1491.0" width="214.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.0" y="1502.0">CompileBroker::compiler_thre..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (256 samples, 18.10%)</title><rect x="973.0" y="1475.0" width="213.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.0" y="1486.0">CompileBroker::invoke_compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (256 samples, 18.10%)</title><rect x="973.0" y="1459.0" width="213.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.0" y="1470.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (256 samples, 18.10%)</title><rect x="973.0" y="1443.0" width="213.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.0" y="1454.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (139 samples, 9.83%)</title><rect x="973.0" y="1427.0" width="116.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.0" y="1438.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.50%)</title><rect x="973.0" y="1411.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.0" y="1422.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.28%)</title><rect x="973.0" y="1395.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.0" y="1406.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="976.4" y="1395.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1406.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.14%)</title><rect x="976.4" y="1379.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="1390.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="977.2" y="1363.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.2" y="1374.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="977.2" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="1358.0"></text>
</g>
<g>
<title>PhaseRegAlloc::offset2reg(int) const (1 samples, 0.07%)</title><rect x="978.0" y="1395.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.0" y="1406.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.50%)</title><rect x="978.9" y="1411.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.9" y="1422.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.28%)</title><rect x="978.9" y="1395.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.9" y="1406.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="978.9" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.9" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="978.9" y="1363.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.9" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="979.7" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.7" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="979.7" y="1363.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.7" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.14%)</title><rect x="980.5" y="1379.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.5" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="980.5" y="1363.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.5" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_non_safepoint(int) (1 samples, 0.07%)</title><rect x="982.2" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.2" y="1406.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="983.0" y="1395.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.0" y="1406.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="983.9" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.9" y="1390.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.78%)</title><rect x="984.7" y="1411.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.7" y="1422.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.14%)</title><rect x="984.7" y="1395.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.7" y="1406.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.64%)</title><rect x="986.4" y="1395.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.4" y="1406.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.42%)</title><rect x="987.2" y="1379.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.2" y="1390.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.07%)</title><rect x="992.2" y="1379.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.2" y="1390.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="993.1" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.1" y="1390.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="993.9" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.9" y="1422.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="993.9" y="1395.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.9" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="994.7" y="1411.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.7" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="994.7" y="1395.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.7" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.42%)</title><rect x="995.6" y="1411.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.6" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.42%)</title><rect x="995.6" y="1395.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.6" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.28%)</title><rect x="995.6" y="1379.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.6" y="1390.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.14%)</title><rect x="996.4" y="1363.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.4" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="998.1" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.1" y="1374.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.07%)</title><rect x="998.1" y="1347.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.1" y="1358.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="998.1" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.1" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="998.9" y="1379.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.9" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (106 samples, 7.50%)</title><rect x="1000.6" y="1411.0" width="88.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.6" y="1422.0">PhaseChait..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1000.6" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.6" y="1406.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="1001.4" y="1395.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.4" y="1406.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.07%)</title><rect x="1002.2" y="1395.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.2" y="1406.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1003.1" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1006.1" y="1406.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.21%)</title><rect x="1003.9" y="1395.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.9" y="1406.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1006.4" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.4" y="1406.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="1007.2" y="1395.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.2" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.28%)</title><rect x="1009.7" y="1395.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.7" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1009.7" y="1379.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.7" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1010.6" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.6" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.14%)</title><rect x="1011.4" y="1379.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.4" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1011.4" y="1363.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.4" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.35%)</title><rect x="1013.1" y="1395.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.1" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1013.9" y="1379.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.9" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.21%)</title><rect x="1014.8" y="1379.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.8" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1016.4" y="1363.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.4" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.92%)</title><rect x="1017.3" y="1395.0" width="10.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1020.3" y="1406.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1025.6" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.6" y="1390.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="1025.6" y="1363.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.6" y="1374.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.07%)</title><rect x="1026.4" y="1379.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.4" y="1390.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="1027.3" y="1379.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.3" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 1.27%)</title><rect x="1028.1" y="1395.0" width="15.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.1" y="1406.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1038.1" y="1379.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.1" y="1390.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.07%)</title><rect x="1038.1" y="1363.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.1" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.28%)</title><rect x="1039.0" y="1379.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.0" y="1390.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1042.3" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.3" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="1043.1" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.1" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.42%)</title><rect x="1044.0" y="1395.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.0" y="1406.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="1047.3" y="1379.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.64%)</title><rect x="1049.0" y="1395.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.0" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.14%)</title><rect x="1054.0" y="1379.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.0" y="1390.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="1055.6" y="1379.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1058.6" y="1390.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (21 samples, 1.49%)</title><rect x="1056.5" y="1395.0" width="17.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.5" y="1406.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (21 samples, 1.49%)</title><rect x="1056.5" y="1379.0" width="17.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.5" y="1390.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="1056.5" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.5" y="1374.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (20 samples, 1.41%)</title><rect x="1057.3" y="1363.0" width="16.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.3" y="1374.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.14%)</title><rect x="1057.3" y="1347.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.3" y="1358.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (16 samples, 1.13%)</title><rect x="1059.0" y="1347.0" width="13.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.0" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1071.5" y="1331.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="1072.3" y="1347.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.28%)</title><rect x="1074.0" y="1395.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.0" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1075.7" y="1379.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.7" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="1077.3" y="1395.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.3" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1077.3" y="1379.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.3" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1078.2" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.2" y="1406.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1078.2" y="1379.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.2" y="1390.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.78%)</title><rect x="1079.0" y="1395.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.0" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1083.2" y="1379.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.2" y="1390.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.35%)</title><rect x="1084.0" y="1379.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.0" y="1390.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1085.7" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.7" y="1374.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1086.5" y="1363.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.5" y="1374.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1088.2" y="1395.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.2" y="1406.0"></text>
</g>
<g>
<title>Compile::Optimize() (100 samples, 7.07%)</title><rect x="1089.0" y="1427.0" width="83.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.0" y="1438.0">Compile::..</text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1089.0" y="1411.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.0" y="1422.0"></text>
</g>
<g>
<title>CatchProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1089.9" y="1411.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.9" y="1422.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1090.7" y="1411.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.7" y="1422.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1090.7" y="1395.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.7" y="1406.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1091.5" y="1411.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.5" y="1422.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1091.5" y="1395.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1091.5" y="1379.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.42%)</title><rect x="1092.4" y="1411.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.42%)</title><rect x="1092.4" y="1395.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (2 samples, 0.14%)</title><rect x="1092.4" y="1379.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (2 samples, 0.14%)</title><rect x="1092.4" y="1363.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.4" y="1374.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (2 samples, 0.14%)</title><rect x="1092.4" y="1347.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.4" y="1358.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.14%)</title><rect x="1092.4" y="1331.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.4" y="1342.0"></text>
</g>
<g>
<title>ciMethod::method_data() (2 samples, 0.14%)</title><rect x="1092.4" y="1315.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.4" y="1326.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (2 samples, 0.14%)</title><rect x="1092.4" y="1299.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.4" y="1310.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_from(ProfileData const*) (1 samples, 0.07%)</title><rect x="1092.4" y="1283.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.4" y="1294.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1092.4" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.4" y="1278.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1092.4" y="1251.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.4" y="1262.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.07%)</title><rect x="1093.2" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.2" y="1294.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1093.2" y="1267.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.2" y="1278.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1093.2" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.2" y="1262.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.07%)</title><rect x="1093.2" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.2" y="1246.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.07%)</title><rect x="1093.2" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.2" y="1230.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="1093.2" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.28%)</title><rect x="1094.0" y="1379.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1094.0" y="1363.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1347.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1315.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1283.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1267.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1251.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1235.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1203.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1187.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1043.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="947.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="915.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="787.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="771.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="659.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="611.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.0" y="515.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="526.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1094.0" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1094.9" y="1347.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1094.9" y="1331.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1315.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.9" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="931.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="883.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="851.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="835.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="803.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="771.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="723.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="691.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="675.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="659.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="627.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="595.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="579.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="563.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="547.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="531.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="499.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="483.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="467.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="451.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="419.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="403.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="371.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="355.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="339.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="323.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="307.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.9" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.9" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="259.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="243.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.9" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="227.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.9" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="211.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.9" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="195.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="179.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="163.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="147.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.9" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="131.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.9" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="115.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.9" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="99.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.9" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="83.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.9" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="67.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.9" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1094.9" y="51.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.9" y="62.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1094.9" y="35.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1267.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1251.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="979.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1095.7" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.7" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1095.7" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.7" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1096.5" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.5" y="1374.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.21%)</title><rect x="1097.4" y="1411.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.4" y="1422.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1098.2" y="1395.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.2" y="1406.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.07%)</title><rect x="1098.2" y="1379.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.2" y="1390.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1098.2" y="1363.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.2" y="1374.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1098.2" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.2" y="1358.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1099.0" y="1395.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (69 samples, 4.88%)</title><rect x="1099.9" y="1411.0" width="57.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="1422.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1099.9" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.9" y="1406.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1099.9" y="1379.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.9" y="1390.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1099.9" y="1363.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.9" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1099.9" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.9" y="1358.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1099.9" y="1331.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1102.9" y="1342.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1100.7" y="1395.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.7" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.50%)</title><rect x="1101.5" y="1395.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.42%)</title><rect x="1107.4" y="1395.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.4" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="1110.7" y="1379.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1111.6" y="1363.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (45 samples, 3.18%)</title><rect x="1112.4" y="1395.0" width="37.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="1406.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (41 samples, 2.90%)</title><rect x="1115.7" y="1379.0" width="34.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.7" y="1390.0">Ph..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="1116.6" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.42%)</title><rect x="1117.4" y="1363.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 2.33%)</title><rect x="1122.4" y="1363.0" width="27.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.4" y="1374.0">P..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1144.1" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="1358.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1144.1" y="1331.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="1342.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1144.9" y="1347.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.9" y="1331.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.35%)</title><rect x="1145.8" y="1347.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1149.9" y="1395.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.9" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1150.8" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="1151.6" y="1395.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.6" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.21%)</title><rect x="1152.4" y="1379.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (2 samples, 0.14%)</title><rect x="1152.4" y="1363.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1153.3" y="1347.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1154.1" y="1363.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="1374.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1154.1" y="1347.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.1" y="1358.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1154.1" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.1" y="1342.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="1155.0" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1155.8" y="1395.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.8" y="1406.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1156.6" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.6" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1157.5" y="1411.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.5" y="1422.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1157.5" y="1395.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.13%)</title><rect x="1158.3" y="1411.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.3" y="1422.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 1.06%)</title><rect x="1158.3" y="1395.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.3" y="1406.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1158.3" y="1379.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.3" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1158.3" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1158.3" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.3" y="1358.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1158.3" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="1342.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1159.1" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.1" y="1390.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1159.1" y="1363.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.1" y="1374.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1159.1" y="1347.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.1" y="1358.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1159.1" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.1" y="1342.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1160.0" y="1379.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.0" y="1390.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1160.8" y="1379.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.8" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.21%)</title><rect x="1162.5" y="1379.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.5" y="1390.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1163.3" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="1374.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1163.3" y="1347.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="1358.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1164.1" y="1363.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="1374.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1165.0" y="1379.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="1390.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1166.6" y="1363.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="1374.0"></text>
</g>
<g>
<title>PhiNode::simple_data_loop_check(Node*) const (1 samples, 0.07%)</title><rect x="1167.5" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="1358.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1168.3" y="1379.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1168.3" y="1363.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1347.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1331.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.3" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1315.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1299.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1267.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.1" y="1283.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="1294.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.1" y="1267.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1278.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1170.0" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.0" y="1390.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1170.0" y="1363.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="1374.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1170.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="1358.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.07%)</title><rect x="1170.8" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="1406.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1171.6" y="1411.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1174.6" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.06%)</title><rect x="1172.5" y="1427.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.06%)</title><rect x="1172.5" y="1411.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.06%)</title><rect x="1172.5" y="1395.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.06%)</title><rect x="1172.5" y="1379.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.06%)</title><rect x="1172.5" y="1363.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 1.06%)</title><rect x="1172.5" y="1347.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.85%)</title><rect x="1172.5" y="1331.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.85%)</title><rect x="1172.5" y="1315.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.85%)</title><rect x="1172.5" y="1299.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.85%)</title><rect x="1172.5" y="1283.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.85%)</title><rect x="1172.5" y="1267.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.85%)</title><rect x="1172.5" y="1251.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="1262.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.5" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1246.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.5" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.5" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.5" y="1187.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.5" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.5" y="1155.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.5" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.5" y="1123.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.5" y="1107.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1172.5" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1102.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1172.5" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1172.5" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1173.3" y="1235.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1173.3" y="1219.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1173.3" y="1203.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1173.3" y="1187.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1173.3" y="1171.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1173.3" y="1155.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1173.3" y="1139.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1173.3" y="1123.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1173.3" y="1107.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1173.3" y="1091.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1173.3" y="1075.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1173.3" y="1059.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.3" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.3" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1173.3" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1173.3" y="995.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.1" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.1" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.1" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.1" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.1" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.1" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.1" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.1" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.1" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.1" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.1" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.1" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.1" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.1" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.1" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.1" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.1" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.1" y="771.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.1" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.1" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.1" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.1" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.1" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.1" y="675.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="686.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.1" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1174.1" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.07%)</title><rect x="1174.1" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>MemBarNode::MemBarNode(Compile*, int, Node*) (1 samples, 0.07%)</title><rect x="1174.1" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="1054.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1175.0" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1175.0" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1175.0" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.8" y="1139.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.8" y="1123.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.8" y="1107.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.8" y="1091.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.8" y="1075.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.8" y="1059.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.8" y="1043.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.8" y="1027.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.8" y="1011.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.8" y="995.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.8" y="979.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.8" y="963.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.8" y="947.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.8" y="931.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.8" y="915.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.8" y="899.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.8" y="883.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.8" y="867.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.8" y="851.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.8" y="835.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.8" y="819.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.8" y="803.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.8" y="787.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.8" y="771.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.8" y="755.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.8" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.8" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.8" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.8" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.8" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1175.8" y="659.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.6" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.6" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.6" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1176.6" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.6" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.6" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1176.6" y="659.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1177.5" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1177.5" y="1139.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1177.5" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.5" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.5" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1178.3" y="1235.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1178.3" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1178.3" y="1203.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1178.3" y="1187.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1178.3" y="1171.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1178.3" y="1155.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1178.3" y="1139.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1178.3" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1178.3" y="1107.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1178.3" y="1091.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1178.3" y="1075.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1178.3" y="1059.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1178.3" y="1043.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1178.3" y="1027.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1178.3" y="1011.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1178.3" y="995.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1178.3" y="979.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1178.3" y="963.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1178.3" y="947.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.3" y="931.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.3" y="915.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.3" y="899.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.3" y="883.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.3" y="867.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.3" y="851.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.3" y="835.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.3" y="819.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.3" y="803.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.3" y="787.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.3" y="771.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.3" y="755.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.3" y="739.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.3" y="723.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.3" y="707.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.3" y="691.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.3" y="675.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.3" y="659.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.3" y="643.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.07%)</title><rect x="1178.3" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1178.3" y="611.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="627.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="611.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1179.2" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1179.2" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.0" y="595.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.0" y="579.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.0" y="563.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.0" y="531.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.0" y="515.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.0" y="499.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.0" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.0" y="467.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.0" y="451.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.0" y="435.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.0" y="419.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.0" y="403.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.0" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1180.0" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1180.0" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1180.0" y="323.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.0" y="307.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="318.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.0" y="291.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.8" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.8" y="915.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.8" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.8" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.8" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.8" y="851.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.8" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.8" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1180.8" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.8" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.8" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.8" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1180.8" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1180.8" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1180.8" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1180.8" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1180.8" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="1043.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1181.7" y="1011.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.5" y="1331.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.5" y="1315.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.5" y="1299.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.5" y="1283.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.5" y="1267.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.5" y="1251.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.5" y="1235.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.5" y="1219.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.5" y="1203.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.5" y="1187.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.5" y="1171.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.5" y="1155.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.5" y="1139.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.5" y="1123.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.5" y="1107.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.5" y="1091.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1182.5" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1182.5" y="1059.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1182.5" y="1043.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1182.5" y="1027.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1182.5" y="1011.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1182.5" y="995.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.5" y="979.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.5" y="963.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1182.5" y="947.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.5" y="931.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.5" y="915.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1182.5" y="899.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1182.5" y="883.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1182.5" y="867.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.5" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.5" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.5" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.5" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1182.5" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.07%)</title><rect x="1182.5" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.3" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.3" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1183.3" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1183.3" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1183.3" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1183.3" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.3" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1184.2" y="979.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.2" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1184.2" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="958.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1184.2" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="1185.0" y="1427.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="1438.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.0" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="1422.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.8" y="1411.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1422.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.7" y="1475.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1486.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.7" y="1459.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="1470.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.7" y="1443.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="1454.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="1438.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1186.7" y="1411.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="1422.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1491.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="1502.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.5" y="1475.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="1486.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1459.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1470.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1443.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.5" y="1454.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1187.5" y="1427.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="1438.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1187.5" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1422.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.3" y="1523.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1534.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.3" y="1507.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="1518.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.3" y="1491.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1502.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1188.3" y="1475.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1486.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1188.3" y="1459.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="1470.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1443.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="1454.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1427.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="1438.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1188.3" y="1411.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="1422.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1491.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="1502.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1475.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="1486.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1459.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="1470.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1443.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1427.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1438.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.2" y="1422.0"></text>
</g>
</g>
</svg>
