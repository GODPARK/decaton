<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (439 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.23%)</title><rect x="10.0" y="1203.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.23%)</title><rect x="10.0" y="1187.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.23%)</title><rect x="12.7" y="1203.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="15.7" y="1214.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.23%)</title><rect x="12.7" y="1187.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (35 samples, 7.97%)</title><rect x="15.4" y="1203.0" width="94.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.4" y="1214.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.poll (35 samples, 7.97%)</title><rect x="15.4" y="1187.0" width="94.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="1198.0">com/linecor..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (13 samples, 2.96%)</title><rect x="15.4" y="1171.0" width="34.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="1182.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager$$Lambda$259/129894087.accept (11 samples, 2.51%)</title><rect x="15.4" y="1155.0" width="29.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (11 samples, 2.51%)</title><rect x="15.4" y="1139.0" width="29.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.4" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 0.91%)</title><rect x="28.8" y="1123.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 0.91%)</title><rect x="28.8" y="1107.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 0.91%)</title><rect x="28.8" y="1091.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 0.91%)</title><rect x="28.8" y="1075.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.91%)</title><rect x="28.8" y="1059.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.91%)</title><rect x="28.8" y="1043.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.68%)</title><rect x="28.8" y="1027.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.68%)</title><rect x="28.8" y="1011.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.68%)</title><rect x="28.8" y="995.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.23%)</title><rect x="36.9" y="1027.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.23%)</title><rect x="36.9" y="1011.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.23%)</title><rect x="36.9" y="995.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.23%)</title><rect x="39.6" y="1123.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.23%)</title><rect x="39.6" y="1107.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.23%)</title><rect x="39.6" y="1091.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.23%)</title><rect x="42.3" y="1123.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.23%)</title><rect x="42.3" y="1107.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.46%)</title><rect x="44.9" y="1155.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.46%)</title><rect x="44.9" y="1139.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.46%)</title><rect x="44.9" y="1123.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.46%)</title><rect x="44.9" y="1107.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 5.01%)</title><rect x="50.3" y="1171.0" width="59.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.3" y="1182.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 5.01%)</title><rect x="50.3" y="1155.0" width="59.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.3" y="1166.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (19 samples, 4.33%)</title><rect x="50.3" y="1139.0" width="51.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.3" y="1150.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.23%)</title><rect x="50.3" y="1123.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.3" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.23%)</title><rect x="50.3" y="1107.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.3" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.23%)</title><rect x="50.3" y="1091.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="53.3" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.23%)</title><rect x="50.3" y="1075.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="53.3" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::UnlinkAfterAcquire(Thread*, ObjectWaiter*) (1 samples, 0.23%)</title><rect x="50.3" y="1059.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.37%)</title><rect x="53.0" y="1123.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.37%)</title><rect x="53.0" y="1107.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.14%)</title><rect x="53.0" y="1091.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 1.14%)</title><rect x="53.0" y="1075.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.46%)</title><rect x="53.0" y="1059.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.23%)</title><rect x="53.0" y="1043.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.23%)</title><rect x="55.7" y="1043.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.23%)</title><rect x="55.7" y="1027.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 0.68%)</title><rect x="58.4" y="1059.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 0.68%)</title><rect x="58.4" y="1043.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 0.68%)</title><rect x="58.4" y="1027.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (3 samples, 0.68%)</title><rect x="58.4" y="1011.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (3 samples, 0.68%)</title><rect x="58.4" y="995.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (3 samples, 0.68%)</title><rect x="58.4" y="979.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.4" y="990.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.23%)</title><rect x="63.8" y="963.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="66.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.23%)</title><rect x="66.4" y="1091.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.23%)</title><rect x="66.4" y="1075.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.23%)</title><rect x="66.4" y="1059.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.23%)</title><rect x="66.4" y="1043.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.23%)</title><rect x="66.4" y="1027.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.23%)</title><rect x="66.4" y="1011.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.23%)</title><rect x="66.4" y="995.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.23%)</title><rect x="66.4" y="979.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (12 samples, 2.73%)</title><rect x="69.1" y="1123.0" width="32.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.1" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (12 samples, 2.73%)</title><rect x="69.1" y="1107.0" width="32.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.1" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (9 samples, 2.05%)</title><rect x="69.1" y="1091.0" width="24.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.1" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (9 samples, 2.05%)</title><rect x="69.1" y="1075.0" width="24.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.1" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.46%)</title><rect x="71.8" y="1059.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 1.14%)</title><rect x="77.2" y="1059.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 1.14%)</title><rect x="77.2" y="1043.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 1.14%)</title><rect x="77.2" y="1027.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.2" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 1.14%)</title><rect x="77.2" y="1011.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.2" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.91%)</title><rect x="79.9" y="995.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (4 samples, 0.91%)</title><rect x="79.9" y="979.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (4 samples, 0.91%)</title><rect x="79.9" y="963.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.91%)</title><rect x="79.9" y="947.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.23%)</title><rect x="90.6" y="1059.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.23%)</title><rect x="93.3" y="1091.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.23%)</title><rect x="93.3" y="1075.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.23%)</title><rect x="93.3" y="1059.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.23%)</title><rect x="93.3" y="1043.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.23%)</title><rect x="93.3" y="1027.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.23%)</title><rect x="93.3" y="1011.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.3" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.23%)</title><rect x="93.3" y="995.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="96.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.23%)</title><rect x="96.0" y="1091.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.23%)</title><rect x="96.0" y="1075.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.23%)</title><rect x="96.0" y="1059.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.23%)</title><rect x="96.0" y="1043.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.23%)</title><rect x="98.7" y="1091.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.23%)</title><rect x="101.4" y="1139.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.23%)</title><rect x="101.4" y="1123.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.23%)</title><rect x="101.4" y="1107.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.23%)</title><rect x="101.4" y="1091.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.23%)</title><rect x="101.4" y="1075.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.23%)</title><rect x="101.4" y="1059.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.23%)</title><rect x="101.4" y="1043.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.23%)</title><rect x="101.4" y="1027.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.23%)</title><rect x="104.1" y="1139.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.23%)</title><rect x="104.1" y="1123.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.23%)</title><rect x="104.1" y="1107.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.23%)</title><rect x="104.1" y="1091.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.23%)</title><rect x="104.1" y="1075.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.23%)</title><rect x="106.8" y="1139.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.23%)</title><rect x="106.8" y="1123.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (266 samples, 60.59%)</title><rect x="109.5" y="1203.0" width="714.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.5" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (266 samples, 60.59%)</title><rect x="109.5" y="1187.0" width="714.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.5" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (266 samples, 60.59%)</title><rect x="109.5" y="1171.0" width="714.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.5" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.46%)</title><rect x="114.8" y="1155.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 0.46%)</title><rect x="114.8" y="1139.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.46%)</title><rect x="114.8" y="1123.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.46%)</title><rect x="114.8" y="1107.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.46%)</title><rect x="114.8" y="1091.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.46%)</title><rect x="114.8" y="1075.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/261796598.run (242 samples, 55.13%)</title><rect x="120.2" y="1155.0" width="650.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.2" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/261796598.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53 (242 samples, 55.13%)</title><rect x="120.2" y="1139.0" width="650.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.2" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (242 samples, 55.13%)</title><rect x="120.2" y="1123.0" width="650.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.2" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (242 samples, 55.13%)</title><rect x="120.2" y="1107.0" width="650.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.2" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (54 samples, 12.30%)</title><rect x="131.0" y="1091.0" width="145.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.0" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (54 samples, 12.30%)</title><rect x="131.0" y="1075.0" width="145.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.0" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (54 samples, 12.30%)</title><rect x="131.0" y="1059.0" width="145.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.0" y="1070.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (54 samples, 12.30%)</title><rect x="131.0" y="1043.0" width="145.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.0" y="1054.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (54 samples, 12.30%)</title><rect x="131.0" y="1027.0" width="145.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.0" y="1038.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (54 samples, 12.30%)</title><rect x="131.0" y="1011.0" width="145.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.0" y="1022.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (23 samples, 5.24%)</title><rect x="131.0" y="995.0" width="61.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.0" y="1006.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.14%)</title><rect x="163.2" y="979.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.14%)</title><rect x="163.2" y="963.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.14%)</title><rect x="163.2" y="947.0" width="13.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.14%)</title><rect x="163.2" y="931.0" width="13.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.14%)</title><rect x="163.2" y="915.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.14%)</title><rect x="163.2" y="899.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 1.14%)</title><rect x="163.2" y="883.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.37%)</title><rect x="176.7" y="979.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (29 samples, 6.61%)</title><rect x="192.8" y="995.0" width="77.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.8" y="1006.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.23%)</title><rect x="192.8" y="979.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.46%)</title><rect x="195.5" y="979.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.68%)</title><rect x="200.8" y="979.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.68%)</title><rect x="200.8" y="963.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.68%)</title><rect x="200.8" y="947.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.46%)</title><rect x="203.5" y="931.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.46%)</title><rect x="203.5" y="915.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 1.59%)</title><rect x="208.9" y="979.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 1.59%)</title><rect x="208.9" y="963.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 3.42%)</title><rect x="227.7" y="979.0" width="40.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.7" y="990.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="227.7" y="963.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.23%)</title><rect x="227.7" y="947.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.23%)</title><rect x="227.7" y="931.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.23%)</title><rect x="227.7" y="915.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.23%)</title><rect x="230.4" y="963.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 2.96%)</title><rect x="233.1" y="963.0" width="34.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.1" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 2.96%)</title><rect x="233.1" y="947.0" width="34.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.1" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 2.96%)</title><rect x="233.1" y="931.0" width="34.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.1" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.91%)</title><rect x="233.1" y="915.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.23%)</title><rect x="235.8" y="899.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.23%)</title><rect x="235.8" y="883.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.23%)</title><rect x="235.8" y="867.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.23%)</title><rect x="235.8" y="851.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.23%)</title><rect x="235.8" y="835.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.23%)</title><rect x="238.5" y="899.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.23%)</title><rect x="241.2" y="899.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.46%)</title><rect x="243.8" y="915.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.46%)</title><rect x="249.2" y="915.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 1.14%)</title><rect x="254.6" y="915.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.46%)</title><rect x="262.7" y="899.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.46%)</title><rect x="262.7" y="883.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="265.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.46%)</title><rect x="262.7" y="867.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="265.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.46%)</title><rect x="262.7" y="851.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="265.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.23%)</title><rect x="268.0" y="979.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.46%)</title><rect x="270.7" y="995.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.23%)</title><rect x="270.7" y="979.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.23%)</title><rect x="273.4" y="979.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.23%)</title><rect x="273.4" y="963.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.23%)</title><rect x="273.4" y="947.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.23%)</title><rect x="273.4" y="931.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (176 samples, 40.09%)</title><rect x="276.1" y="1091.0" width="473.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.1" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (27 samples, 6.15%)</title><rect x="276.1" y="1075.0" width="72.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.1" y="1086.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 5.92%)</title><rect x="278.8" y="1059.0" width="69.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.8" y="1070.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.01%)</title><rect x="289.5" y="1043.0" width="59.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.5" y="1054.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 2.28%)</title><rect x="292.2" y="1027.0" width="26.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.2" y="1038.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 2.28%)</title><rect x="292.2" y="1011.0" width="26.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.2" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 2.28%)</title><rect x="292.2" y="995.0" width="26.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.2" y="1006.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 1.14%)</title><rect x="305.7" y="979.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (5 samples, 1.14%)</title><rect x="305.7" y="963.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 2.51%)</title><rect x="319.1" y="1027.0" width="29.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.1" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 2.51%)</title><rect x="319.1" y="1011.0" width="29.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.1" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 2.51%)</title><rect x="319.1" y="995.0" width="29.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="322.1" y="1006.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.46%)</title><rect x="348.7" y="1075.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.46%)</title><rect x="348.7" y="1059.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.46%)</title><rect x="348.7" y="1043.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (35 samples, 7.97%)</title><rect x="354.1" y="1075.0" width="94.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.1" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (35 samples, 7.97%)</title><rect x="354.1" y="1059.0" width="94.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.1" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (17 samples, 3.87%)</title><rect x="362.1" y="1043.0" width="45.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.1" y="1054.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.28%)</title><rect x="375.6" y="1027.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.6" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.59%)</title><rect x="378.2" y="1011.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.91%)</title><rect x="380.9" y="995.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.91%)</title><rect x="380.9" y="979.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.9" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.91%)</title><rect x="380.9" y="963.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="383.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.68%)</title><rect x="380.9" y="947.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="383.9" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.68%)</title><rect x="380.9" y="931.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="383.9" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.68%)</title><rect x="380.9" y="915.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="383.9" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.23%)</title><rect x="383.6" y="899.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="386.6" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.23%)</title><rect x="386.3" y="899.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="389.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.23%)</title><rect x="389.0" y="947.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="392.0" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.23%)</title><rect x="389.0" y="931.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="392.0" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.46%)</title><rect x="391.7" y="995.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="394.7" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.46%)</title><rect x="397.1" y="1011.0" width="5.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="400.1" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.46%)</title><rect x="402.4" y="1027.0" width="5.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="405.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.46%)</title><rect x="407.8" y="1043.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.46%)</title><rect x="407.8" y="1027.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.46%)</title><rect x="407.8" y="1011.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.23%)</title><rect x="410.5" y="995.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="413.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.23%)</title><rect x="410.5" y="979.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.5" y="990.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.23%)</title><rect x="410.5" y="963.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="413.5" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 2.96%)</title><rect x="413.2" y="1043.0" width="34.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.2" y="1054.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 2.96%)</title><rect x="413.2" y="1027.0" width="34.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.2" y="1038.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.23%)</title><rect x="413.2" y="1011.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.23%)</title><rect x="413.2" y="995.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="416.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.23%)</title><rect x="413.2" y="979.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.23%)</title><rect x="413.2" y="963.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.23%)</title><rect x="413.2" y="947.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 2.73%)</title><rect x="415.9" y="1011.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.9" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 2.73%)</title><rect x="415.9" y="995.0" width="32.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.9" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 2.73%)</title><rect x="415.9" y="979.0" width="32.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.9" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.68%)</title><rect x="426.6" y="963.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.91%)</title><rect x="434.7" y="963.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="437.7" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.23%)</title><rect x="445.4" y="963.0" width="2.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="448.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (98 samples, 22.32%)</title><rect x="448.1" y="1075.0" width="263.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.1" y="1086.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (97 samples, 22.10%)</title><rect x="448.1" y="1059.0" width="260.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.1" y="1070.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/641828730.process (83 samples, 18.91%)</title><rect x="458.9" y="1043.0" width="223.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.9" y="1054.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (83 samples, 18.91%)</title><rect x="458.9" y="1027.0" width="223.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.9" y="1038.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (82 samples, 18.68%)</title><rect x="458.9" y="1011.0" width="220.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.9" y="1022.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.23%)</title><rect x="472.3" y="995.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.23%)</title><rect x="472.3" y="979.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="475.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.23%)</title><rect x="472.3" y="963.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.23%)</title><rect x="472.3" y="947.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.23%)</title><rect x="472.3" y="931.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (76 samples, 17.31%)</title><rect x="475.0" y="995.0" width="204.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.0" y="1006.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (74 samples, 16.86%)</title><rect x="480.4" y="979.0" width="198.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.4" y="990.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (64 samples, 14.58%)</title><rect x="501.9" y="963.0" width="172.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="504.9" y="974.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.14%)</title><rect x="515.3" y="947.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.3" y="958.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.23%)</title><rect x="528.8" y="947.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="531.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.68%)</title><rect x="531.5" y="947.0" width="8.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="534.5" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.23%)</title><rect x="536.8" y="931.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="539.8" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.91%)</title><rect x="539.5" y="947.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.5" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.23%)</title><rect x="550.3" y="947.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="553.3" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (45 samples, 10.25%)</title><rect x="553.0" y="947.0" width="120.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="556.0" y="958.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.23%)</title><rect x="569.1" y="931.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.1" y="942.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.23%)</title><rect x="569.1" y="915.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.1" y="926.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.23%)</title><rect x="571.8" y="931.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.8" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.91%)</title><rect x="574.5" y="931.0" width="10.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="577.5" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.23%)</title><rect x="585.2" y="931.0" width="2.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="588.2" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (21 samples, 4.78%)</title><rect x="587.9" y="931.0" width="56.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="590.9" y="942.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.91%)</title><rect x="644.4" y="931.0" width="10.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="647.4" y="942.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.23%)</title><rect x="655.1" y="931.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="658.1" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.23%)</title><rect x="657.8" y="931.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="660.8" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.68%)</title><rect x="660.5" y="931.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.5" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="668.5" y="931.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="671.5" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.23%)</title><rect x="671.2" y="931.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="674.2" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.23%)</title><rect x="673.9" y="963.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="676.9" y="974.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.23%)</title><rect x="676.6" y="963.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="679.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.23%)</title><rect x="679.3" y="1011.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="682.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.23%)</title><rect x="679.3" y="995.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="682.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.23%)</title><rect x="679.3" y="979.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="682.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.23%)</title><rect x="679.3" y="963.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.46%)</title><rect x="682.0" y="1043.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.23%)</title><rect x="687.4" y="1043.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.23%)</title><rect x="687.4" y="1027.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.23%)</title><rect x="690.0" y="1043.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.23%)</title><rect x="690.0" y="1027.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$289/2042839875.get$Lambda (1 samples, 0.23%)</title><rect x="690.0" y="1011.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.23%)</title><rect x="692.7" y="1043.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="695.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.23%)</title><rect x="692.7" y="1027.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="695.7" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.23%)</title><rect x="692.7" y="1011.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.23%)</title><rect x="695.4" y="1043.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="698.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.23%)</title><rect x="695.4" y="1027.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.4" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.23%)</title><rect x="695.4" y="1011.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.23%)</title><rect x="698.1" y="1043.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.23%)</title><rect x="698.1" y="1027.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="701.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.68%)</title><rect x="700.8" y="1043.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="703.8" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.23%)</title><rect x="708.9" y="1059.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="711.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.19%)</title><rect x="711.5" y="1075.0" width="37.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.5" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.19%)</title><rect x="711.5" y="1059.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.5" y="1070.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.23%)</title><rect x="738.4" y="1043.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="741.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.46%)</title><rect x="741.1" y="1043.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$293/1007587258.accept (2 samples, 0.46%)</title><rect x="741.1" y="1027.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (2 samples, 0.46%)</title><rect x="741.1" y="1011.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.23%)</title><rect x="741.1" y="995.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.1" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.23%)</title><rect x="741.1" y="979.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="744.1" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.23%)</title><rect x="741.1" y="963.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.1" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.23%)</title><rect x="743.8" y="995.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.8" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.23%)</title><rect x="743.8" y="979.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="746.8" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.23%)</title><rect x="746.5" y="1043.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.82%)</title><rect x="749.2" y="1091.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 1.82%)</title><rect x="749.2" y="1075.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.37%)</title><rect x="754.6" y="1059.0" width="16.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$297/1820773817.accept (6 samples, 1.37%)</title><rect x="754.6" y="1043.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (6 samples, 1.37%)</title><rect x="754.6" y="1027.0" width="16.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/618968925.complete (6 samples, 1.37%)</title><rect x="754.6" y="1011.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$59 (6 samples, 1.37%)</title><rect x="754.6" y="995.0" width="16.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="757.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/1382591474.complete (6 samples, 1.37%)</title><rect x="754.6" y="979.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$73 (6 samples, 1.37%)</title><rect x="754.6" y="963.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 1.37%)</title><rect x="754.6" y="947.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.6" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.37%)</title><rect x="754.6" y="931.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.6" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.37%)</title><rect x="754.6" y="915.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 1.37%)</title><rect x="754.6" y="899.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (20 samples, 4.56%)</title><rect x="770.7" y="1155.0" width="53.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.7" y="1166.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 4.10%)</title><rect x="770.7" y="1139.0" width="48.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.7" y="1150.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 2.28%)</title><rect x="792.2" y="1123.0" width="26.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 2.28%)</title><rect x="792.2" y="1107.0" width="26.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 2.28%)</title><rect x="792.2" y="1091.0" width="26.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 2.28%)</title><rect x="792.2" y="1075.0" width="26.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.23%)</title><rect x="819.1" y="1139.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.23%)</title><rect x="821.8" y="1139.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.8" y="1150.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.23%)</title><rect x="824.4" y="1203.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="827.4" y="1214.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.23%)</title><rect x="824.4" y="1187.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="827.4" y="1198.0"></text>
</g>
<g>
<title>start_thread (135 samples, 30.75%)</title><rect x="827.1" y="1203.0" width="362.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="830.1" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (135 samples, 30.75%)</title><rect x="827.1" y="1187.0" width="362.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="830.1" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.23%)</title><rect x="827.1" y="1171.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="830.1" y="1182.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.23%)</title><rect x="827.1" y="1155.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.1" y="1166.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.23%)</title><rect x="827.1" y="1139.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.1" y="1150.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.23%)</title><rect x="827.1" y="1123.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="830.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectorPolicy::update_incremental_cset_info(HeapRegion*, unsigned long) (1 samples, 0.23%)</title><rect x="827.1" y="1107.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.23%)</title><rect x="827.1" y="1091.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.1" y="1102.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.23%)</title><rect x="827.1" y="1075.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.1" y="1086.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 1.82%)</title><rect x="829.8" y="1171.0" width="21.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.8" y="1182.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 1.82%)</title><rect x="829.8" y="1155.0" width="21.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.8" y="1166.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 1.82%)</title><rect x="829.8" y="1139.0" width="21.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.8" y="1150.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 1.82%)</title><rect x="829.8" y="1123.0" width="21.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.8" y="1134.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.14%)</title><rect x="835.2" y="1107.0" width="13.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.2" y="1118.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (2 samples, 0.46%)</title><rect x="843.3" y="1091.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="846.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.23%)</title><rect x="843.3" y="1075.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.3" y="1086.0"></text>
</g>
<g>
<title>G1DefaultAllocator::survivor_gc_alloc_region(unsigned char) (1 samples, 0.23%)</title><rect x="845.9" y="1075.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.9" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.23%)</title><rect x="848.6" y="1107.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="851.6" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (126 samples, 28.70%)</title><rect x="851.3" y="1171.0" width="338.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.3" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (126 samples, 28.70%)</title><rect x="851.3" y="1155.0" width="338.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="854.3" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (125 samples, 28.47%)</title><rect x="851.3" y="1139.0" width="336.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.3" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 28.25%)</title><rect x="851.3" y="1123.0" width="333.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.3" y="1134.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (120 samples, 27.33%)</title><rect x="851.3" y="1107.0" width="322.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.3" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (120 samples, 27.33%)</title><rect x="851.3" y="1091.0" width="322.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.3" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (83 samples, 18.91%)</title><rect x="851.3" y="1075.0" width="223.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.3" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.68%)</title><rect x="851.3" y="1059.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.3" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.46%)</title><rect x="851.3" y="1043.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="854.3" y="1054.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.23%)</title><rect x="854.0" y="1027.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.0" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.23%)</title><rect x="856.7" y="1043.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.7" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.23%)</title><rect x="856.7" y="1027.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.7" y="1038.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.23%)</title><rect x="856.7" y="1011.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.7" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.68%)</title><rect x="859.4" y="1059.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.4" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.23%)</title><rect x="859.4" y="1043.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.4" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.23%)</title><rect x="859.4" y="1027.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.4" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.23%)</title><rect x="859.4" y="1011.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="862.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.23%)</title><rect x="862.1" y="1043.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="865.1" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.23%)</title><rect x="862.1" y="1027.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.1" y="1038.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.23%)</title><rect x="864.8" y="1043.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.8" y="1054.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.23%)</title><rect x="867.4" y="1059.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.4" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 2.28%)</title><rect x="870.1" y="1059.0" width="26.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.1" y="1070.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 2.28%)</title><rect x="870.1" y="1043.0" width="26.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.1" y="1054.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 1.14%)</title><rect x="872.8" y="1027.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.23%)</title><rect x="886.3" y="1027.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="889.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.23%)</title><rect x="886.3" y="1011.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.68%)</title><rect x="889.0" y="1027.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.0" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.46%)</title><rect x="891.6" y="1011.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.46%)</title><rect x="891.6" y="995.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.46%)</title><rect x="891.6" y="979.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="894.6" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.23%)</title><rect x="891.6" y="963.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.6" y="974.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.23%)</title><rect x="891.6" y="947.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.6" y="958.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.23%)</title><rect x="891.6" y="931.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.6" y="942.0"></text>
</g>
<g>
<title>State::_sub_Op_CMoveP(Node const*) (1 samples, 0.23%)</title><rect x="894.3" y="963.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.3" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.46%)</title><rect x="897.0" y="1059.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.46%)</title><rect x="897.0" y="1043.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="900.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.23%)</title><rect x="897.0" y="1027.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="900.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.23%)</title><rect x="899.7" y="1027.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.7" y="1038.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.23%)</title><rect x="899.7" y="1011.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (63 samples, 14.35%)</title><rect x="902.4" y="1059.0" width="169.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.4" y="1070.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="907.8" y="1043.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.8" y="1054.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.23%)</title><rect x="910.5" y="1043.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="913.5" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.46%)</title><rect x="913.1" y="1043.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="916.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 1.37%)</title><rect x="918.5" y="1043.0" width="16.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.23%)</title><rect x="923.9" y="1027.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.68%)</title><rect x="926.6" y="1027.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.46%)</title><rect x="929.3" y="1011.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.91%)</title><rect x="934.6" y="1043.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="937.6" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.23%)</title><rect x="937.3" y="1027.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.46%)</title><rect x="940.0" y="1027.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="943.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="940.0" y="1011.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.0" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="942.7" y="1011.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="945.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 1.59%)</title><rect x="945.4" y="1043.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="948.4" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.23%)</title><rect x="961.5" y="1027.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.5" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.23%)</title><rect x="961.5" y="1011.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 2.73%)</title><rect x="964.2" y="1043.0" width="32.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.2" y="1054.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.23%)</title><rect x="972.3" y="1027.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.91%)</title><rect x="975.0" y="1027.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="983.0" y="1011.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.0" y="1022.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.46%)</title><rect x="985.7" y="1027.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.7" y="1038.0"></text>
</g>
<g>
<title>checkCastPPNode::rule() const (1 samples, 0.23%)</title><rect x="991.1" y="1027.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.1" y="1038.0"></text>
</g>
<g>
<title>loadConINode::rule() const (1 samples, 0.23%)</title><rect x="993.8" y="1027.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.23%)</title><rect x="996.5" y="1043.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.68%)</title><rect x="999.2" y="1043.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.2" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.23%)</title><rect x="1001.8" y="1027.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.8" y="1038.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.23%)</title><rect x="1004.5" y="1027.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.23%)</title><rect x="1007.2" y="1043.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.23%)</title><rect x="1007.2" y="1027.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.46%)</title><rect x="1009.9" y="1043.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.23%)</title><rect x="1012.6" y="1027.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.91%)</title><rect x="1015.3" y="1043.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.3" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.91%)</title><rect x="1015.3" y="1027.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.3" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.91%)</title><rect x="1015.3" y="1011.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1018.3" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.91%)</title><rect x="1015.3" y="995.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.23%)</title><rect x="1026.0" y="1043.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.0" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="1026.0" y="1027.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.68%)</title><rect x="1028.7" y="1043.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.46%)</title><rect x="1031.4" y="1027.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.46%)</title><rect x="1036.8" y="1043.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.46%)</title><rect x="1036.8" y="1027.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.8" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 2.28%)</title><rect x="1042.2" y="1043.0" width="26.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.2" y="1054.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.23%)</title><rect x="1058.3" y="1027.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.3" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.68%)</title><rect x="1061.0" y="1027.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.0" y="1038.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.23%)</title><rect x="1069.0" y="1043.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.0" y="1054.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.23%)</title><rect x="1071.7" y="1059.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.7" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 6.61%)</title><rect x="1074.4" y="1075.0" width="78.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.4" y="1086.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.23%)</title><rect x="1074.4" y="1059.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.4" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.23%)</title><rect x="1074.4" y="1043.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.46%)</title><rect x="1077.1" y="1059.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.23%)</title><rect x="1077.1" y="1043.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.23%)</title><rect x="1077.1" y="1027.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.23%)</title><rect x="1077.1" y="1011.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.1" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.23%)</title><rect x="1077.1" y="995.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.1" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.23%)</title><rect x="1077.1" y="979.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.1" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.23%)</title><rect x="1077.1" y="963.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.1" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.23%)</title><rect x="1077.1" y="947.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.1" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.23%)</title><rect x="1077.1" y="931.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.1" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="915.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.1" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.23%)</title><rect x="1077.1" y="899.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.1" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.23%)</title><rect x="1077.1" y="883.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.1" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.23%)</title><rect x="1077.1" y="867.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.1" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.23%)</title><rect x="1077.1" y="851.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.1" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="835.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.1" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.23%)</title><rect x="1077.1" y="819.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.1" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.23%)</title><rect x="1077.1" y="803.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.1" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.23%)</title><rect x="1077.1" y="787.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.1" y="798.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.23%)</title><rect x="1077.1" y="771.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.1" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="755.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.1" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.23%)</title><rect x="1077.1" y="739.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.1" y="750.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.23%)</title><rect x="1077.1" y="723.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.1" y="734.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.23%)</title><rect x="1077.1" y="707.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.1" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.23%)</title><rect x="1077.1" y="691.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.1" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.23%)</title><rect x="1077.1" y="675.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.1" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="659.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.1" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="643.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.1" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1077.1" y="627.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.1" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1077.1" y="611.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.1" y="622.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1077.1" y="595.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.1" y="606.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.23%)</title><rect x="1077.1" y="579.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.1" y="590.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.23%)</title><rect x="1077.1" y="563.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.1" y="574.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.23%)</title><rect x="1077.1" y="547.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.1" y="558.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1077.1" y="531.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.1" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.23%)</title><rect x="1079.8" y="1043.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1082.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.23%)</title><rect x="1082.5" y="1059.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 5.01%)</title><rect x="1085.2" y="1059.0" width="59.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.2" y="1070.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1085.2" y="1043.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.2" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1085.2" y="1027.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.2" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1085.2" y="1011.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.23%)</title><rect x="1085.2" y="995.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.23%)</title><rect x="1085.2" y="979.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.23%)</title><rect x="1085.2" y="963.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.2" y="974.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.23%)</title><rect x="1085.2" y="947.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1088.2" y="958.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.23%)</title><rect x="1087.9" y="1043.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="1054.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.23%)</title><rect x="1090.5" y="1043.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 1.14%)</title><rect x="1093.2" y="1043.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.2" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.46%)</title><rect x="1101.3" y="1027.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 1.82%)</title><rect x="1106.7" y="1043.0" width="21.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.7" y="1054.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 1.59%)</title><rect x="1109.4" y="1027.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 1.37%)</title><rect x="1112.1" y="1011.0" width="16.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.46%)</title><rect x="1122.8" y="995.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.46%)</title><rect x="1122.8" y="979.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.23%)</title><rect x="1125.5" y="963.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.46%)</title><rect x="1128.2" y="1043.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.68%)</title><rect x="1133.6" y="1043.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.23%)</title><rect x="1136.2" y="1027.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.23%)</title><rect x="1136.2" y="1011.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.2" y="1022.0"></text>
</g>
<g>
<title>hashptr(void const*) (1 samples, 0.23%)</title><rect x="1136.2" y="995.0" width="2.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1139.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.23%)</title><rect x="1138.9" y="1027.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.23%)</title><rect x="1138.9" y="1011.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.23%)</title><rect x="1141.6" y="1043.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.23%)</title><rect x="1141.6" y="1027.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.23%)</title><rect x="1141.6" y="1011.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.23%)</title><rect x="1141.6" y="995.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.6" y="1006.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.23%)</title><rect x="1141.6" y="979.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.68%)</title><rect x="1144.3" y="1059.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.23%)</title><rect x="1147.0" y="1043.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1147.0" y="1027.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.23%)</title><rect x="1147.0" y="1011.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="1022.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.23%)</title><rect x="1149.7" y="1043.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.59%)</title><rect x="1152.4" y="1075.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.59%)</title><rect x="1152.4" y="1059.0" width="18.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.59%)</title><rect x="1152.4" y="1043.0" width="18.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.59%)</title><rect x="1152.4" y="1027.0" width="18.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.59%)</title><rect x="1152.4" y="1011.0" width="18.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.59%)</title><rect x="1152.4" y="995.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.46%)</title><rect x="1152.4" y="979.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.23%)</title><rect x="1152.4" y="963.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.23%)</title><rect x="1152.4" y="947.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="958.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.23%)</title><rect x="1152.4" y="931.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="942.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.23%)</title><rect x="1152.4" y="915.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="926.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.23%)</title><rect x="1152.4" y="899.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.23%)</title><rect x="1152.4" y="883.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="894.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.23%)</title><rect x="1152.4" y="867.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="878.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.23%)</title><rect x="1152.4" y="851.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.23%)</title><rect x="1155.1" y="963.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.1" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.23%)</title><rect x="1155.1" y="947.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.1" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.23%)</title><rect x="1155.1" y="931.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.1" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.23%)</title><rect x="1155.1" y="915.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.1" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1155.1" y="899.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1155.1" y="883.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.23%)</title><rect x="1155.1" y="867.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::push_translate(ciType*) (1 samples, 0.23%)</title><rect x="1155.1" y="851.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.91%)</title><rect x="1157.7" y="979.0" width="10.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.91%)</title><rect x="1157.7" y="963.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.91%)</title><rect x="1157.7" y="947.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.91%)</title><rect x="1157.7" y="931.0" width="10.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.91%)</title><rect x="1157.7" y="915.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.91%)</title><rect x="1157.7" y="899.0" width="10.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.7" y="883.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.7" y="867.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1157.7" y="851.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1157.7" y="835.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1157.7" y="819.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1157.7" y="803.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.7" y="787.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.7" y="771.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1157.7" y="755.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1157.7" y="739.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1157.7" y="723.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1157.7" y="707.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.7" y="691.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.7" y="675.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1157.7" y="659.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1157.7" y="643.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1157.7" y="627.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1157.7" y="611.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.7" y="595.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.7" y="579.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1157.7" y="563.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1157.7" y="547.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1157.7" y="531.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1157.7" y="515.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.7" y="499.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.7" y="483.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1157.7" y="467.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1157.7" y="451.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1157.7" y="435.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.23%)</title><rect x="1157.7" y="419.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.23%)</title><rect x="1157.7" y="403.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.23%)</title><rect x="1157.7" y="387.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.7" y="398.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.23%)</title><rect x="1157.7" y="371.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="382.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.23%)</title><rect x="1157.7" y="355.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="366.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.23%)</title><rect x="1157.7" y="339.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="883.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="867.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="851.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="835.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="819.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="803.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="787.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="771.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="755.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="739.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="723.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="707.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="691.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="675.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="659.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="643.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="627.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="611.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="595.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="579.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="563.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="547.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="531.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="515.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="499.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="483.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="467.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="451.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="435.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="419.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="403.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.68%)</title><rect x="1160.4" y="387.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.68%)</title><rect x="1160.4" y="371.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.68%)</title><rect x="1160.4" y="355.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.68%)</title><rect x="1160.4" y="339.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.68%)</title><rect x="1160.4" y="323.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.68%)</title><rect x="1160.4" y="307.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.23%)</title><rect x="1160.4" y="291.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1160.4" y="275.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="286.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.23%)</title><rect x="1160.4" y="259.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.23%)</title><rect x="1160.4" y="243.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1163.1" y="291.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1163.1" y="275.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.46%)</title><rect x="1163.1" y="259.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1163.1" y="243.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1163.1" y="227.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1163.1" y="211.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1163.1" y="195.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1163.1" y="179.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1163.1" y="163.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1163.1" y="147.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1163.1" y="131.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1163.1" y="115.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.23%)</title><rect x="1163.1" y="99.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="110.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.23%)</title><rect x="1163.1" y="83.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.1" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1163.1" y="67.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.23%)</title><rect x="1163.1" y="51.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="62.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.23%)</title><rect x="1163.1" y="35.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.23%)</title><rect x="1165.8" y="163.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.8" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="979.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="963.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1168.5" y="947.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1168.5" y="931.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1168.5" y="915.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1168.5" y="899.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1168.5" y="883.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="867.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1168.5" y="851.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1168.5" y="835.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1168.5" y="819.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1168.5" y="803.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1168.5" y="787.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="771.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1168.5" y="755.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1168.5" y="739.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1168.5" y="723.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1168.5" y="707.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1168.5" y="691.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="675.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1168.5" y="659.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1168.5" y="643.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1168.5" y="627.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1168.5" y="611.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1168.5" y="595.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1168.5" y="579.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1168.5" y="563.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1168.5" y="547.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1168.5" y="531.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1168.5" y="515.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.23%)</title><rect x="1168.5" y="499.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.23%)</title><rect x="1168.5" y="483.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.23%)</title><rect x="1168.5" y="467.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.23%)</title><rect x="1168.5" y="451.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1168.5" y="435.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="446.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1168.5" y="419.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.5" y="430.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.23%)</title><rect x="1168.5" y="403.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="414.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.23%)</title><rect x="1168.5" y="387.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1168.5" y="371.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.23%)</title><rect x="1171.2" y="1075.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.23%)</title><rect x="1171.2" y="1059.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.91%)</title><rect x="1173.9" y="1107.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.91%)</title><rect x="1173.9" y="1091.0" width="10.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.91%)</title><rect x="1173.9" y="1075.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.91%)</title><rect x="1173.9" y="1059.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.46%)</title><rect x="1173.9" y="1043.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.23%)</title><rect x="1173.9" y="1027.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.23%)</title><rect x="1173.9" y="1011.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.23%)</title><rect x="1173.9" y="995.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.23%)</title><rect x="1173.9" y="979.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.23%)</title><rect x="1173.9" y="963.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.23%)</title><rect x="1176.6" y="1027.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.23%)</title><rect x="1176.6" y="1011.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.23%)</title><rect x="1176.6" y="995.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.23%)</title><rect x="1176.6" y="979.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.23%)</title><rect x="1176.6" y="963.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.23%)</title><rect x="1176.6" y="947.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.23%)</title><rect x="1176.6" y="931.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1176.6" y="915.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1176.6" y="899.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1176.6" y="883.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.6" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1176.6" y="867.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1176.6" y="851.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.6" y="862.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.23%)</title><rect x="1176.6" y="835.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.23%)</title><rect x="1176.6" y="819.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.23%)</title><rect x="1176.6" y="803.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.23%)</title><rect x="1176.6" y="787.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.23%)</title><rect x="1176.6" y="771.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="782.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.23%)</title><rect x="1176.6" y="755.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.46%)</title><rect x="1179.2" y="1043.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="1054.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.23%)</title><rect x="1179.2" y="1027.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.23%)</title><rect x="1179.2" y="1011.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.2" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.23%)</title><rect x="1179.2" y="995.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.2" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::generate_address(LIR_OprDesc*, LIR_OprDesc*, int, int, BasicType) (1 samples, 0.23%)</title><rect x="1179.2" y="979.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.23%)</title><rect x="1181.9" y="1027.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="1038.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.23%)</title><rect x="1181.9" y="1011.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="1022.0"></text>
</g>
<g>
<title>LinearScan::create_unhandled_lists(Interval**, Interval**, bool (*)(Interval const*), bool (*)(Interval const*)) (1 samples, 0.23%)</title><rect x="1181.9" y="995.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="1006.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.23%)</title><rect x="1184.6" y="1123.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.23%)</title><rect x="1184.6" y="1107.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.23%)</title><rect x="1184.6" y="1091.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.23%)</title><rect x="1184.6" y="1075.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.23%)</title><rect x="1184.6" y="1059.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.23%)</title><rect x="1184.6" y="1043.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.23%)</title><rect x="1187.3" y="1139.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1150.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.23%)</title><rect x="1187.3" y="1123.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.23%)</title><rect x="1187.3" y="1107.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="1118.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.23%)</title><rect x="1187.3" y="1091.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.23%)</title><rect x="1187.3" y="1075.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.23%)</title><rect x="1187.3" y="1059.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1070.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.23%)</title><rect x="1187.3" y="1043.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="1054.0"></text>
</g>
</g>
</svg>
