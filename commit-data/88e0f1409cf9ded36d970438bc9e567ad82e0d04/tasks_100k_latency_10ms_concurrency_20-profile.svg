<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (356 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 8.71%)</title><rect x="10.0" y="1347.0" width="102.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.poll (31 samples, 8.71%)</title><rect x="10.0" y="1331.0" width="102.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.pausePartitions (1 samples, 0.28%)</title><rect x="10.0" y="1315.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsPaused (1 samples, 0.28%)</title><rect x="10.0" y="1299.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updatePartitionsStatus (1 samples, 0.28%)</title><rect x="13.3" y="1315.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.28%)</title><rect x="13.3" y="1299.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.28%)</title><rect x="13.3" y="1283.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$260/915216041.accept (1 samples, 0.28%)</title><rect x="13.3" y="1267.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.28%)</title><rect x="13.3" y="1251.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.28%)</title><rect x="13.3" y="1235.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.3" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.28%)</title><rect x="13.3" y="1219.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 2.81%)</title><rect x="16.6" y="1315.0" width="33.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1326.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager$$Lambda$259/357427291.accept (10 samples, 2.81%)</title><rect x="16.6" y="1299.0" width="33.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="1310.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (10 samples, 2.81%)</title><rect x="16.6" y="1283.0" width="33.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.6" y="1294.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.12%)</title><rect x="19.9" y="1267.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.12%)</title><rect x="19.9" y="1251.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.12%)</title><rect x="19.9" y="1235.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.12%)</title><rect x="19.9" y="1219.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.12%)</title><rect x="19.9" y="1203.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.12%)</title><rect x="19.9" y="1187.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.28%)</title><rect x="26.6" y="1171.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.28%)</title><rect x="26.6" y="1155.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.28%)</title><rect x="26.6" y="1139.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.6" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="29.9" y="1171.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="32.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.56%)</title><rect x="33.2" y="1267.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.56%)</title><rect x="33.2" y="1251.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.28%)</title><rect x="39.8" y="1267.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.28%)</title><rect x="39.8" y="1251.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.8" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="39.8" y="1235.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="42.8" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.56%)</title><rect x="43.1" y="1267.0" width="6.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="46.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (19 samples, 5.34%)</title><rect x="49.8" y="1315.0" width="63.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.8" y="1326.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (19 samples, 5.34%)</title><rect x="49.8" y="1299.0" width="63.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.8" y="1310.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (14 samples, 3.93%)</title><rect x="49.8" y="1283.0" width="46.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.8" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (2 samples, 0.56%)</title><rect x="49.8" y="1267.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.8" y="1278.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.28%)</title><rect x="53.1" y="1251.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.1" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.28%)</title><rect x="53.1" y="1235.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="56.1" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.28%)</title><rect x="53.1" y="1219.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="56.1" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.28%)</title><rect x="53.1" y="1203.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="56.1" y="1214.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.28%)</title><rect x="53.1" y="1187.0" width="3.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="56.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.28%)</title><rect x="56.4" y="1267.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.28%)</title><rect x="56.4" y="1251.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.28%)</title><rect x="56.4" y="1235.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.84%)</title><rect x="59.7" y="1267.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.84%)</title><rect x="59.7" y="1251.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.56%)</title><rect x="59.7" y="1235.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.28%)</title><rect x="59.7" y="1219.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.28%)</title><rect x="59.7" y="1203.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.28%)</title><rect x="59.7" y="1187.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.28%)</title><rect x="59.7" y="1171.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="63.0" y="1219.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="63.0" y="1203.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.28%)</title><rect x="63.0" y="1187.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.28%)</title><rect x="63.0" y="1171.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.28%)</title><rect x="63.0" y="1155.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/206382794.shouldBlock (1 samples, 0.28%)</title><rect x="66.3" y="1235.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.28%)</title><rect x="66.3" y="1219.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.28%)</title><rect x="66.3" y="1203.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.28%)</title><rect x="66.3" y="1187.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (1 samples, 0.28%)</title><rect x="66.3" y="1171.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 2.25%)</title><rect x="69.7" y="1267.0" width="26.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.7" y="1278.0">o..</text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.28%)</title><rect x="69.7" y="1251.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 1.97%)</title><rect x="73.0" y="1251.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.0" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 1.97%)</title><rect x="73.0" y="1235.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.0" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 1.97%)</title><rect x="73.0" y="1219.0" width="23.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.0" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.56%)</title><rect x="73.0" y="1203.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.28%)</title><rect x="76.3" y="1187.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.28%)</title><rect x="76.3" y="1171.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.28%)</title><rect x="76.3" y="1155.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.28%)</title><rect x="76.3" y="1139.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.28%)</title><rect x="76.3" y="1123.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.3" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="76.3" y="1107.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="79.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="76.3" y="1091.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.3" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="76.3" y="1075.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="79.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 1.40%)</title><rect x="79.6" y="1203.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 1.12%)</title><rect x="82.9" y="1187.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 1.12%)</title><rect x="82.9" y="1171.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.9" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 1.12%)</title><rect x="82.9" y="1155.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.9" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 0.84%)</title><rect x="86.2" y="1139.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.56%)</title><rect x="96.2" y="1283.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.56%)</title><rect x="96.2" y="1267.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.56%)</title><rect x="96.2" y="1251.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="96.2" y="1235.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="96.2" y="1219.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.28%)</title><rect x="96.2" y="1203.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.28%)</title><rect x="96.2" y="1187.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.28%)</title><rect x="96.2" y="1171.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.28%)</title><rect x="96.2" y="1155.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="99.5" y="1235.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.28%)</title><rect x="99.5" y="1219.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.28%)</title><rect x="99.5" y="1203.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.28%)</title><rect x="99.5" y="1187.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.28%)</title><rect x="99.5" y="1171.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.28%)</title><rect x="99.5" y="1155.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.28%)</title><rect x="99.5" y="1139.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.5" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="99.5" y="1123.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="102.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.56%)</title><rect x="102.8" y="1283.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.56%)</title><rect x="102.8" y="1267.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.28%)</title><rect x="106.1" y="1251.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.28%)</title><rect x="106.1" y="1235.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.28%)</title><rect x="109.4" y="1283.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="109.4" y="1267.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="109.4" y="1251.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="109.4" y="1235.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.28%)</title><rect x="109.4" y="1219.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.4" y="1230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="109.4" y="1203.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="112.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (236 samples, 66.29%)</title><rect x="112.8" y="1347.0" width="782.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.8" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (236 samples, 66.29%)</title><rect x="112.8" y="1331.0" width="782.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.8" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (236 samples, 66.29%)</title><rect x="112.8" y="1315.0" width="782.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.8" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1213216537.run (215 samples, 60.39%)</title><rect x="112.8" y="1299.0" width="712.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1213216537.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53 (215 samples, 60.39%)</title><rect x="112.8" y="1283.0" width="712.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.8" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (215 samples, 60.39%)</title><rect x="112.8" y="1267.0" width="712.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.8" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (215 samples, 60.39%)</title><rect x="112.8" y="1251.0" width="712.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.28%)</title><rect x="126.0" y="1235.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.28%)</title><rect x="129.3" y="1235.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.28%)</title><rect x="129.3" y="1219.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$200/1518868852.get (1 samples, 0.28%)</title><rect x="129.3" y="1203.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.28%)</title><rect x="129.3" y="1187.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.3" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="129.3" y="1171.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="132.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (39 samples, 10.96%)</title><rect x="132.6" y="1235.0" width="129.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.6" y="1246.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (39 samples, 10.96%)</title><rect x="132.6" y="1219.0" width="129.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.6" y="1230.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (39 samples, 10.96%)</title><rect x="132.6" y="1203.0" width="129.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.6" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 10.67%)</title><rect x="132.6" y="1187.0" width="126.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.6" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 10.67%)</title><rect x="132.6" y="1171.0" width="126.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.6" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 10.67%)</title><rect x="132.6" y="1155.0" width="126.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.6" y="1166.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 3.65%)</title><rect x="132.6" y="1139.0" width="43.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.6" y="1150.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 1.97%)</title><rect x="132.6" y="1123.0" width="23.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.6" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 1.97%)</title><rect x="132.6" y="1107.0" width="23.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.6" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.84%)</title><rect x="132.6" y="1091.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.12%)</title><rect x="142.6" y="1091.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.12%)</title><rect x="142.6" y="1075.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.69%)</title><rect x="155.8" y="1123.0" width="19.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.69%)</title><rect x="155.8" y="1107.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.28%)</title><rect x="155.8" y="1091.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.28%)</title><rect x="155.8" y="1075.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.56%)</title><rect x="159.2" y="1091.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="159.2" y="1075.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="162.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="162.5" y="1075.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="162.5" y="1059.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.84%)</title><rect x="165.8" y="1091.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 6.18%)</title><rect x="175.7" y="1139.0" width="73.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.7" y="1150.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.84%)</title><rect x="175.7" y="1123.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.84%)</title><rect x="175.7" y="1107.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (3 samples, 0.84%)</title><rect x="175.7" y="1091.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.12%)</title><rect x="185.7" y="1123.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.12%)</title><rect x="185.7" y="1107.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 1.12%)</title><rect x="185.7" y="1091.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="195.6" y="1075.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.28%)</title><rect x="198.9" y="1123.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.28%)</title><rect x="198.9" y="1107.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.9" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="198.9" y="1091.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="201.9" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="198.9" y="1075.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="201.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="198.9" y="1059.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="201.9" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="198.9" y="1043.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="201.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 3.93%)</title><rect x="202.2" y="1123.0" width="46.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.2" y="1134.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.12%)</title><rect x="202.2" y="1107.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.56%)</title><rect x="202.2" y="1091.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.56%)</title><rect x="202.2" y="1075.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.56%)</title><rect x="202.2" y="1059.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.56%)</title><rect x="202.2" y="1043.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.28%)</title><rect x="205.6" y="1027.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.56%)</title><rect x="208.9" y="1091.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.56%)</title><rect x="208.9" y="1075.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.56%)</title><rect x="208.9" y="1059.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.56%)</title><rect x="208.9" y="1043.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.56%)</title><rect x="208.9" y="1027.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 2.81%)</title><rect x="215.5" y="1107.0" width="33.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.5" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 2.81%)</title><rect x="215.5" y="1091.0" width="33.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.5" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 2.81%)</title><rect x="215.5" y="1075.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.5" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.84%)</title><rect x="228.8" y="1059.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.28%)</title><rect x="235.4" y="1043.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.56%)</title><rect x="238.7" y="1059.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.28%)</title><rect x="245.3" y="1059.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="245.3" y="1043.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="245.3" y="1027.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.84%)</title><rect x="248.7" y="1139.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.84%)</title><rect x="248.7" y="1123.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.84%)</title><rect x="248.7" y="1107.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.84%)</title><rect x="248.7" y="1091.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="255.3" y="1075.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.28%)</title><rect x="258.6" y="1187.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.6" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="258.6" y="1171.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="261.6" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="258.6" y="1155.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="261.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (157 samples, 44.10%)</title><rect x="261.9" y="1235.0" width="520.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.9" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="261.9" y="1219.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="264.9" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="261.9" y="1203.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="264.9" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="261.9" y="1187.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="264.9" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="261.9" y="1171.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="264.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.28%)</title><rect x="261.9" y="1155.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.9" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.28%)</title><rect x="261.9" y="1139.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="264.9" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="261.9" y="1123.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (41 samples, 11.52%)</title><rect x="265.2" y="1219.0" width="135.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.2" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 11.24%)</title><rect x="268.5" y="1203.0" width="132.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.5" y="1214.0">org/slf4j/MDC.re..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (31 samples, 8.71%)</title><rect x="298.4" y="1187.0" width="102.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.4" y="1198.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 1.40%)</title><rect x="321.6" y="1171.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.40%)</title><rect x="321.6" y="1155.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.40%)</title><rect x="321.6" y="1139.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.40%)</title><rect x="321.6" y="1123.0" width="16.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 1.40%)</title><rect x="321.6" y="1107.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 5.34%)</title><rect x="338.1" y="1171.0" width="63.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.1" y="1182.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 5.34%)</title><rect x="338.1" y="1155.0" width="63.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.1" y="1166.0">java/u..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.56%)</title><rect x="348.1" y="1139.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="354.7" y="1139.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="354.7" y="1123.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 3.65%)</title><rect x="358.0" y="1139.0" width="43.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.0" y="1150.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.84%)</title><rect x="401.1" y="1219.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.56%)</title><rect x="404.4" y="1203.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.56%)</title><rect x="404.4" y="1187.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 6.74%)</title><rect x="411.1" y="1219.0" width="79.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.1" y="1230.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 6.74%)</title><rect x="411.1" y="1203.0" width="79.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.1" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 3.09%)</title><rect x="411.1" y="1187.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.1" y="1198.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.28%)</title><rect x="414.4" y="1171.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.28%)</title><rect x="414.4" y="1155.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.4" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="414.4" y="1139.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="414.4" y="1123.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="417.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="414.4" y="1107.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.97%)</title><rect x="417.7" y="1171.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.7" y="1182.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.97%)</title><rect x="417.7" y="1155.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.7" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.84%)</title><rect x="417.7" y="1139.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.84%)</title><rect x="417.7" y="1123.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.84%)</title><rect x="417.7" y="1107.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.7" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.84%)</title><rect x="417.7" y="1091.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="420.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="417.7" y="1075.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="420.7" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="417.7" y="1059.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.7" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="417.7" y="1043.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="420.7" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.56%)</title><rect x="421.0" y="1075.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="424.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.56%)</title><rect x="427.6" y="1139.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.6" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="434.3" y="1139.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="437.3" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="437.6" y="1139.0" width="3.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="440.6" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.56%)</title><rect x="440.9" y="1171.0" width="6.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="443.9" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.65%)</title><rect x="447.5" y="1187.0" width="43.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.5" y="1198.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 3.65%)</title><rect x="447.5" y="1171.0" width="43.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.5" y="1182.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.12%)</title><rect x="447.5" y="1155.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.12%)</title><rect x="447.5" y="1139.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.12%)</title><rect x="447.5" y="1123.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.12%)</title><rect x="447.5" y="1107.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.12%)</title><rect x="447.5" y="1091.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="460.8" y="1155.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="460.8" y="1139.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="460.8" y="1123.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="460.8" y="1107.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="460.8" y="1091.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.25%)</title><rect x="464.1" y="1155.0" width="26.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="467.1" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.25%)</title><rect x="464.1" y="1139.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.1" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.25%)</title><rect x="464.1" y="1123.0" width="26.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.1" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.12%)</title><rect x="477.4" y="1107.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (74 samples, 20.79%)</title><rect x="490.6" y="1219.0" width="245.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.6" y="1230.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (74 samples, 20.79%)</title><rect x="490.6" y="1203.0" width="245.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.6" y="1214.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/655720786.process (65 samples, 18.26%)</title><rect x="490.6" y="1187.0" width="215.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.6" y="1198.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (65 samples, 18.26%)</title><rect x="490.6" y="1171.0" width="215.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.6" y="1182.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (62 samples, 17.42%)</title><rect x="490.6" y="1155.0" width="205.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.6" y="1166.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="490.6" y="1139.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.6" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="490.6" y="1123.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.6" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.28%)</title><rect x="490.6" y="1107.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.6" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.28%)</title><rect x="490.6" y="1091.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.28%)</title><rect x="490.6" y="1075.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.28%)</title><rect x="490.6" y="1059.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (60 samples, 16.85%)</title><rect x="493.9" y="1139.0" width="198.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.9" y="1150.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (59 samples, 16.57%)</title><rect x="493.9" y="1123.0" width="195.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.9" y="1134.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 14.04%)</title><rect x="513.8" y="1107.0" width="165.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="516.8" y="1118.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.84%)</title><rect x="520.4" y="1091.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="523.4" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="530.4" y="1091.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.4" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="533.7" y="1091.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="536.7" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.56%)</title><rect x="537.0" y="1091.0" width="6.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.56%)</title><rect x="537.0" y="1075.0" width="6.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="540.0" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="543.7" y="1091.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="546.7" y="1102.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 11.24%)</title><rect x="547.0" y="1091.0" width="132.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="550.0" y="1102.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="570.2" y="1075.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="573.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="570.2" y="1059.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.2" y="1070.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.28%)</title><rect x="573.5" y="1075.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="576.5" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="573.5" y="1059.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.5" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="576.8" y="1075.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="579.8" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="580.1" y="1075.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="583.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="580.1" y="1059.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="583.1" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.40%)</title><rect x="583.4" y="1075.0" width="16.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="586.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="600.0" y="1075.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="603.0" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 4.49%)</title><rect x="603.3" y="1075.0" width="53.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="606.3" y="1086.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="656.3" y="1075.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="659.3" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.28%)</title><rect x="659.7" y="1075.0" width="3.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="662.7" y="1086.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="663.0" y="1075.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="666.0" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.56%)</title><rect x="666.3" y="1075.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="669.3" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.28%)</title><rect x="672.9" y="1075.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="675.9" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="676.2" y="1075.0" width="3.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="679.2" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.28%)</title><rect x="679.6" y="1107.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.6" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="682.9" y="1107.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="685.9" y="1118.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.28%)</title><rect x="686.2" y="1107.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="689.2" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="689.5" y="1123.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="689.5" y="1107.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="692.8" y="1139.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="692.8" y="1123.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="695.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="692.8" y="1107.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.84%)</title><rect x="696.1" y="1155.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="699.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.84%)</title><rect x="696.1" y="1139.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.84%)</title><rect x="696.1" y="1123.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="699.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.84%)</title><rect x="696.1" y="1107.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="699.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.84%)</title><rect x="696.1" y="1091.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.12%)</title><rect x="706.1" y="1187.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.84%)</title><rect x="709.4" y="1171.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="712.4" y="1182.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.56%)</title><rect x="709.4" y="1155.0" width="6.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="712.4" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.28%)</title><rect x="716.0" y="1155.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 1.12%)</title><rect x="719.3" y="1187.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 1.12%)</title><rect x="719.3" y="1171.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/655720786.process (1 samples, 0.28%)</title><rect x="729.3" y="1155.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="732.6" y="1187.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.93%)</title><rect x="735.9" y="1219.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.9" y="1230.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.93%)</title><rect x="735.9" y="1203.0" width="46.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.9" y="1214.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.84%)</title><rect x="769.0" y="1187.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/43135407.accept (3 samples, 0.84%)</title><rect x="769.0" y="1171.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="772.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (3 samples, 0.84%)</title><rect x="769.0" y="1155.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="772.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.84%)</title><rect x="769.0" y="1139.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.0" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.84%)</title><rect x="769.0" y="1123.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="772.0" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.84%)</title><rect x="769.0" y="1107.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="772.0" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.84%)</title><rect x="769.0" y="1091.0" width="10.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="772.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.84%)</title><rect x="769.0" y="1075.0" width="10.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="772.0" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.28%)</title><rect x="779.0" y="1187.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 3.09%)</title><rect x="782.3" y="1235.0" width="36.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.3" y="1246.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.09%)</title><rect x="782.3" y="1219.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.3" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 2.81%)</title><rect x="785.6" y="1203.0" width="33.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.6" y="1214.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$291/160640800.accept (10 samples, 2.81%)</title><rect x="785.6" y="1187.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.6" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (10 samples, 2.81%)</title><rect x="785.6" y="1171.0" width="33.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.6" y="1182.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/265328277.complete (10 samples, 2.81%)</title><rect x="785.6" y="1155.0" width="33.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.6" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$59 (10 samples, 2.81%)</title><rect x="785.6" y="1139.0" width="33.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.6" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/800083422.complete (10 samples, 2.81%)</title><rect x="785.6" y="1123.0" width="33.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.6" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$73 (10 samples, 2.81%)</title><rect x="785.6" y="1107.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.6" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 2.81%)</title><rect x="785.6" y="1091.0" width="33.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.6" y="1102.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 2.81%)</title><rect x="785.6" y="1075.0" width="33.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.6" y="1086.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 2.81%)</title><rect x="785.6" y="1059.0" width="33.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.6" y="1070.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 2.81%)</title><rect x="785.6" y="1043.0" width="33.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="788.6" y="1054.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.56%)</title><rect x="818.8" y="1235.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="821.8" y="1246.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.56%)</title><rect x="818.8" y="1219.0" width="6.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="821.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 1.97%)</title><rect x="825.4" y="1299.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.4" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 1.97%)</title><rect x="825.4" y="1283.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.4" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 1.97%)</title><rect x="825.4" y="1267.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.4" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 1.97%)</title><rect x="825.4" y="1251.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.4" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 3.93%)</title><rect x="848.6" y="1299.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.6" y="1310.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 3.37%)</title><rect x="855.2" y="1283.0" width="39.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.2" y="1294.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (7 samples, 1.97%)</title><rect x="861.9" y="1267.0" width="23.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.9" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 1.97%)</title><rect x="861.9" y="1251.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.9" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 1.97%)</title><rect x="861.9" y="1235.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="864.9" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 1.97%)</title><rect x="861.9" y="1219.0" width="23.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.9" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 1.97%)</title><rect x="861.9" y="1203.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.9" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.84%)</title><rect x="885.1" y="1267.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.84%)</title><rect x="885.1" y="1251.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.84%)</title><rect x="885.1" y="1235.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.84%)</title><rect x="885.1" y="1219.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="888.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.56%)</title><rect x="895.0" y="1347.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.56%)</title><rect x="895.0" y="1331.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.56%)</title><rect x="895.0" y="1315.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="898.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.56%)</title><rect x="895.0" y="1299.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="898.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.28%)</title><rect x="895.0" y="1283.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.28%)</title><rect x="895.0" y="1267.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="898.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.28%)</title><rect x="895.0" y="1251.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="895.0" y="1235.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="895.0" y="1219.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="898.3" y="1283.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.28%)</title><rect x="898.3" y="1267.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.3" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.28%)</title><rect x="898.3" y="1251.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="901.3" y="1262.0"></text>
</g>
<g>
<title>start_thread (87 samples, 24.44%)</title><rect x="901.6" y="1347.0" width="288.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="904.6" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (87 samples, 24.44%)</title><rect x="901.6" y="1331.0" width="288.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="904.6" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.65%)</title><rect x="901.6" y="1315.0" width="43.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="904.6" y="1326.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.65%)</title><rect x="901.6" y="1299.0" width="43.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="904.6" y="1310.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 2.81%)</title><rect x="901.6" y="1283.0" width="33.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="904.6" y="1294.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 2.81%)</title><rect x="901.6" y="1267.0" width="33.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="904.6" y="1278.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.40%)</title><rect x="918.2" y="1251.0" width="16.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.2" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.28%)</title><rect x="931.5" y="1235.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.5" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.56%)</title><rect x="934.8" y="1283.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.8" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="934.8" y="1267.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.8" y="1278.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.28%)</title><rect x="934.8" y="1251.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.8" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.28%)</title><rect x="934.8" y="1235.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="937.8" y="1246.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.28%)</title><rect x="934.8" y="1219.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.8" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="938.1" y="1267.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.1" y="1278.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.28%)</title><rect x="938.1" y="1251.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.1" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="941.4" y="1283.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.4" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="941.4" y="1267.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.4" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="941.4" y="1251.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.4" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.28%)</title><rect x="941.4" y="1235.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.4" y="1246.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.28%)</title><rect x="941.4" y="1219.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.4" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.28%)</title><rect x="941.4" y="1203.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.4" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (73 samples, 20.51%)</title><rect x="944.7" y="1315.0" width="242.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.7" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (73 samples, 20.51%)</title><rect x="944.7" y="1299.0" width="242.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.7" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (73 samples, 20.51%)</title><rect x="944.7" y="1283.0" width="242.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.7" y="1294.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 20.51%)</title><rect x="944.7" y="1267.0" width="242.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.7" y="1278.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (69 samples, 19.38%)</title><rect x="944.7" y="1251.0" width="228.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="947.7" y="1262.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (69 samples, 19.38%)</title><rect x="944.7" y="1235.0" width="228.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.7" y="1246.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 10.67%)</title><rect x="944.7" y="1219.0" width="126.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.7" y="1230.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.56%)</title><rect x="944.7" y="1203.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.7" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.56%)</title><rect x="944.7" y="1187.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.7" y="1198.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.28%)</title><rect x="948.0" y="1171.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.0" y="1182.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.28%)</title><rect x="948.0" y="1155.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.0" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.56%)</title><rect x="951.3" y="1203.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.3" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="951.3" y="1187.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.3" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="951.3" y="1171.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.3" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="951.3" y="1155.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.3" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="954.7" y="1187.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.7" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="954.7" y="1171.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.12%)</title><rect x="958.0" y="1203.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.0" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.84%)</title><rect x="958.0" y="1187.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.0" y="1198.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.56%)</title><rect x="961.3" y="1171.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.3" y="1182.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.28%)</title><rect x="967.9" y="1187.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.56%)</title><rect x="971.2" y="1203.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="974.2" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.56%)</title><rect x="971.2" y="1187.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="971.2" y="1171.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.28%)</title><rect x="971.2" y="1155.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.2" y="1166.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.28%)</title><rect x="971.2" y="1139.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.2" y="1150.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.28%)</title><rect x="971.2" y="1123.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.2" y="1134.0"></text>
</g>
<g>
<title>MachNode::memory_operand() const (1 samples, 0.28%)</title><rect x="971.2" y="1107.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="974.6" y="1171.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="974.6" y="1155.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 7.87%)</title><rect x="977.9" y="1203.0" width="92.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.9" y="1214.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="981.2" y="1187.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.2" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="984.5" y="1187.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.5" y="1198.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.28%)</title><rect x="984.5" y="1171.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="987.8" y="1187.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.28%)</title><rect x="987.8" y="1171.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="991.1" y="1187.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="991.1" y="1171.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.1" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="991.1" y="1155.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.12%)</title><rect x="994.4" y="1187.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.40%)</title><rect x="1007.7" y="1187.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.7" y="1198.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="1014.3" y="1171.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.3" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.28%)</title><rect x="1017.6" y="1171.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.6" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.28%)</title><rect x="1021.0" y="1171.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.28%)</title><rect x="1024.3" y="1187.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.56%)</title><rect x="1027.6" y="1187.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.6" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.28%)</title><rect x="1030.9" y="1171.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.28%)</title><rect x="1034.2" y="1187.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.12%)</title><rect x="1037.5" y="1187.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.5" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.12%)</title><rect x="1037.5" y="1171.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.28%)</title><rect x="1037.5" y="1155.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.5" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.84%)</title><rect x="1040.8" y="1155.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.8" y="1166.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.28%)</title><rect x="1040.8" y="1139.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.8" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.56%)</title><rect x="1044.2" y="1139.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.56%)</title><rect x="1050.8" y="1187.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.56%)</title><rect x="1050.8" y="1171.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.84%)</title><rect x="1057.4" y="1187.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.4" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.56%)</title><rect x="1060.7" y="1171.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.7" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1064.0" y="1155.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="1166.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.28%)</title><rect x="1067.4" y="1187.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.4" y="1198.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.28%)</title><rect x="1067.4" y="1171.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.4" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 7.30%)</title><rect x="1070.7" y="1219.0" width="86.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.7" y="1230.0">Compile::O..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.84%)</title><rect x="1070.7" y="1203.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.84%)</title><rect x="1070.7" y="1187.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.28%)</title><rect x="1074.0" y="1171.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.28%)</title><rect x="1074.0" y="1155.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.0" y="1166.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.28%)</title><rect x="1074.0" y="1139.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.0" y="1150.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1074.0" y="1123.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.0" y="1134.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1074.0" y="1107.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.0" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1074.0" y="1091.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.0" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1074.0" y="1075.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.0" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="1059.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.0" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1074.0" y="1043.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1074.0" y="1027.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.0" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1074.0" y="1011.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.0" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1074.0" y="995.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.0" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="979.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.0" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1074.0" y="963.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.0" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1074.0" y="947.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.0" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1074.0" y="931.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1074.0" y="915.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="899.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.0" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1074.0" y="883.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.0" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1074.0" y="867.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.0" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1074.0" y="851.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.0" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1074.0" y="835.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.0" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="819.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1074.0" y="803.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.0" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1074.0" y="787.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.0" y="798.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1074.0" y="771.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.0" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1074.0" y="755.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.0" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1074.0" y="739.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="723.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.0" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1074.0" y="707.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.0" y="718.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.28%)</title><rect x="1074.0" y="691.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1171.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1155.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1139.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1123.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1107.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1091.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1075.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.28%)</title><rect x="1077.3" y="1059.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.3" y="1070.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.28%)</title><rect x="1077.3" y="1043.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 4.78%)</title><rect x="1080.6" y="1203.0" width="56.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.6" y="1214.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.28%)</title><rect x="1080.6" y="1187.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1083.9" y="1187.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 3.65%)</title><rect x="1087.2" y="1187.0" width="43.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.2" y="1198.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 3.37%)</title><rect x="1090.6" y="1171.0" width="39.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.6" y="1182.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1090.6" y="1155.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 3.09%)</title><rect x="1093.9" y="1155.0" width="36.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.9" y="1166.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1127.0" y="1139.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.56%)</title><rect x="1130.3" y="1187.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.56%)</title><rect x="1130.3" y="1171.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.28%)</title><rect x="1130.3" y="1155.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.28%)</title><rect x="1133.7" y="1155.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.28%)</title><rect x="1133.7" y="1139.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.12%)</title><rect x="1137.0" y="1203.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.12%)</title><rect x="1137.0" y="1187.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="1198.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1137.0" y="1171.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.0" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.56%)</title><rect x="1140.3" y="1171.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.3" y="1182.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1140.3" y="1155.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.3" y="1166.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.28%)</title><rect x="1140.3" y="1139.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.3" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.28%)</title><rect x="1140.3" y="1123.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.3" y="1134.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.28%)</title><rect x="1140.3" y="1107.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.3" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1140.3" y="1091.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.3" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1140.3" y="1075.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.3" y="1086.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1143.6" y="1155.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.6" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1143.6" y="1139.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.6" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1143.6" y="1123.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1146.9" y="1171.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.9" y="1182.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.28%)</title><rect x="1146.9" y="1155.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.9" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.56%)</title><rect x="1150.2" y="1203.0" width="6.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1153.2" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1156.9" y="1219.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.12%)</title><rect x="1156.9" y="1203.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.12%)</title><rect x="1156.9" y="1187.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.12%)</title><rect x="1156.9" y="1171.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.28%)</title><rect x="1156.9" y="1155.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.9" y="1166.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.28%)</title><rect x="1156.9" y="1139.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.9" y="1150.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.28%)</title><rect x="1156.9" y="1123.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.9" y="1134.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.28%)</title><rect x="1156.9" y="1107.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="1155.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="1139.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="1123.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1160.2" y="1107.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1160.2" y="1091.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1160.2" y="1075.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="1059.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="1043.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="1027.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="1011.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1160.2" y="995.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1160.2" y="979.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1160.2" y="963.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="947.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="931.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="915.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1160.2" y="899.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1160.2" y="883.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1160.2" y="867.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="851.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="835.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="819.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1160.2" y="803.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1160.2" y="787.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1160.2" y="771.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="755.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="739.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1160.2" y="723.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1160.2" y="707.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1160.2" y="691.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1160.2" y="675.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1160.2" y="659.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1160.2" y="643.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1160.2" y="627.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1160.2" y="611.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1160.2" y="595.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1160.2" y="579.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1160.2" y="563.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1160.2" y="547.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1160.2" y="531.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1160.2" y="515.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1160.2" y="499.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1160.2" y="483.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1160.2" y="467.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1160.2" y="451.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.2" y="435.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.2" y="419.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.2" y="403.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.2" y="387.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.2" y="371.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.2" y="355.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.2" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.2" y="339.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.2" y="323.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.2" y="307.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.2" y="291.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.2" y="275.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.2" y="259.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.2" y="243.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.2" y="227.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.2" y="211.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="222.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.28%)</title><rect x="1160.2" y="195.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="206.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.28%)</title><rect x="1160.2" y="179.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="190.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.28%)</title><rect x="1160.2" y="163.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.2" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.5" y="435.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.5" y="419.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.5" y="403.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.5" y="387.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.5" y="371.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.5" y="355.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.5" y="339.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.5" y="323.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.5" y="307.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.5" y="291.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.5" y="275.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.5" y="259.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.5" y="243.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.5" y="227.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.5" y="211.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.5" y="195.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.5" y="179.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.5" y="163.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1163.5" y="147.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1163.5" y="131.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="142.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.28%)</title><rect x="1163.5" y="115.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1163.5" y="99.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.5" y="110.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1163.5" y="83.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="94.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1163.5" y="67.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="78.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.28%)</title><rect x="1163.5" y="51.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.28%)</title><rect x="1163.5" y="35.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1166.8" y="627.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1166.8" y="611.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.28%)</title><rect x="1166.8" y="595.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1170.1" y="1219.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="1230.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1170.1" y="1203.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="1214.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.28%)</title><rect x="1170.1" y="1187.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.1" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="1170.1" y="1171.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.1" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.12%)</title><rect x="1173.4" y="1251.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.12%)</title><rect x="1173.4" y="1235.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.12%)</title><rect x="1173.4" y="1219.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.12%)</title><rect x="1173.4" y="1203.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.56%)</title><rect x="1173.4" y="1187.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="1198.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.28%)</title><rect x="1173.4" y="1171.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1182.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1176.7" y="1171.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1176.7" y="1155.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1176.7" y="1139.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1176.7" y="1123.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1176.7" y="1107.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1176.7" y="1091.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1176.7" y="1075.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1176.7" y="1059.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1176.7" y="1043.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1176.7" y="1027.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1176.7" y="1011.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.28%)</title><rect x="1176.7" y="995.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.56%)</title><rect x="1180.1" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="1198.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.56%)</title><rect x="1180.1" y="1171.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="1182.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.28%)</title><rect x="1180.1" y="1155.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="1166.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.28%)</title><rect x="1180.1" y="1139.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.28%)</title><rect x="1180.1" y="1123.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="1134.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.28%)</title><rect x="1183.4" y="1155.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="1166.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.28%)</title><rect x="1183.4" y="1139.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.28%)</title><rect x="1186.7" y="1315.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="1326.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.28%)</title><rect x="1186.7" y="1299.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.28%)</title><rect x="1186.7" y="1283.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1294.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.28%)</title><rect x="1186.7" y="1267.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.28%)</title><rect x="1186.7" y="1251.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1262.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1186.7" y="1235.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1246.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1186.7" y="1219.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1230.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.28%)</title><rect x="1186.7" y="1203.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="1186.7" y="1187.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="1186.7" y="1171.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
</g>
</svg>
