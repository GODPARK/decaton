<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (1,121 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (287 samples, 25.60%)</title><rect x="10.0" y="547.0" width="302.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="558.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.poll (287 samples, 25.60%)</title><rect x="10.0" y="531.0" width="302.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="542.0">com/linecorp/decaton/processor/runtime/Co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.pausePartitions (5 samples, 0.45%)</title><rect x="11.1" y="515.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="11.1" y="499.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.36%)</title><rect x="12.1" y="499.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.36%)</title><rect x="12.1" y="483.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.36%)</title><rect x="12.1" y="467.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.36%)</title><rect x="12.1" y="451.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.36%)</title><rect x="12.1" y="435.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.27%)</title><rect x="12.1" y="419.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="12.1" y="403.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="12.1" y="387.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="398.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="12.1" y="371.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="13.2" y="403.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="13.2" y="387.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.09%)</title><rect x="13.2" y="371.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="14.2" y="403.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="14.2" y="387.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="14.2" y="371.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="14.2" y="355.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.2" y="366.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.2" y="339.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="17.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="15.3" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="15.3" y="403.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.3" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.3" y="371.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="16.3" y="515.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="16.3" y="499.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updatePartitionsStatus (6 samples, 0.54%)</title><rect x="17.4" y="515.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.54%)</title><rect x="17.4" y="499.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.54%)</title><rect x="17.4" y="483.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$260/1113949425.accept (6 samples, 0.54%)</title><rect x="17.4" y="467.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.54%)</title><rect x="17.4" y="451.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.54%)</title><rect x="17.4" y="435.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.4" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.54%)</title><rect x="17.4" y="419.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (219 samples, 19.54%)</title><rect x="23.7" y="515.0" width="230.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="526.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager$$Lambda$259/1598685502.accept (208 samples, 18.55%)</title><rect x="23.7" y="499.0" width="218.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.7" y="510.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (207 samples, 18.47%)</title><rect x="24.7" y="483.0" width="217.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.7" y="494.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (170 samples, 15.17%)</title><rect x="25.8" y="467.0" width="178.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="478.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (170 samples, 15.17%)</title><rect x="25.8" y="451.0" width="178.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="462.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (170 samples, 15.17%)</title><rect x="25.8" y="435.0" width="178.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="446.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (170 samples, 15.17%)</title><rect x="25.8" y="419.0" width="178.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="430.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (170 samples, 15.17%)</title><rect x="25.8" y="403.0" width="178.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.8" y="414.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (170 samples, 15.17%)</title><rect x="25.8" y="387.0" width="178.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.8" y="398.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 10.35%)</title><rect x="63.7" y="371.0" width="122.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.7" y="382.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.96%)</title><rect x="63.7" y="355.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.7" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.96%)</title><rect x="63.7" y="339.0" width="23.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.7" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.96%)</title><rect x="63.7" y="323.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.7" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.71%)</title><rect x="86.8" y="355.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.71%)</title><rect x="86.8" y="339.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="90.0" y="323.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.0" y="334.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="90.0" y="307.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="93.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.36%)</title><rect x="91.1" y="323.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (86 samples, 7.67%)</title><rect x="95.3" y="355.0" width="90.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.3" y="366.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 7.67%)</title><rect x="95.3" y="339.0" width="90.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.3" y="350.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 7.40%)</title><rect x="95.3" y="323.0" width="87.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.3" y="334.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 7.40%)</title><rect x="95.3" y="307.0" width="87.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.3" y="318.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 7.31%)</title><rect x="96.3" y="291.0" width="86.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.3" y="302.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="101.6" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="104.6" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="102.6" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="105.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 6.42%)</title><rect x="103.7" y="275.0" width="75.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="106.7" y="286.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="104.7" y="259.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="107.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="105.8" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.8" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.18%)</title><rect x="106.8" y="259.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="109.8" y="270.0"></text>
</g>
<g>
<title>__pthread_cond_signal (51 samples, 4.55%)</title><rect x="108.9" y="259.0" width="53.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="111.9" y="270.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.43%)</title><rect x="162.6" y="259.0" width="16.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="165.6" y="270.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.18%)</title><rect x="179.5" y="275.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="182.5" y="286.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="181.6" y="275.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="184.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.27%)</title><rect x="182.6" y="323.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.45%)</title><rect x="185.8" y="371.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.45%)</title><rect x="185.8" y="355.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.45%)</title><rect x="185.8" y="339.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="188.9" y="323.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.80%)</title><rect x="191.1" y="371.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.80%)</title><rect x="191.1" y="355.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.80%)</title><rect x="191.1" y="339.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="197.4" y="323.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.4" y="334.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="198.4" y="323.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="201.4" y="334.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="200.5" y="371.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="203.5" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.45%)</title><rect x="204.7" y="467.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.45%)</title><rect x="204.7" y="451.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.27%)</title><rect x="210.0" y="467.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="210.0" y="451.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="210.0" y="435.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.50%)</title><rect x="213.2" y="467.0" width="29.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.2" y="478.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.50%)</title><rect x="213.2" y="451.0" width="29.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.2" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.54%)</title><rect x="232.1" y="435.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.1" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.18%)</title><rect x="233.2" y="419.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.2" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.18%)</title><rect x="233.2" y="403.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.2" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.18%)</title><rect x="233.2" y="387.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.2" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="234.2" y="371.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="237.2" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="234.2" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="237.2" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="234.2" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="237.2" y="350.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="234.2" y="323.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.2" y="334.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="234.2" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="237.2" y="318.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="234.2" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="237.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="235.3" y="419.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="236.3" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.3" y="430.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="238.4" y="435.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="241.4" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="239.5" y="435.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="242.5" y="446.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="242.6" y="499.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="245.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.71%)</title><rect x="245.8" y="499.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.71%)</title><rect x="245.8" y="483.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.71%)</title><rect x="245.8" y="467.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.71%)</title><rect x="245.8" y="451.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.8" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.54%)</title><rect x="247.9" y="435.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.91%)</title><rect x="254.2" y="515.0" width="57.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.2" y="526.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 4.82%)</title><rect x="255.3" y="499.0" width="56.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.3" y="510.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.68%)</title><rect x="256.3" y="483.0" width="31.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.3" y="494.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.27%)</title><rect x="256.3" y="467.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.3" y="478.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="256.3" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="259.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.18%)</title><rect x="257.4" y="451.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.4" y="462.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="257.4" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="260.4" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="257.4" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="260.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="258.4" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 2.41%)</title><rect x="259.5" y="467.0" width="28.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.5" y="478.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.41%)</title><rect x="259.5" y="451.0" width="28.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.5" y="462.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 2.14%)</title><rect x="259.5" y="435.0" width="25.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.5" y="446.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 2.14%)</title><rect x="259.5" y="419.0" width="25.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.5" y="430.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.16%)</title><rect x="261.6" y="403.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.54%)</title><rect x="261.6" y="387.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.54%)</title><rect x="261.6" y="371.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.54%)</title><rect x="261.6" y="355.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.54%)</title><rect x="261.6" y="339.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.54%)</title><rect x="261.6" y="323.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.6" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.54%)</title><rect x="261.6" y="307.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.6" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.54%)</title><rect x="261.6" y="291.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.6" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.62%)</title><rect x="267.9" y="387.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.62%)</title><rect x="267.9" y="371.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (7 samples, 0.62%)</title><rect x="267.9" y="355.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.80%)</title><rect x="275.3" y="403.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.80%)</title><rect x="275.3" y="387.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.45%)</title><rect x="275.3" y="371.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="382.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.45%)</title><rect x="275.3" y="355.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.3" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="278.4" y="339.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="281.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.36%)</title><rect x="280.5" y="371.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.5" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.36%)</title><rect x="280.5" y="355.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="284.7" y="435.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="284.7" y="419.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="284.7" y="403.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="284.7" y="387.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="284.7" y="371.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="284.7" y="355.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="285.8" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="285.8" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="286.8" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="286.8" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="286.8" y="403.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="286.8" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="286.8" y="371.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="286.8" y="355.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.09%)</title><rect x="286.8" y="339.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.71%)</title><rect x="287.9" y="483.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.71%)</title><rect x="287.9" y="467.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.45%)</title><rect x="287.9" y="451.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.9" y="462.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="290.0" y="435.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/964374334.accept (2 samples, 0.18%)</title><rect x="290.0" y="419.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="290.0" y="403.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="290.0" y="387.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (2 samples, 0.18%)</title><rect x="290.0" y="371.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="290.0" y="355.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="290.0" y="339.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="292.1" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="292.1" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.27%)</title><rect x="293.2" y="451.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="293.2" y="435.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.2" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="293.2" y="419.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="293.2" y="403.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="293.2" y="387.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="293.2" y="371.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.2" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="293.2" y="355.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="293.2" y="339.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="293.2" y="323.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.2" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="293.2" y="307.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="293.2" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.2" y="302.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="293.2" y="275.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$241/833937202.test (1 samples, 0.09%)</title><rect x="293.2" y="259.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.2" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="293.2" y="243.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="296.2" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="293.2" y="227.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="296.2" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="293.2" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="296.2" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="293.2" y="195.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="296.2" y="206.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="293.2" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="296.2" y="190.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="293.2" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="296.2" y="174.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="293.2" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="296.2" y="158.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.09%)</title><rect x="294.2" y="371.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="295.3" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.3" y="446.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="295.3" y="419.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="295.3" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="295.3" y="387.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="295.3" y="371.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="296.3" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.09%)</title><rect x="296.3" y="467.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.09%)</title><rect x="296.3" y="451.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.36%)</title><rect x="297.4" y="483.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="297.4" y="467.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.27%)</title><rect x="297.4" y="451.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.09%)</title><rect x="297.4" y="435.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="298.4" y="435.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.09%)</title><rect x="298.4" y="419.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="298.4" y="403.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="298.4" y="387.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="298.4" y="371.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.4" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="298.4" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="298.4" y="339.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="299.5" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="299.5" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="299.5" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="299.5" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.09%)</title><rect x="299.5" y="371.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="299.5" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="299.5" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="299.5" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.5" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="300.5" y="467.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="300.5" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="300.5" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="300.5" y="419.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="300.5" y="403.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="300.5" y="387.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="300.5" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.09%)</title><rect x="300.5" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="300.5" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.5" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (10 samples, 0.89%)</title><rect x="301.6" y="483.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.09%)</title><rect x="301.6" y="467.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.09%)</title><rect x="301.6" y="451.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.09%)</title><rect x="301.6" y="435.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.09%)</title><rect x="301.6" y="419.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.09%)</title><rect x="301.6" y="403.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.09%)</title><rect x="301.6" y="387.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.80%)</title><rect x="302.6" y="467.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.36%)</title><rect x="303.7" y="451.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/285906784.accept (4 samples, 0.36%)</title><rect x="303.7" y="435.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (3 samples, 0.27%)</title><rect x="304.7" y="419.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.27%)</title><rect x="304.7" y="403.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="304.7" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="304.7" y="371.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="304.7" y="355.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.18%)</title><rect x="305.8" y="387.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="305.8" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="305.8" y="355.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.8" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="305.8" y="339.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="308.8" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="305.8" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.8" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="305.8" y="307.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.8" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="305.8" y="291.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.8" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="305.8" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="308.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="305.8" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.8" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="306.8" y="371.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="306.8" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="306.8" y="339.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.36%)</title><rect x="307.9" y="451.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="307.9" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="307.9" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.27%)</title><rect x="308.9" y="435.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.9" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.27%)</title><rect x="308.9" y="419.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="308.9" y="403.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.27%)</title><rect x="308.9" y="387.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.9" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.27%)</title><rect x="308.9" y="371.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.9" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="308.9" y="355.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.9" y="366.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="308.9" y="339.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.9" y="350.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.18%)</title><rect x="308.9" y="323.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.9" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.18%)</title><rect x="308.9" y="307.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.9" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.18%)</title><rect x="308.9" y="291.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.9" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="308.9" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.9" y="286.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="308.9" y="259.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="311.9" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$253/226344982.test (1 samples, 0.09%)</title><rect x="310.0" y="275.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="310.0" y="259.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$252/1848123751.test (1 samples, 0.09%)</title><rect x="310.0" y="243.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.0" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="310.0" y="227.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.0" y="238.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="310.0" y="211.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="310.0" y="195.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.0" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="310.0" y="179.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.0" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="311.1" y="355.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.1" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (764 samples, 68.15%)</title><rect x="312.1" y="547.0" width="804.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.1" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (764 samples, 68.15%)</title><rect x="312.1" y="531.0" width="804.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.1" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (764 samples, 68.15%)</title><rect x="312.1" y="515.0" width="804.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.1" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/584035364.run (510 samples, 45.50%)</title><rect x="316.3" y="499.0" width="536.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.3" y="510.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/584035364..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53 (508 samples, 45.32%)</title><rect x="318.4" y="483.0" width="534.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.4" y="494.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (508 samples, 45.32%)</title><rect x="318.4" y="467.0" width="534.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.4" y="478.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (505 samples, 45.05%)</title><rect x="318.4" y="451.0" width="531.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.4" y="462.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="334.2" y="435.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="337.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="336.3" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 14.90%)</title><rect x="337.4" y="435.0" width="175.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.4" y="446.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (167 samples, 14.90%)</title><rect x="337.4" y="419.0" width="175.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.4" y="430.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (167 samples, 14.90%)</title><rect x="337.4" y="403.0" width="175.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.4" y="414.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 14.90%)</title><rect x="337.4" y="387.0" width="175.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.4" y="398.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 14.90%)</title><rect x="337.4" y="371.0" width="175.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.4" y="382.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 14.90%)</title><rect x="337.4" y="355.0" width="175.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="340.4" y="366.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="337.4" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="340.4" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="337.4" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="340.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="337.4" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="340.4" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="337.4" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.4" y="302.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="337.4" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="340.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.55%)</title><rect x="338.4" y="339.0" width="53.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.4" y="350.0">com/f..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="357.4" y="323.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="360.4" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.80%)</title><rect x="358.4" y="323.0" width="9.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="361.4" y="334.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="361.6" y="307.0" width="6.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="364.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.18%)</title><rect x="367.9" y="323.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.09%)</title><rect x="368.9" y="307.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="368.9" y="291.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.9" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="368.9" y="275.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.9" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="368.9" y="259.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="371.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="368.9" y="243.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.9" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="368.9" y="227.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.87%)</title><rect x="370.0" y="323.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.0" y="334.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 1.78%)</title><rect x="370.0" y="307.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.0" y="318.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.18%)</title><rect x="381.6" y="291.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="381.6" y="275.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.6" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="381.6" y="259.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="384.6" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="381.6" y="243.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="384.6" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="381.6" y="227.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.6" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="381.6" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.6" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="381.6" y="195.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="384.6" y="206.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="381.6" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.6" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="381.6" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.6" y="174.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="381.6" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="384.6" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="382.6" y="211.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="385.6" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.54%)</title><rect x="383.7" y="291.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.54%)</title><rect x="383.7" y="275.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="383.7" y="259.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="383.7" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="386.7" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="383.7" y="227.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="386.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="383.7" y="211.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.7" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="383.7" y="195.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.7" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="383.7" y="179.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="386.7" y="190.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="383.7" y="163.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="386.7" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="383.7" y="147.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="386.7" y="158.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="383.7" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.7" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.45%)</title><rect x="384.7" y="259.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.7" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="390.0" y="291.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="390.0" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="393.0" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="390.0" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="393.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="390.0" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="393.0" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="390.0" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="393.0" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="390.0" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="393.0" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="390.0" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="393.0" y="206.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="390.0" y="179.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="393.0" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="390.0" y="163.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="393.0" y="174.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="390.0" y="147.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="393.0" y="158.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="390.0" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="393.0" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="391.1" y="307.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (105 samples, 9.37%)</title><rect x="392.1" y="339.0" width="110.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.1" y="350.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="393.2" y="323.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.80%)</title><rect x="394.2" y="323.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.45%)</title><rect x="398.4" y="307.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.80%)</title><rect x="403.7" y="323.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.80%)</title><rect x="403.7" y="307.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.62%)</title><rect x="405.8" y="291.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.62%)</title><rect x="405.8" y="275.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="410.0" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.0" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="410.0" y="243.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="413.0" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="410.0" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="413.0" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="410.0" y="211.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="413.0" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="410.0" y="195.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="413.0" y="206.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="410.0" y="179.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="413.0" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="411.1" y="259.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.62%)</title><rect x="413.2" y="323.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.2" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="415.3" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="418.3" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="415.3" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="418.3" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="415.3" y="275.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="418.3" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="415.3" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="418.3" y="270.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="415.3" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="418.3" y="254.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="415.3" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="418.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.36%)</title><rect x="416.3" y="307.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 6.60%)</title><rect x="420.5" y="323.0" width="77.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.5" y="334.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.78%)</title><rect x="421.6" y="307.0" width="21.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="424.6" y="318.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.71%)</title><rect x="422.6" y="291.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.71%)</title><rect x="422.6" y="275.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.71%)</title><rect x="422.6" y="259.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.6" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.71%)</title><rect x="422.6" y="243.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.6" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.45%)</title><rect x="425.8" y="227.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="428.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.89%)</title><rect x="431.1" y="291.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.45%)</title><rect x="431.1" y="275.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.45%)</title><rect x="436.3" y="275.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.45%)</title><rect x="436.3" y="259.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 0.45%)</title><rect x="436.3" y="243.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (5 samples, 0.45%)</title><rect x="436.3" y="227.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="441.6" y="291.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="441.6" y="275.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.18%)</title><rect x="442.6" y="307.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.55%)</title><rect x="444.7" y="307.0" width="53.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="447.7" y="318.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.55%)</title><rect x="444.7" y="291.0" width="53.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.7" y="302.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="445.8" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.37%)</title><rect x="446.8" y="275.0" width="51.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.8" y="286.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.25%)</title><rect x="453.2" y="259.0" width="14.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.62%)</title><rect x="458.4" y="243.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.62%)</title><rect x="458.4" y="227.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.62%)</title><rect x="458.4" y="211.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.4" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.45%)</title><rect x="458.4" y="195.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="463.7" y="195.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.7" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="465.8" y="243.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="465.8" y="227.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="468.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="466.8" y="211.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.71%)</title><rect x="467.9" y="259.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.71%)</title><rect x="467.9" y="243.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.9" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="467.9" y="227.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.9" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="467.9" y="211.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="470.9" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="467.9" y="195.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="470.9" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="468.9" y="179.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="471.9" y="190.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="468.9" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="471.9" y="174.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="468.9" y="147.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="471.9" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.54%)</title><rect x="470.0" y="227.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.54%)</title><rect x="470.0" y="211.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.0" y="222.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.54%)</title><rect x="470.0" y="195.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.0" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="476.3" y="259.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.89%)</title><rect x="477.4" y="259.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.89%)</title><rect x="477.4" y="243.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.89%)</title><rect x="477.4" y="227.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.89%)</title><rect x="477.4" y="211.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.4" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.89%)</title><rect x="477.4" y="195.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.4" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="486.8" y="179.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="489.8" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="486.8" y="163.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="489.8" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="486.8" y="147.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.8" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="486.8" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.8" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="486.8" y="115.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.8" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="486.8" y="99.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="489.8" y="110.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="486.8" y="83.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="489.8" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="486.8" y="67.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="489.8" y="78.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="486.8" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="489.8" y="62.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="486.8" y="35.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="489.8" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.27%)</title><rect x="487.9" y="259.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="487.9" y="243.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="487.9" y="227.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.62%)</title><rect x="491.1" y="259.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="497.4" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.4" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="497.4" y="227.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="500.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="497.4" y="211.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.4" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="497.4" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.09%)</title><rect x="498.4" y="323.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.27%)</title><rect x="499.5" y="323.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.89%)</title><rect x="502.6" y="339.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.89%)</title><rect x="502.6" y="323.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.89%)</title><rect x="502.6" y="307.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.89%)</title><rect x="502.6" y="291.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.89%)</title><rect x="502.6" y="275.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.6" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (304 samples, 27.12%)</title><rect x="513.2" y="435.0" width="320.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.2" y="446.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (59 samples, 5.26%)</title><rect x="514.2" y="419.0" width="62.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="517.2" y="430.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (2 samples, 0.18%)</title><rect x="516.3" y="403.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.3" y="414.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 4.91%)</title><rect x="518.4" y="403.0" width="57.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.4" y="414.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (54 samples, 4.82%)</title><rect x="518.4" y="387.0" width="56.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.4" y="398.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.45%)</title><rect x="520.5" y="371.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="523.5" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.45%)</title><rect x="520.5" y="355.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.5" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.45%)</title><rect x="520.5" y="339.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.5" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.45%)</title><rect x="520.5" y="323.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="525.8" y="371.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="525.8" y="355.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="528.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="525.8" y="339.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="525.8" y="323.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="526.8" y="307.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.8" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (45 samples, 4.01%)</title><rect x="527.9" y="371.0" width="47.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.9" y="382.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (40 samples, 3.57%)</title><rect x="533.2" y="355.0" width="42.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.2" y="366.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.54%)</title><rect x="568.9" y="339.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="575.3" y="387.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.80%)</title><rect x="576.3" y="419.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="579.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.71%)</title><rect x="577.4" y="403.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="580.4" y="414.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.71%)</title><rect x="577.4" y="387.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="580.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (157 samples, 14.01%)</title><rect x="585.8" y="419.0" width="165.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.8" y="430.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.54%)</title><rect x="587.9" y="403.0" width="6.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="590.9" y="414.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="591.1" y="387.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="594.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 13.29%)</title><rect x="594.2" y="403.0" width="156.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.2" y="414.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.73%)</title><rect x="597.4" y="387.0" width="55.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.4" y="398.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 4.55%)</title><rect x="599.5" y="371.0" width="53.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.5" y="382.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 3.12%)</title><rect x="607.9" y="355.0" width="36.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.9" y="366.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 2.14%)</title><rect x="612.1" y="339.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.1" y="350.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 2.14%)</title><rect x="612.1" y="323.0" width="25.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.1" y="334.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 2.14%)</title><rect x="612.1" y="307.0" width="25.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.1" y="318.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.71%)</title><rect x="622.6" y="291.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.27%)</title><rect x="623.7" y="275.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="626.7" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="623.7" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.7" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="624.7" y="259.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="627.7" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="624.7" y="243.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="627.7" y="254.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="624.7" y="227.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="627.7" y="238.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="625.8" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="628.8" y="238.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="626.8" y="275.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.8" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.27%)</title><rect x="627.9" y="275.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.27%)</title><rect x="627.9" y="259.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="630.9" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="627.9" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="630.9" y="254.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="628.9" y="243.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="254.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="630.0" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="633.0" y="254.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.54%)</title><rect x="631.1" y="291.0" width="6.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="634.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.36%)</title><rect x="637.4" y="339.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.4" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="641.6" y="339.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="644.6" y="350.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="643.7" y="339.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="646.7" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.71%)</title><rect x="644.7" y="355.0" width="8.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="647.7" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="653.2" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.2" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="653.2" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.2" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="653.2" y="355.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.2" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="653.2" y="339.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.62%)</title><rect x="654.2" y="387.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.62%)</title><rect x="654.2" y="371.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.2" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="654.2" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.54%)</title><rect x="655.3" y="355.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.3" y="366.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (85 samples, 7.58%)</title><rect x="661.6" y="387.0" width="89.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.6" y="398.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 7.49%)</title><rect x="662.6" y="371.0" width="88.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="665.6" y="382.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.27%)</title><rect x="662.6" y="355.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.27%)</title><rect x="662.6" y="339.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.6" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.27%)</title><rect x="662.6" y="323.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.6" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.27%)</title><rect x="662.6" y="307.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="665.8" y="355.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="665.8" y="339.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="665.8" y="323.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="665.8" y="307.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="665.8" y="291.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.8" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 7.05%)</title><rect x="667.9" y="355.0" width="83.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.9" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (75 samples, 6.69%)</title><rect x="672.1" y="339.0" width="79.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.1" y="350.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 3.84%)</title><rect x="705.8" y="323.0" width="45.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.8" y="334.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.36%)</title><rect x="726.8" y="307.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.25%)</title><rect x="731.1" y="307.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.1" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="744.7" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.7" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="744.7" y="275.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="747.7" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="744.7" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="747.7" y="270.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.45%)</title><rect x="745.8" y="307.0" width="5.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="748.8" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 5.53%)</title><rect x="751.1" y="419.0" width="65.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="754.1" y="430.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (62 samples, 5.53%)</title><rect x="751.1" y="403.0" width="65.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.1" y="414.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="752.1" y="387.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="755.1" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="752.1" y="371.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="752.1" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.1" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="752.1" y="339.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="755.1" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="752.1" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.1" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (34 samples, 3.03%)</title><rect x="753.2" y="387.0" width="35.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.2" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (33 samples, 2.94%)</title><rect x="754.2" y="371.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.2" y="382.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 2.32%)</title><rect x="755.3" y="355.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.3" y="366.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="759.5" y="339.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.5" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="759.5" y="323.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.5" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.36%)</title><rect x="759.5" y="307.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.5" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.36%)</title><rect x="759.5" y="291.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.27%)</title><rect x="760.5" y="275.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.18%)</title><rect x="761.6" y="259.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.6" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.80%)</title><rect x="763.7" y="339.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.7" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.71%)</title><rect x="764.7" y="323.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.7" y="334.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.71%)</title><rect x="764.7" y="307.0" width="8.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="767.7" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="773.2" y="339.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.62%)</title><rect x="775.3" y="339.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.54%)</title><rect x="782.6" y="355.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.45%)</title><rect x="783.7" y="339.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="786.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.36%)</title><rect x="784.7" y="323.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.36%)</title><rect x="784.7" y="307.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.7" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="788.9" y="387.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.9" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="788.9" y="371.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.9" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="788.9" y="355.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.9" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="788.9" y="339.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="791.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="790.0" y="323.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.0" y="334.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="790.0" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="793.0" y="318.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="790.0" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="793.0" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="791.1" y="371.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.1" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="792.1" y="387.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.1" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="792.1" y="371.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="792.1" y="355.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.1" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.98%)</title><rect x="793.2" y="387.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.36%)</title><rect x="800.5" y="371.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.5" y="382.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="801.6" y="355.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="804.6" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="803.7" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.7" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="804.7" y="387.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.7" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="804.7" y="371.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="807.7" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.71%)</title><rect x="807.9" y="387.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.9" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="815.3" y="371.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="818.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="816.3" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.3" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="816.3" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="819.3" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="816.3" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="816.3" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="816.3" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="816.3" y="339.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="819.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="816.3" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="819.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.34%)</title><rect x="817.4" y="419.0" width="15.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="820.4" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="820.5" y="403.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="823.5" y="414.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="820.5" y="387.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="823.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.71%)</title><rect x="824.7" y="403.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.45%)</title><rect x="827.9" y="387.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.9" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1312521034.accept (5 samples, 0.45%)</title><rect x="827.9" y="371.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (5 samples, 0.45%)</title><rect x="827.9" y="355.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.9" y="366.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.45%)</title><rect x="827.9" y="339.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.9" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.45%)</title><rect x="827.9" y="323.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.9" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="828.9" y="307.0" width="4.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="831.9" y="318.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="830.0" y="291.0" width="3.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="833.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="833.2" y="435.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.2" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="833.2" y="419.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1241835093.get$Lambda (1 samples, 0.09%)</title><rect x="833.2" y="403.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.2" y="414.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="833.2" y="387.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="836.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.16%)</title><rect x="834.2" y="435.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="837.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.07%)</title><rect x="835.3" y="419.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="838.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.07%)</title><rect x="835.3" y="403.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1241835093.accept (12 samples, 1.07%)</title><rect x="835.3" y="387.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="838.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (12 samples, 1.07%)</title><rect x="835.3" y="371.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="838.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1485194597.complete (12 samples, 1.07%)</title><rect x="835.3" y="355.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="838.3" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$59 (12 samples, 1.07%)</title><rect x="835.3" y="339.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/42889621.complete (12 samples, 1.07%)</title><rect x="835.3" y="323.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.3" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$73 (12 samples, 1.07%)</title><rect x="835.3" y="307.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="838.3" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 1.07%)</title><rect x="835.3" y="291.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.3" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.07%)</title><rect x="835.3" y="275.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="838.3" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.07%)</title><rect x="835.3" y="259.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.3" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="846.8" y="243.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="849.8" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="846.8" y="227.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.8" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="847.9" y="435.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.9" y="446.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="847.9" y="419.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="850.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.27%)</title><rect x="850.0" y="451.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="853.0" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="851.1" y="435.0" width="2.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="854.1" y="446.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="851.1" y="419.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="854.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.27%)</title><rect x="853.2" y="499.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.27%)</title><rect x="853.2" y="483.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="856.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.27%)</title><rect x="853.2" y="467.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.27%)</title><rect x="853.2" y="451.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="856.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.09%)</title><rect x="855.3" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (247 samples, 22.03%)</title><rect x="856.3" y="499.0" width="260.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.3" y="510.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (245 samples, 21.86%)</title><rect x="858.4" y="483.0" width="257.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.4" y="494.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (222 samples, 19.80%)</title><rect x="881.6" y="467.0" width="233.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.6" y="478.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.69%)</title><rect x="888.9" y="451.0" width="20.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="891.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.36%)</title><rect x="908.9" y="451.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.36%)</title><rect x="908.9" y="435.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (190 samples, 16.95%)</title><rect x="913.2" y="451.0" width="200.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.2" y="462.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (181 samples, 16.15%)</title><rect x="922.6" y="435.0" width="190.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="925.6" y="446.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="933.2" y="419.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.2" y="430.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="935.3" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.3" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="936.3" y="419.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.3" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="937.4" y="419.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.4" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park (158 samples, 14.09%)</title><rect x="938.4" y="419.0" width="166.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="941.4" y="430.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="945.8" y="403.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.8" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 3.03%)</title><rect x="947.9" y="403.0" width="35.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="950.9" y="414.0">Par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (15 samples, 1.34%)</title><rect x="957.4" y="387.0" width="15.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.4" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.45%)</title><rect x="962.6" y="371.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.6" y="382.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="965.8" y="355.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.8" y="366.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 0.45%)</title><rect x="967.9" y="371.0" width="5.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="970.9" y="382.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="973.2" y="387.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.71%)</title><rect x="975.3" y="387.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="983.7" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.7" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.45%)</title><rect x="984.7" y="403.0" width="5.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="987.7" y="414.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.77%)</title><rect x="990.0" y="403.0" width="32.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="993.0" y="414.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 5.17%)</title><rect x="1022.6" y="403.0" width="61.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1025.6" y="414.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.18%)</title><rect x="1083.7" y="403.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1086.7" y="414.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1085.8" y="403.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1088.8" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1086.8" y="403.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1089.8" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.36%)</title><rect x="1087.9" y="403.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1090.9" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.27%)</title><rect x="1092.1" y="403.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1095.1" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.54%)</title><rect x="1095.3" y="403.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.3" y="414.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.27%)</title><rect x="1101.6" y="403.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.6" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.54%)</title><rect x="1104.7" y="419.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1107.7" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1111.1" y="419.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.1" y="430.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.18%)</title><rect x="1113.2" y="451.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="1115.3" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.3" y="478.0"></text>
</g>
<g>
<title>start_thread (70 samples, 6.24%)</title><rect x="1116.3" y="547.0" width="73.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1119.3" y="558.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (70 samples, 6.24%)</title><rect x="1116.3" y="531.0" width="73.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1119.3" y="542.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (28 samples, 2.50%)</title><rect x="1116.3" y="515.0" width="29.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.3" y="526.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (12 samples, 1.07%)</title><rect x="1116.3" y="499.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.3" y="510.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 1.07%)</title><rect x="1116.3" y="483.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.3" y="494.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1116.3" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.3" y="478.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.36%)</title><rect x="1117.4" y="467.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.4" y="478.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.62%)</title><rect x="1121.6" y="467.0" width="7.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1124.6" y="478.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.34%)</title><rect x="1128.9" y="499.0" width="15.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.9" y="510.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="1128.9" y="483.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.9" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1128.9" y="467.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.9" y="478.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1130.0" y="467.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1133.0" y="478.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.45%)</title><rect x="1131.1" y="483.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1131.1" y="467.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="478.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1131.1" y="451.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="462.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1131.1" y="435.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.1" y="446.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1132.1" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.1" y="430.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1132.1" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.1" y="414.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1132.1" y="387.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="398.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1132.1" y="371.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.1" y="382.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1132.1" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="366.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1133.2" y="467.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.2" y="478.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.18%)</title><rect x="1133.2" y="451.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.2" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1135.3" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="462.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1135.3" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.3" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="1136.3" y="483.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.3" y="494.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="1136.3" y="467.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.3" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.62%)</title><rect x="1136.3" y="451.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.3" y="462.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.62%)</title><rect x="1136.3" y="435.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="446.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.62%)</title><rect x="1136.3" y="419.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.3" y="430.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.09%)</title><rect x="1136.3" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.3" y="414.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.54%)</title><rect x="1137.4" y="403.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.4" y="414.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.36%)</title><rect x="1138.4" y="387.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.4" y="398.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.18%)</title><rect x="1140.5" y="371.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.5" y="382.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1141.6" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.6" y="366.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.09%)</title><rect x="1142.6" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.6" y="398.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="1143.7" y="483.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1146.7" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1143.7" y="467.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1146.7" y="478.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1144.7" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.7" y="510.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1144.7" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.7" y="494.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.09%)</title><rect x="1144.7" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.7" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (40 samples, 3.57%)</title><rect x="1145.8" y="515.0" width="42.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="526.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 3.57%)</title><rect x="1145.8" y="499.0" width="42.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="510.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 3.57%)</title><rect x="1145.8" y="483.0" width="42.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="494.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 3.57%)</title><rect x="1145.8" y="467.0" width="42.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.8" y="478.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 3.48%)</title><rect x="1145.8" y="451.0" width="41.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="462.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (39 samples, 3.48%)</title><rect x="1145.8" y="435.0" width="41.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="446.0">Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1145.8" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="430.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1145.8" y="403.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.8" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1145.8" y="387.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.8" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1145.8" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.8" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1145.8" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.8" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1145.8" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1145.8" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1145.8" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.8" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1145.8" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1145.8" y="275.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1145.8" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1145.8" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.8" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1145.8" y="227.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.8" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1145.8" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="222.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1145.8" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="206.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1145.8" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1145.8" y="163.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.8" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1145.8" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1145.8" y="131.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="142.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1145.8" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="126.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1145.8" y="99.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="110.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 2.05%)</title><rect x="1146.8" y="419.0" width="24.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.8" y="430.0">C..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.36%)</title><rect x="1146.8" y="403.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.8" y="414.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.27%)</title><rect x="1146.8" y="387.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.8" y="398.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.18%)</title><rect x="1147.9" y="371.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.9" y="382.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.09%)</title><rect x="1148.9" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.9" y="366.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1150.0" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="398.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.09%)</title><rect x="1150.0" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="382.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.09%)</title><rect x="1150.0" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="366.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1150.0" y="339.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.0" y="350.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1150.0" y="323.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="334.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1151.1" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.1" y="414.0"></text>
</g>
<g>
<title>jmpConNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1151.1" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.1" y="398.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 0.09%)</title><rect x="1151.1" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.1" y="382.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.27%)</title><rect x="1152.1" y="403.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.27%)</title><rect x="1152.1" y="387.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1152.1" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1152.1" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1152.1" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1152.1" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="334.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1152.1" y="307.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="318.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="1153.2" y="371.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.2" y="382.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1154.2" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="366.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1154.2" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="350.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1154.2" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="334.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1154.2" y="307.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.2" y="318.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1154.2" y="291.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="302.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1154.2" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="286.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1154.2" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="270.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1154.2" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.2" y="254.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1155.3" y="403.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1155.3" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1155.3" y="371.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="382.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1155.3" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 1.16%)</title><rect x="1156.3" y="403.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.36%)</title><rect x="1156.3" y="387.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1159.5" y="371.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.27%)</title><rect x="1160.5" y="387.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.5" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1162.6" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1163.7" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.27%)</title><rect x="1164.7" y="387.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="398.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1164.7" y="371.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="382.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.18%)</title><rect x="1165.8" y="371.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.8" y="382.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1167.9" y="387.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="398.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1168.9" y="387.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1171.9" y="398.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1170.0" y="403.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1173.0" y="414.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 1.07%)</title><rect x="1171.1" y="419.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="430.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1171.1" y="403.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.1" y="414.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1171.1" y="387.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.1" y="398.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1171.1" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.1" y="382.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1171.1" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.1" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1171.1" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="350.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1171.1" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="334.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1171.1" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.1" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 0.89%)</title><rect x="1172.1" y="403.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="414.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="398.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1172.1" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.1" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1172.1" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1172.1" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="334.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1172.1" y="307.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1175.1" y="318.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1173.2" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.36%)</title><rect x="1174.2" y="387.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.18%)</title><rect x="1176.3" y="371.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.18%)</title><rect x="1176.3" y="355.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1176.3" y="339.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1177.4" y="339.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1178.4" y="387.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1180.5" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1181.6" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1181.6" y="371.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="1181.6" y="339.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1182.6" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1182.6" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1183.7" y="419.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1183.7" y="403.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1183.7" y="387.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1183.7" y="371.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1183.7" y="355.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1183.7" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.09%)</title><rect x="1183.7" y="323.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1183.7" y="307.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.7" y="355.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1184.7" y="339.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1184.7" y="323.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1184.7" y="307.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1184.7" y="291.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1184.7" y="275.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.7" y="259.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1184.7" y="243.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1184.7" y="227.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1184.7" y="211.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1184.7" y="195.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1184.7" y="179.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.7" y="163.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.7" y="147.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.7" y="131.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.7" y="115.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.7" y="99.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.7" y="83.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.7" y="67.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="78.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1184.7" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.09%)</title><rect x="1184.7" y="35.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1185.8" y="115.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="126.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1185.8" y="99.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1185.8" y="83.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1185.8" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="51.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="62.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="462.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.8" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="446.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.8" y="419.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="430.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.8" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1186.8" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="398.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1186.8" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.8" y="382.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.09%)</title><rect x="1186.8" y="355.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="366.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.09%)</title><rect x="1186.8" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="350.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.09%)</title><rect x="1186.8" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="307.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="318.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.09%)</title><rect x="1186.8" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="302.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="515.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="499.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="510.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.9" y="483.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.9" y="467.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.9" y="451.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.9" y="435.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.9" y="419.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="430.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.09%)</title><rect x="1187.9" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1187.9" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="1187.9" y="355.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.9" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1188.9" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
</g>
</svg>
