<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,139 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="11.0" y="2035.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="11.0" y="2019.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (284 samples, 24.93%)</title><rect x="12.1" y="2035.0" width="294.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.1" y="2046.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="12.1" y="2019.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="2003.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="1987.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="12.1" y="1971.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="12.1" y="1955.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.1" y="1939.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="12.1" y="1923.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="12.1" y="1907.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="12.1" y="1891.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.09%)</title><rect x="12.1" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="12.1" y="1859.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="12.1" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="1854.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="12.1" y="1827.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="15.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (281 samples, 24.67%)</title><rect x="13.1" y="2019.0" width="291.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="2030.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.35%)</title><rect x="13.1" y="2003.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.1" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.35%)</title><rect x="13.1" y="1987.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.1" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="13.1" y="1971.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.09%)</title><rect x="13.1" y="1955.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="13.1" y="1939.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="14.1" y="1971.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.1" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="14.1" y="1955.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="14.1" y="1939.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="14.1" y="1923.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="14.1" y="1907.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="14.1" y="1891.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.1" y="1875.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.1" y="1859.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1815374330.test (1 samples, 0.09%)</title><rect x="14.1" y="1843.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="15.2" y="1891.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="15.2" y="1875.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.2" y="1891.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.2" y="1875.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="16.2" y="1859.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="16.2" y="1843.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1986323414.get (1 samples, 0.09%)</title><rect x="16.2" y="1827.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (9 samples, 0.79%)</title><rect x="17.3" y="2003.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (9 samples, 0.79%)</title><rect x="17.3" y="1987.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.3" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.79%)</title><rect x="17.3" y="1971.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/1113949425.accept (7 samples, 0.61%)</title><rect x="19.3" y="1955.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.61%)</title><rect x="19.3" y="1939.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.61%)</title><rect x="19.3" y="1923.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.3" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.61%)</title><rect x="19.3" y="1907.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (206 samples, 18.09%)</title><rect x="26.6" y="2003.0" width="213.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.6" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/1598685502.accept (199 samples, 17.47%)</title><rect x="27.6" y="1987.0" width="206.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="1998.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (199 samples, 17.47%)</title><rect x="27.6" y="1971.0" width="206.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.6" y="1982.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (170 samples, 14.93%)</title><rect x="27.6" y="1955.0" width="176.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.6" y="1966.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (170 samples, 14.93%)</title><rect x="27.6" y="1939.0" width="176.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.6" y="1950.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (170 samples, 14.93%)</title><rect x="27.6" y="1923.0" width="176.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.6" y="1934.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (170 samples, 14.93%)</title><rect x="27.6" y="1907.0" width="176.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="1918.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (170 samples, 14.93%)</title><rect x="27.6" y="1891.0" width="176.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.6" y="1902.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (170 samples, 14.93%)</title><rect x="27.6" y="1875.0" width="176.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.6" y="1886.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="75.3" y="1859.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 8.96%)</title><rect x="76.3" y="1859.0" width="105.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.3" y="1870.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.40%)</title><rect x="76.3" y="1843.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.40%)</title><rect x="76.3" y="1827.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.40%)</title><rect x="76.3" y="1811.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.53%)</title><rect x="92.9" y="1843.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.53%)</title><rect x="92.9" y="1827.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.35%)</title><rect x="93.9" y="1811.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.9" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.35%)</title><rect x="93.9" y="1795.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="96.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="98.1" y="1811.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 7.02%)</title><rect x="99.1" y="1843.0" width="82.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.1" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 7.02%)</title><rect x="99.1" y="1827.0" width="82.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.1" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 7.02%)</title><rect x="99.1" y="1811.0" width="82.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.1" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 7.02%)</title><rect x="99.1" y="1795.0" width="82.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.1" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 7.02%)</title><rect x="99.1" y="1779.0" width="82.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.1" y="1790.0">sun/misc/..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="99.1" y="1763.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="102.1" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (74 samples, 6.50%)</title><rect x="100.1" y="1763.0" width="76.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="103.1" y="1774.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="103.2" y="1747.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="106.2" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.26%)</title><rect x="105.3" y="1747.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.3" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="108.4" y="1747.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="111.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.60%)</title><rect x="109.5" y="1747.0" width="42.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="112.5" y="1758.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (8 samples, 0.70%)</title><rect x="151.9" y="1747.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="154.9" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.40%)</title><rect x="160.2" y="1747.0" width="16.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="163.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="176.8" y="1763.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="179.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="179.9" y="1763.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="182.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 1.49%)</title><rect x="182.0" y="1859.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (17 samples, 1.49%)</title><rect x="182.0" y="1843.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 1.49%)</title><rect x="182.0" y="1827.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="195.4" y="1811.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="198.4" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="199.6" y="1859.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="202.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="203.7" y="1955.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="203.7" y="1939.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.26%)</title><rect x="204.8" y="1955.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="204.8" y="1939.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="204.8" y="1923.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (25 samples, 2.19%)</title><rect x="207.9" y="1955.0" width="25.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.9" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.11%)</title><rect x="207.9" y="1939.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.9" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.61%)</title><rect x="223.4" y="1923.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="223.4" y="1907.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="223.4" y="1891.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="223.4" y="1875.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="224.5" y="1907.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.44%)</title><rect x="225.5" y="1907.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.5" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="230.7" y="1923.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="233.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="232.7" y="1939.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="235.7" y="1950.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="233.8" y="1987.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="236.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.35%)</title><rect x="235.8" y="1987.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.35%)</title><rect x="235.8" y="1971.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="235.8" y="1955.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="235.8" y="1939.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.8" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.18%)</title><rect x="237.9" y="1923.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.44%)</title><rect x="240.0" y="2003.0" width="64.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.0" y="2014.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.36%)</title><rect x="240.0" y="1987.0" width="63.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.0" y="1998.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.25%)</title><rect x="241.0" y="1971.0" width="38.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.0" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="241.0" y="1955.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="241.0" y="1939.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.16%)</title><rect x="242.1" y="1955.0" width="37.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.1" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.07%)</title><rect x="242.1" y="1939.0" width="36.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.1" y="1950.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.63%)</title><rect x="242.1" y="1923.0" width="31.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.63%)</title><rect x="242.1" y="1907.0" width="31.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.1" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.32%)</title><rect x="243.1" y="1891.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.79%)</title><rect x="249.3" y="1875.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.79%)</title><rect x="249.3" y="1859.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.79%)</title><rect x="249.3" y="1843.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.79%)</title><rect x="249.3" y="1827.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.79%)</title><rect x="249.3" y="1811.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.79%)</title><rect x="249.3" y="1795.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.79%)</title><rect x="249.3" y="1779.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.23%)</title><rect x="258.6" y="1891.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="259.7" y="1875.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.05%)</title><rect x="260.7" y="1875.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.88%)</title><rect x="260.7" y="1859.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.88%)</title><rect x="260.7" y="1843.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.7" y="1854.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="266.9" y="1827.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="269.9" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="268.0" y="1827.0" width="3.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="271.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.18%)</title><rect x="271.1" y="1859.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.18%)</title><rect x="271.1" y="1843.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="273.1" y="1923.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="273.1" y="1907.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.18%)</title><rect x="273.1" y="1891.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.18%)</title><rect x="273.1" y="1875.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="273.1" y="1859.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="273.1" y="1843.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="274.2" y="1859.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="274.2" y="1843.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.09%)</title><rect x="274.2" y="1827.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.2" y="1891.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.2" y="1875.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.2" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="275.2" y="1859.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="278.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="276.3" y="1923.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="276.3" y="1907.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="276.3" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="276.3" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="276.3" y="1859.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="277.3" y="1923.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="278.3" y="1939.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="278.3" y="1923.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="278.3" y="1907.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.3" y="1918.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="278.3" y="1891.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="278.3" y="1875.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.88%)</title><rect x="279.4" y="1971.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.88%)</title><rect x="279.4" y="1955.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.79%)</title><rect x="279.4" y="1939.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="280.4" y="1923.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="280.4" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/964374334.accept (2 samples, 0.18%)</title><rect x="281.4" y="1907.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="281.4" y="1891.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="281.4" y="1875.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="281.4" y="1859.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="281.4" y="1843.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.4" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="281.4" y="1827.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="281.4" y="1811.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="282.5" y="1875.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="282.5" y="1859.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="282.5" y="1843.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.5" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="282.5" y="1827.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="285.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="282.5" y="1811.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.5" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="283.5" y="1923.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="283.5" y="1907.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="283.5" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="283.5" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="283.5" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="283.5" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/1728626238.get (1 samples, 0.09%)</title><rect x="283.5" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="284.5" y="1923.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="284.5" y="1907.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="285.6" y="1923.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="285.6" y="1907.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="286.6" y="1891.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="286.6" y="1875.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="286.6" y="1859.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="286.6" y="1843.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="286.6" y="1827.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="286.6" y="1811.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="286.6" y="1795.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="287.6" y="1891.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.6" y="1902.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="287.6" y="1875.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.6" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.09%)</title><rect x="287.6" y="1859.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.09%)</title><rect x="287.6" y="1843.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="288.7" y="1939.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="288.7" y="1923.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="288.7" y="1907.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="288.7" y="1891.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="288.7" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="288.7" y="1859.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="288.7" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="288.7" y="1827.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="288.7" y="1811.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="288.7" y="1795.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.7" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="288.7" y="1779.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$231/1169676339.apply (1 samples, 0.09%)</title><rect x="288.7" y="1763.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.44%)</title><rect x="289.7" y="1971.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.44%)</title><rect x="289.7" y="1955.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="289.7" y="1939.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="289.7" y="1923.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.correlate (1 samples, 0.09%)</title><rect x="289.7" y="1907.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="289.7" y="1891.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.35%)</title><rect x="290.8" y="1939.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="291.8" y="1923.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.26%)</title><rect x="291.8" y="1907.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.26%)</title><rect x="291.8" y="1891.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.8" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="291.8" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="294.8" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="291.8" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="294.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.18%)</title><rect x="292.8" y="1875.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.18%)</title><rect x="292.8" y="1859.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.18%)</title><rect x="292.8" y="1843.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.8" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.18%)</title><rect x="292.8" y="1827.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.8" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="292.8" y="1811.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="295.8" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="293.9" y="1811.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.61%)</title><rect x="294.9" y="1971.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.61%)</title><rect x="294.9" y="1955.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.9" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="294.9" y="1939.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="1950.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="294.9" y="1923.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="297.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/285906784.accept (2 samples, 0.18%)</title><rect x="295.9" y="1923.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.18%)</title><rect x="295.9" y="1907.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="295.9" y="1891.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="295.9" y="1875.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="295.9" y="1859.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="295.9" y="1843.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="295.9" y="1827.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="297.0" y="1891.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="297.0" y="1875.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="297.0" y="1859.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.09%)</title><rect x="297.0" y="1843.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="298.0" y="1939.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (2 samples, 0.18%)</title><rect x="298.0" y="1923.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (2 samples, 0.18%)</title><rect x="298.0" y="1907.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="298.0" y="1891.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="299.0" y="1891.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="299.0" y="1875.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="300.1" y="1923.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="300.1" y="1907.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="300.1" y="1891.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="300.1" y="1875.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="301.1" y="1939.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="304.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="301.1" y="1923.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.1" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="301.1" y="1907.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.1" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="301.1" y="1891.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.1" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.09%)</title><rect x="301.1" y="1875.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="302.2" y="1971.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="302.2" y="1955.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="302.2" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="302.2" y="1923.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="302.2" y="1907.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="303.2" y="1987.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="304.2" y="2019.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.2" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="304.2" y="2003.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.2" y="2014.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.09%)</title><rect x="305.3" y="2019.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.3" y="2030.0"></text>
</g>
<g>
<title>java/lang/Thread.run (722 samples, 63.39%)</title><rect x="306.3" y="2035.0" width="748.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (722 samples, 63.39%)</title><rect x="306.3" y="2019.0" width="748.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (722 samples, 63.39%)</title><rect x="306.3" y="2003.0" width="748.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/584035364.run (480 samples, 42.14%)</title><rect x="308.4" y="1987.0" width="497.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.4" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (480 samples, 42.14%)</title><rect x="308.4" y="1971.0" width="497.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.4" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (480 samples, 42.14%)</title><rect x="308.4" y="1955.0" width="497.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.4" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (473 samples, 41.53%)</title><rect x="308.4" y="1939.0" width="490.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.4" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="327.0" y="1923.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="330.0" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.70%)</title><rect x="329.1" y="1923.0" width="8.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="332.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="331.2" y="1907.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="334.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (145 samples, 12.73%)</title><rect x="337.4" y="1923.0" width="150.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="340.4" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (144 samples, 12.64%)</title><rect x="338.4" y="1907.0" width="149.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="341.4" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (144 samples, 12.64%)</title><rect x="338.4" y="1891.0" width="149.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.4" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 12.64%)</title><rect x="338.4" y="1875.0" width="149.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.4" y="1886.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 12.64%)</title><rect x="338.4" y="1859.0" width="149.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="341.4" y="1870.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 12.64%)</title><rect x="338.4" y="1843.0" width="149.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.4" y="1854.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (30 samples, 2.63%)</title><rect x="340.5" y="1827.0" width="31.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.5" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.63%)</title><rect x="340.5" y="1811.0" width="31.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.5" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (30 samples, 2.63%)</title><rect x="340.5" y="1795.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.5" y="1806.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="340.5" y="1779.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="340.5" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="343.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="340.5" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="343.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="340.5" y="1731.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="343.5" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="340.5" y="1715.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="343.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (28 samples, 2.46%)</title><rect x="341.5" y="1779.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.5" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (28 samples, 2.46%)</title><rect x="341.5" y="1763.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.5" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="370.5" y="1779.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="370.5" y="1763.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="370.5" y="1747.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="370.5" y="1731.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="370.5" y="1715.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="370.5" y="1699.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 8.43%)</title><rect x="371.6" y="1827.0" width="99.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.6" y="1838.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.26%)</title><rect x="371.6" y="1811.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.26%)</title><rect x="371.6" y="1795.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.26%)</title><rect x="371.6" y="1779.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.26%)</title><rect x="371.6" y="1763.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="371.6" y="1747.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="371.6" y="1731.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.09%)</title><rect x="371.6" y="1715.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.18%)</title><rect x="372.6" y="1747.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="374.7" y="1811.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="377.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="374.7" y="1795.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="376.7" y="1779.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.88%)</title><rect x="377.8" y="1811.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.88%)</title><rect x="377.8" y="1795.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.79%)</title><rect x="378.8" y="1779.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.70%)</title><rect x="379.9" y="1763.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.9" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="385.0" y="1747.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="388.0" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="385.0" y="1731.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="388.0" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="385.0" y="1715.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="388.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="386.1" y="1747.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.53%)</title><rect x="388.1" y="1811.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.53%)</title><rect x="388.1" y="1795.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.53%)</title><rect x="388.1" y="1779.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.53%)</title><rect x="388.1" y="1763.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.35%)</title><rect x="390.2" y="1747.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 6.50%)</title><rect x="394.4" y="1811.0" width="76.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.4" y="1822.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.49%)</title><rect x="394.4" y="1795.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.61%)</title><rect x="395.4" y="1779.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.61%)</title><rect x="395.4" y="1763.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.61%)</title><rect x="395.4" y="1747.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.61%)</title><rect x="395.4" y="1731.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.26%)</title><rect x="399.5" y="1715.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.70%)</title><rect x="402.6" y="1779.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="405.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.35%)</title><rect x="402.6" y="1763.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="405.8" y="1747.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="406.8" y="1763.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="406.8" y="1747.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.18%)</title><rect x="408.9" y="1731.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.18%)</title><rect x="408.9" y="1715.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="410.9" y="1779.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="410.9" y="1763.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (57 samples, 5.00%)</title><rect x="412.0" y="1795.0" width="59.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.0" y="1806.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (57 samples, 5.00%)</title><rect x="412.0" y="1779.0" width="59.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.0" y="1790.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 4.65%)</title><rect x="416.1" y="1763.0" width="54.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.1" y="1774.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.93%)</title><rect x="427.5" y="1747.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="430.5" y="1758.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.70%)</title><rect x="433.7" y="1731.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="436.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.70%)</title><rect x="433.7" y="1715.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.70%)</title><rect x="433.7" y="1699.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.61%)</title><rect x="434.8" y="1683.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.53%)</title><rect x="434.8" y="1667.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="437.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (6 samples, 0.53%)</title><rect x="434.8" y="1651.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="437.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.26%)</title><rect x="437.9" y="1635.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.09%)</title><rect x="441.0" y="1667.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.35%)</title><rect x="442.0" y="1731.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="442.0" y="1715.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="442.0" y="1699.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="446.2" y="1731.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="449.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="446.2" y="1715.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="449.3" y="1699.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.44%)</title><rect x="450.3" y="1747.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.44%)</title><rect x="450.3" y="1731.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="450.3" y="1715.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="450.3" y="1699.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.44%)</title><rect x="450.3" y="1683.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.79%)</title><rect x="455.5" y="1747.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.79%)</title><rect x="455.5" y="1731.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.79%)</title><rect x="455.5" y="1715.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.79%)</title><rect x="455.5" y="1699.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.79%)</title><rect x="455.5" y="1683.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.5" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="455.5" y="1667.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="458.5" y="1678.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="455.5" y="1651.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="458.5" y="1662.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="455.5" y="1635.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="458.5" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.61%)</title><rect x="456.5" y="1667.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="460.7" y="1651.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.7" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.18%)</title><rect x="461.7" y="1651.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.7" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.09%)</title><rect x="463.8" y="1667.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.53%)</title><rect x="464.8" y="1747.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.8" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.53%)</title><rect x="464.8" y="1731.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.8" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.53%)</title><rect x="464.8" y="1715.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (16 samples, 1.40%)</title><rect x="471.0" y="1827.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (16 samples, 1.40%)</title><rect x="471.0" y="1811.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (16 samples, 1.40%)</title><rect x="471.0" y="1795.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (16 samples, 1.40%)</title><rect x="471.0" y="1779.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (16 samples, 1.40%)</title><rect x="471.0" y="1763.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.09%)</title><rect x="480.3" y="1747.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.26%)</title><rect x="481.4" y="1747.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.26%)</title><rect x="484.5" y="1747.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.5" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (274 samples, 24.06%)</title><rect x="487.6" y="1923.0" width="283.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.6" y="1934.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (48 samples, 4.21%)</title><rect x="488.6" y="1907.0" width="49.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.6" y="1918.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 4.21%)</title><rect x="488.6" y="1891.0" width="49.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.6" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 4.04%)</title><rect x="490.7" y="1875.0" width="47.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.7" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.88%)</title><rect x="491.7" y="1859.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="493.8" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="493.8" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.61%)</title><rect x="494.8" y="1843.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.61%)</title><rect x="494.8" y="1827.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.61%)</title><rect x="494.8" y="1811.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="497.8" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (3 samples, 0.26%)</title><rect x="502.1" y="1859.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.26%)</title><rect x="502.1" y="1843.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.35%)</title><rect x="505.2" y="1859.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="506.2" y="1843.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="506.2" y="1827.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="509.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="508.3" y="1811.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.09%)</title><rect x="508.3" y="1795.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.3" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (28 samples, 2.46%)</title><rect x="509.4" y="1859.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.4" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 1.93%)</title><rect x="515.6" y="1843.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.6" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.18%)</title><rect x="515.6" y="1827.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (20 samples, 1.76%)</title><rect x="517.6" y="1827.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.79%)</title><rect x="538.4" y="1907.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.61%)</title><rect x="540.4" y="1891.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="543.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.61%)</title><rect x="540.4" y="1875.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (131 samples, 11.50%)</title><rect x="547.7" y="1907.0" width="135.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.7" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (131 samples, 11.50%)</title><rect x="547.7" y="1891.0" width="135.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.7" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="557.0" y="1875.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="560.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="557.0" y="1859.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="560.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 3.95%)</title><rect x="560.1" y="1875.0" width="46.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.1" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.37%)</title><rect x="572.5" y="1859.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.5" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.37%)</title><rect x="572.5" y="1843.0" width="28.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="575.5" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 1.14%)</title><rect x="582.9" y="1827.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (13 samples, 1.14%)</title><rect x="582.9" y="1811.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 1.14%)</title><rect x="582.9" y="1795.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.61%)</title><rect x="583.9" y="1779.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="586.9" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="583.9" y="1763.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="586.9" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="583.9" y="1747.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="586.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="583.9" y="1731.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="586.9" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="583.9" y="1715.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="586.9" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="585.0" y="1763.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="588.0" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.44%)</title><rect x="586.0" y="1763.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="589.0" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="588.1" y="1747.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.1" y="1758.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (2 samples, 0.18%)</title><rect x="588.1" y="1731.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="591.1" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="590.2" y="1731.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="593.2" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="591.2" y="1779.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="594.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="596.4" y="1827.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="599.4" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="598.4" y="1827.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="601.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="600.5" y="1859.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="600.5" y="1843.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.5" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="600.5" y="1827.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="603.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="600.5" y="1811.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="603.5" y="1822.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="601.6" y="1859.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="604.6" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="603.6" y="1859.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="606.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.05%)</title><rect x="606.7" y="1875.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="606.7" y="1859.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="606.7" y="1843.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="606.7" y="1827.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.97%)</title><rect x="607.8" y="1859.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.97%)</title><rect x="607.8" y="1843.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.8" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (62 samples, 5.44%)</title><rect x="619.2" y="1875.0" width="64.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.2" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (62 samples, 5.44%)</title><rect x="619.2" y="1859.0" width="64.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.2" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.44%)</title><rect x="619.2" y="1843.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.44%)</title><rect x="619.2" y="1827.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="622.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.44%)</title><rect x="619.2" y="1811.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.44%)</title><rect x="619.2" y="1795.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="624.3" y="1843.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="624.3" y="1827.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="624.3" y="1811.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="624.3" y="1795.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="624.3" y="1779.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (55 samples, 4.83%)</title><rect x="626.4" y="1843.0" width="57.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="629.4" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (51 samples, 4.48%)</title><rect x="630.6" y="1827.0" width="52.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.6" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (28 samples, 2.46%)</title><rect x="654.4" y="1811.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.4" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="672.0" y="1795.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="675.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.61%)</title><rect x="675.1" y="1795.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.1" y="1806.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="682.4" y="1795.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="685.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 5.36%)</title><rect x="683.4" y="1907.0" width="63.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.4" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (61 samples, 5.36%)</title><rect x="683.4" y="1891.0" width="63.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.4" y="1902.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (27 samples, 2.37%)</title><rect x="686.5" y="1875.0" width="28.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="689.5" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (27 samples, 2.37%)</title><rect x="686.5" y="1859.0" width="28.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.5" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 2.02%)</title><rect x="686.5" y="1843.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.5" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="686.5" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.5" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="686.5" y="1811.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="686.5" y="1795.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="689.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="686.5" y="1779.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.70%)</title><rect x="687.5" y="1827.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="690.5" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="689.6" y="1811.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="692.6" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="689.6" y="1795.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.6" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.44%)</title><rect x="690.6" y="1811.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.6" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="690.6" y="1795.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="693.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="695.8" y="1827.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.05%)</title><rect x="697.9" y="1827.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.35%)</title><rect x="710.3" y="1843.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="713.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="711.4" y="1827.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="714.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="712.4" y="1811.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="715.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="712.4" y="1795.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$284/386602741.complete (1 samples, 0.09%)</title><rect x="714.5" y="1875.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$73 (1 samples, 0.09%)</title><rect x="714.5" y="1859.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="714.5" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.5" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="714.5" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="714.5" y="1811.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="717.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="715.5" y="1875.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="715.5" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="718.5" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="715.5" y="1843.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="715.5" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="718.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="715.5" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.5" y="1822.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="715.5" y="1795.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="718.5" y="1806.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="715.5" y="1779.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.18%)</title><rect x="716.5" y="1859.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (14 samples, 1.23%)</title><rect x="718.6" y="1875.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.35%)</title><rect x="729.0" y="1859.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="729.0" y="1843.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="732.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.26%)</title><rect x="730.0" y="1843.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.44%)</title><rect x="733.1" y="1875.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.44%)</title><rect x="733.1" y="1859.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (2 samples, 0.18%)</title><rect x="736.2" y="1843.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.70%)</title><rect x="738.3" y="1875.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="743.5" y="1859.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="746.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="745.6" y="1843.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.6" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="745.6" y="1827.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="748.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="745.6" y="1811.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.6" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="745.6" y="1795.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.11%)</title><rect x="746.6" y="1907.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.6" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.11%)</title><rect x="746.6" y="1891.0" width="24.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.6" y="1902.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="757.0" y="1875.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="760.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="757.0" y="1859.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="760.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.88%)</title><rect x="761.1" y="1875.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/1843666253.accept (10 samples, 0.88%)</title><rect x="761.1" y="1859.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="764.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (10 samples, 0.88%)</title><rect x="761.1" y="1843.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="761.1" y="1827.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.1" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="761.1" y="1811.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.1" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="761.1" y="1795.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.1" y="1806.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.79%)</title><rect x="762.1" y="1827.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.1" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.79%)</title><rect x="762.1" y="1811.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="765.1" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="766.3" y="1795.0" width="5.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="769.3" y="1806.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="766.3" y="1779.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="769.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.40%)</title><rect x="771.5" y="1923.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.40%)</title><rect x="771.5" y="1907.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="772.5" y="1891.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="775.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="772.5" y="1875.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="775.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="772.5" y="1859.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.5" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="772.5" y="1843.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.5" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="772.5" y="1827.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="775.5" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="773.5" y="1827.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="776.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="774.6" y="1891.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.05%)</title><rect x="775.6" y="1891.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="778.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/1843666253.accept (3 samples, 0.26%)</title><rect x="775.6" y="1875.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (3 samples, 0.26%)</title><rect x="775.6" y="1859.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.26%)</title><rect x="775.6" y="1843.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.6" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.26%)</title><rect x="775.6" y="1827.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.6" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.26%)</title><rect x="775.6" y="1811.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/686198421.accept (9 samples, 0.79%)</title><rect x="778.7" y="1875.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (9 samples, 0.79%)</title><rect x="778.7" y="1859.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1485194597.complete (9 samples, 0.79%)</title><rect x="778.7" y="1843.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (9 samples, 0.79%)</title><rect x="778.7" y="1827.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/42889621.complete (9 samples, 0.79%)</title><rect x="778.7" y="1811.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="781.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (9 samples, 0.79%)</title><rect x="778.7" y="1795.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (9 samples, 0.79%)</title><rect x="778.7" y="1779.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.7" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.79%)</title><rect x="778.7" y="1763.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.7" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.79%)</title><rect x="778.7" y="1747.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.7" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.79%)</title><rect x="778.7" y="1731.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.7" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.79%)</title><rect x="788.0" y="1923.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="791.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.79%)</title><rect x="788.0" y="1907.0" width="9.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="791.0" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="797.4" y="1923.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="800.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (7 samples, 0.61%)</title><rect x="798.4" y="1939.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.4" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="801.5" y="1923.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="804.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="801.5" y="1907.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="804.5" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="804.6" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="807.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="805.6" y="1987.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.44%)</title><rect x="806.7" y="1987.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.44%)</title><rect x="806.7" y="1971.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.44%)</title><rect x="806.7" y="1955.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.44%)</title><rect x="806.7" y="1939.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 20.54%)</title><rect x="811.9" y="1987.0" width="242.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.9" y="1998.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 20.54%)</title><rect x="811.9" y="1971.0" width="242.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.9" y="1982.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 18.26%)</title><rect x="813.9" y="1955.0" width="215.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.9" y="1966.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.09%)</title><rect x="828.4" y="1939.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="831.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="828.4" y="1923.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 1.23%)</title><rect x="829.5" y="1939.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (15 samples, 1.32%)</title><rect x="844.0" y="1939.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.32%)</title><rect x="844.0" y="1923.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.32%)</title><rect x="844.0" y="1907.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.32%)</title><rect x="844.0" y="1891.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 14.40%)</title><rect x="859.5" y="1939.0" width="169.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.5" y="1950.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 14.31%)</title><rect x="860.6" y="1923.0" width="168.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="863.6" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="861.6" y="1907.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.6" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="862.6" y="1907.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="865.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (154 samples, 13.52%)</title><rect x="865.7" y="1907.0" width="159.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="868.7" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 2.11%)</title><rect x="870.9" y="1891.0" width="24.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.9" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.70%)</title><rect x="878.2" y="1875.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="880.2" y="1859.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="880.2" y="1843.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.2" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.26%)</title><rect x="883.3" y="1859.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.3" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.70%)</title><rect x="886.5" y="1875.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.5" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="894.7" y="1875.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="897.7" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 0.44%)</title><rect x="895.8" y="1891.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.8" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="901.0" y="1891.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="904.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.79%)</title><rect x="902.0" y="1891.0" width="9.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="905.0" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.34%)</title><rect x="911.3" y="1891.0" width="39.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="914.3" y="1902.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (46 samples, 4.04%)</title><rect x="950.7" y="1891.0" width="47.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="953.7" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="998.3" y="1891.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1001.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1001.4" y="1891.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1004.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.53%)</title><rect x="1002.5" y="1891.0" width="6.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1005.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1008.7" y="1891.0" width="4.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1011.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.44%)</title><rect x="1012.8" y="1891.0" width="5.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1015.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="1018.0" y="1891.0" width="2.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1021.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1020.1" y="1891.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.1" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="1021.1" y="1891.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.1" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="1023.2" y="1891.0" width="2.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1026.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1025.3" y="1907.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1028.3" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1028.4" y="1907.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 2.11%)</title><rect x="1029.4" y="1955.0" width="24.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1032.4" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.11%)</title><rect x="1029.4" y="1939.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 2.11%)</title><rect x="1029.4" y="1923.0" width="24.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1032.4" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 2.11%)</title><rect x="1029.4" y="1907.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.4" y="1918.0">j..</text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.09%)</title><rect x="1054.3" y="2035.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1057.3" y="2046.0"></text>
</g>
<g>
<title>start_thread (130 samples, 11.41%)</title><rect x="1055.3" y="2035.0" width="134.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1058.3" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (130 samples, 11.41%)</title><rect x="1055.3" y="2019.0" width="134.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1058.3" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.28%)</title><rect x="1055.3" y="2003.0" width="27.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.3" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.61%)</title><rect x="1055.3" y="1987.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.61%)</title><rect x="1055.3" y="1971.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.3" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1055.3" y="1955.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.3" y="1966.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.53%)</title><rect x="1056.4" y="1955.0" width="6.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1059.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.58%)</title><rect x="1062.6" y="1987.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.6" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.26%)</title><rect x="1062.6" y="1971.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.6" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1062.6" y="1955.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1064.6" y="1955.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1067.6" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.70%)</title><rect x="1065.7" y="1971.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.7" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1065.7" y="1955.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1066.7" y="1955.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.7" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1066.7" y="1939.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.7" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1066.7" y="1923.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.7" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1066.7" y="1907.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.7" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1067.8" y="1939.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.8" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1067.8" y="1923.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.8" y="1934.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1067.8" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.8" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="1067.8" y="1891.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.8" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.44%)</title><rect x="1068.8" y="1955.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.44%)</title><rect x="1068.8" y="1939.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.8" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.61%)</title><rect x="1074.0" y="1971.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.0" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.61%)</title><rect x="1074.0" y="1955.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.0" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.53%)</title><rect x="1074.0" y="1939.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.0" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.53%)</title><rect x="1074.0" y="1923.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.0" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.53%)</title><rect x="1074.0" y="1907.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.0" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.44%)</title><rect x="1075.0" y="1891.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.0" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.44%)</title><rect x="1075.0" y="1875.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.0" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.26%)</title><rect x="1075.0" y="1859.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.0" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1077.1" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.1" y="1854.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1078.1" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1079.1" y="1859.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.1" y="1870.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1079.1" y="1843.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.1" y="1854.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1080.2" y="1939.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1080.2" y="1923.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.2" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1080.2" y="1907.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.2" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="1080.2" y="1891.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.2" y="1902.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1081.2" y="1987.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.2" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1081.2" y="1971.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.2" y="1982.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.09%)</title><rect x="1081.2" y="1955.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1084.2" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (102 samples, 8.96%)</title><rect x="1082.3" y="2003.0" width="105.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.3" y="2014.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (102 samples, 8.96%)</title><rect x="1082.3" y="1987.0" width="105.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.3" y="1998.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (102 samples, 8.96%)</title><rect x="1082.3" y="1971.0" width="105.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.3" y="1982.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (100 samples, 8.78%)</title><rect x="1082.3" y="1955.0" width="103.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.3" y="1966.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (100 samples, 8.78%)</title><rect x="1082.3" y="1939.0" width="103.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.3" y="1950.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (100 samples, 8.78%)</title><rect x="1082.3" y="1923.0" width="103.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.3" y="1934.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 4.21%)</title><rect x="1082.3" y="1907.0" width="49.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.3" y="1918.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1082.3" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.3" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1082.3" y="1875.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.3" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.09%)</title><rect x="1082.3" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.3" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.35%)</title><rect x="1083.3" y="1891.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.18%)</title><rect x="1083.3" y="1875.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.3" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1084.3" y="1859.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1085.4" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1085.4" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.4" y="1870.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1086.4" y="1875.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 0.09%)</title><rect x="1087.4" y="1891.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.4" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1087.4" y="1875.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1090.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.53%)</title><rect x="1088.5" y="1891.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.5" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="1088.5" y="1875.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="1886.0"></text>
</g>
<g>
<title>MemBarStoreStoreNode::Opcode() const (1 samples, 0.09%)</title><rect x="1089.5" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.35%)</title><rect x="1090.5" y="1875.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.18%)</title><rect x="1090.5" y="1859.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.09%)</title><rect x="1092.6" y="1859.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1093.7" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.7" y="1870.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1094.7" y="1891.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.7" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.09%)</title><rect x="1094.7" y="1875.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.18%)</title><rect x="1095.7" y="1891.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.18%)</title><rect x="1095.7" y="1875.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1095.7" y="1859.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1095.7" y="1843.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.7" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1096.8" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.8" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1096.8" y="1827.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.8" y="1838.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1096.8" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.8" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1096.8" y="1795.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.8" y="1806.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 2.90%)</title><rect x="1097.8" y="1891.0" width="34.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.8" y="1902.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1098.8" y="1875.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1099.9" y="1875.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.18%)</title><rect x="1099.9" y="1859.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1099.9" y="1843.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1101.9" y="1859.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1103.0" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1103.0" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.44%)</title><rect x="1104.0" y="1875.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.0" y="1886.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.09%)</title><rect x="1108.2" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.44%)</title><rect x="1109.2" y="1875.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1112.3" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1113.3" y="1859.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1114.4" y="1875.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1114.4" y="1859.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.4" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1114.4" y="1843.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1115.4" y="1875.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.4" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1117.5" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1118.5" y="1875.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1119.6" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1120.6" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1120.6" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="1120.6" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.35%)</title><rect x="1121.6" y="1875.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.35%)</title><rect x="1121.6" y="1859.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1125.8" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1125.8" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1126.8" y="1875.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.8" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1128.9" y="1875.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1131.9" y="1886.0"></text>
</g>
<g>
<title>addL_rReg_immNode::two_adr() const (1 samples, 0.09%)</title><rect x="1129.9" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.9" y="1886.0"></text>
</g>
<g>
<title>xorL_rRegNode::cisc_operand() const (1 samples, 0.09%)</title><rect x="1130.9" y="1875.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.9" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (45 samples, 3.95%)</title><rect x="1132.0" y="1907.0" width="46.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.0" y="1918.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1132.0" y="1891.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1132.0" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.09%)</title><rect x="1132.0" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.09%)</title><rect x="1132.0" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.0" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="1132.0" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1132.0" y="1811.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.0" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.09%)</title><rect x="1132.0" y="1795.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.0" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.09%)</title><rect x="1132.0" y="1779.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.0" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.0" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.0" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1132.0" y="1747.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1132.0" y="1731.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1132.0" y="1715.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="1726.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1132.0" y="1699.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.09%)</title><rect x="1132.0" y="1683.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.0" y="1694.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass*) (1 samples, 0.09%)</title><rect x="1132.0" y="1667.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.0" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.18%)</title><rect x="1133.0" y="1891.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.0" y="1902.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1134.1" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.1" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1134.1" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.1" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1134.1" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1134.1" y="1827.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (32 samples, 2.81%)</title><rect x="1135.1" y="1891.0" width="33.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.1" y="1902.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="1875.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.1" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="1843.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.1" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.1" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="1811.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1135.1" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1135.1" y="1779.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.1" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1136.1" y="1875.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1138.2" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (23 samples, 2.02%)</title><rect x="1139.2" y="1875.0" width="23.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="1886.0">P..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="1140.3" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.3" y="1870.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1140.3" y="1843.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.3" y="1854.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1140.3" y="1827.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1143.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 1.84%)</title><rect x="1141.3" y="1859.0" width="21.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="1870.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1142.3" y="1843.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.49%)</title><rect x="1144.4" y="1843.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1160.0" y="1827.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.09%)</title><rect x="1162.0" y="1843.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1163.1" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1164.1" y="1875.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.1" y="1886.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.09%)</title><rect x="1165.1" y="1859.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1166.2" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="1870.0"></text>
</g>
<g>
<title>StoreINode::Opcode() const (1 samples, 0.09%)</title><rect x="1166.2" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1167.2" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1167.2" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.2" y="1870.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.2" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1167.2" y="1827.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.2" y="1838.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.2" y="1822.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1795.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="1806.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.09%)</title><rect x="1167.2" y="1779.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.61%)</title><rect x="1168.2" y="1891.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.61%)</title><rect x="1168.2" y="1875.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.3" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.3" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.3" y="1843.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.3" y="1827.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.3" y="1811.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.3" y="1859.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1170.3" y="1843.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1170.3" y="1827.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1171.4" y="1859.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.4" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1172.4" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1173.4" y="1859.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.4" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.18%)</title><rect x="1173.4" y="1843.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.4" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1173.4" y="1827.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1173.4" y="1811.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1173.4" y="1795.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.4" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1779.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1763.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1747.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1731.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1715.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1699.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1683.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1667.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1651.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1635.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1619.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1603.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1587.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1571.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1555.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1539.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1523.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.4" y="1507.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1491.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="1779.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="1763.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1175.5" y="1891.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1175.5" y="1875.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="1843.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.18%)</title><rect x="1176.5" y="1891.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.5" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1178.6" y="1907.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1178.6" y="1891.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.61%)</title><rect x="1178.6" y="1875.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.61%)</title><rect x="1178.6" y="1859.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1178.6" y="1843.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1178.6" y="1827.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1178.6" y="1811.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1178.6" y="1795.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.61%)</title><rect x="1178.6" y="1779.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.61%)</title><rect x="1178.6" y="1763.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1178.6" y="1747.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1178.6" y="1731.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1178.6" y="1715.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1178.6" y="1699.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.53%)</title><rect x="1178.6" y="1683.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.53%)</title><rect x="1178.6" y="1667.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.53%)</title><rect x="1178.6" y="1651.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1178.6" y="1635.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1178.6" y="1619.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1178.6" y="1603.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1178.6" y="1587.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1178.6" y="1571.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1178.6" y="1555.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1178.6" y="1539.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1178.6" y="1523.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1178.6" y="1507.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1178.6" y="1491.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1178.6" y="1475.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1178.6" y="1459.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="1443.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="1427.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="1411.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="1395.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="1379.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="1363.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="1347.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="1315.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="1299.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="1283.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="1267.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="1251.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="1235.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="1219.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="1123.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="1054.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.6" y="1027.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="1022.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.09%)</title><rect x="1178.6" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="1006.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="979.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="990.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="958.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1178.6" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="942.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="1443.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1454.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1179.6" y="1427.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1438.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1179.6" y="1411.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1182.6" y="1422.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.7" y="1523.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1507.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="1491.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="1475.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="1459.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="1443.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="1427.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="1395.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="1379.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="1363.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="1347.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="1331.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1315.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1299.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="1251.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="1235.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="1219.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="1187.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="1171.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="1155.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="1059.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="1507.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="1518.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1181.7" y="1491.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1502.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="1475.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="1486.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="1459.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="1470.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="1571.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="1582.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1603.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1587.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1571.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1555.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1539.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1523.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1507.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1491.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1475.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1459.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1443.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1427.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1411.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1395.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1379.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1363.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1347.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1331.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1299.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1267.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1251.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1235.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1187.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1155.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="819.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1183.8" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1183.8" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1183.8" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1731.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1742.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1715.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="1726.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="1699.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="1710.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1184.8" y="1683.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="1694.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1184.8" y="1667.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="1678.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1184.8" y="1651.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="1662.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1184.8" y="1635.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1646.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1619.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="1630.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1184.8" y="1603.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="1614.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1184.8" y="1587.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1598.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.18%)</title><rect x="1185.9" y="1955.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.18%)</title><rect x="1185.9" y="1939.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.18%)</title><rect x="1185.9" y="1923.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.18%)</title><rect x="1185.9" y="1907.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="1185.9" y="1891.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1186.9" y="1891.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.9" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="2003.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="1987.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.9" y="1971.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.9" y="1955.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.9" y="1939.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.9" y="1923.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.9" y="1907.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1918.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::clear(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="1891.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.9" y="1902.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::zero_bottom_entry_raw() (1 samples, 0.09%)</title><rect x="1187.9" y="1875.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="1886.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used_region() const (1 samples, 0.09%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
</g>
</svg>
