<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (295 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 9.49%)</title><rect x="10.0" y="1091.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.34%)</title><rect x="10.0" y="1075.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.34%)</title><rect x="10.0" y="1059.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.34%)</title><rect x="10.0" y="1043.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.34%)</title><rect x="10.0" y="1027.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="10.0" y="1011.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="995.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="979.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="10.0" y="963.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="10.0" y="947.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$86/349452154.get$Lambda (1 samples, 0.34%)</title><rect x="10.0" y="931.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (27 samples, 9.15%)</title><rect x="14.0" y="1075.0" width="108.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="1086.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.34%)</title><rect x="18.0" y="1059.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="18.0" y="1043.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.68%)</title><rect x="22.0" y="1059.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="1070.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.34%)</title><rect x="22.0" y="1043.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.34%)</title><rect x="26.0" y="1043.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.0" y="1054.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.34%)</title><rect x="26.0" y="1027.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.68%)</title><rect x="30.0" y="1059.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.68%)</title><rect x="30.0" y="1043.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.68%)</title><rect x="30.0" y="1027.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/1649181109.accept (2 samples, 0.68%)</title><rect x="30.0" y="1011.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.68%)</title><rect x="30.0" y="995.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.68%)</title><rect x="30.0" y="979.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.0" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.68%)</title><rect x="30.0" y="963.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.05%)</title><rect x="38.0" y="1059.0" width="36.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.0" y="1070.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/1356205958.accept (9 samples, 3.05%)</title><rect x="38.0" y="1043.0" width="36.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.0" y="1054.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (9 samples, 3.05%)</title><rect x="38.0" y="1027.0" width="36.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.0" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.36%)</title><rect x="38.0" y="1011.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.36%)</title><rect x="38.0" y="995.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.36%)</title><rect x="38.0" y="979.0" width="16.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.36%)</title><rect x="38.0" y="963.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.36%)</title><rect x="38.0" y="947.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.34%)</title><rect x="46.0" y="931.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.0" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="50.0" y="931.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="53.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.34%)</title><rect x="54.0" y="1011.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="54.0" y="995.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="54.0" y="979.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (4 samples, 1.36%)</title><rect x="58.0" y="1011.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.36%)</title><rect x="58.0" y="995.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.34%)</title><rect x="66.0" y="979.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.0" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.34%)</title><rect x="66.0" y="963.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.0" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.34%)</title><rect x="66.0" y="947.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.0" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="66.0" y="931.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.0" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="70.0" y="979.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="73.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.07%)</title><rect x="74.0" y="1059.0" width="48.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.0" y="1070.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.07%)</title><rect x="74.0" y="1043.0" width="48.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.0" y="1054.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.37%)</title><rect x="74.0" y="1027.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.0" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.34%)</title><rect x="74.0" y="1011.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.0" y="1022.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.34%)</title><rect x="74.0" y="995.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="77.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.36%)</title><rect x="78.0" y="1011.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.36%)</title><rect x="78.0" y="995.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.02%)</title><rect x="78.0" y="979.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.34%)</title><rect x="78.0" y="963.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.34%)</title><rect x="78.0" y="947.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.34%)</title><rect x="82.0" y="963.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="86.0" y="963.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="86.0" y="947.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.34%)</title><rect x="86.0" y="931.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="86.0" y="915.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.0" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.34%)</title><rect x="86.0" y="899.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.0" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.34%)</title><rect x="86.0" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.0" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.34%)</title><rect x="86.0" y="867.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.0" y="878.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.34%)</title><rect x="86.0" y="851.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="89.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/1259063292.shouldBlock (1 samples, 0.34%)</title><rect x="90.0" y="979.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.34%)</title><rect x="90.0" y="963.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.34%)</title><rect x="90.0" y="947.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.34%)</title><rect x="90.0" y="931.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="90.0" y="915.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="90.0" y="899.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="90.0" y="883.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="90.0" y="867.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="90.0" y="851.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.34%)</title><rect x="90.0" y="835.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.34%)</title><rect x="90.0" y="819.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.34%)</title><rect x="90.0" y="803.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.34%)</title><rect x="90.0" y="787.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/39531799.test (1 samples, 0.34%)</title><rect x="90.0" y="771.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.0" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.34%)</title><rect x="90.0" y="755.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.0" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.34%)</title><rect x="90.0" y="739.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.0" y="750.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="90.0" y="723.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.0" y="734.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="90.0" y="707.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="93.0" y="718.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.34%)</title><rect x="90.0" y="691.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="93.0" y="702.0"></text>
</g>
<g>
<title>Method::compute_has_loops_flag() (1 samples, 0.34%)</title><rect x="90.0" y="675.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="93.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.68%)</title><rect x="94.0" y="1011.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.68%)</title><rect x="94.0" y="995.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.34%)</title><rect x="94.0" y="979.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.34%)</title><rect x="94.0" y="963.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.34%)</title><rect x="94.0" y="947.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="94.0" y="931.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.34%)</title><rect x="94.0" y="915.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.0" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.34%)</title><rect x="94.0" y="899.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.34%)</title><rect x="98.0" y="979.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.34%)</title><rect x="102.0" y="1027.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.34%)</title><rect x="102.0" y="1011.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.34%)</title><rect x="102.0" y="995.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.34%)</title><rect x="102.0" y="979.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/616823838.accept (1 samples, 0.34%)</title><rect x="102.0" y="963.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.34%)</title><rect x="102.0" y="947.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.34%)</title><rect x="102.0" y="931.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.34%)</title><rect x="102.0" y="915.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="102.0" y="899.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="102.0" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.36%)</title><rect x="106.0" y="1027.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.36%)</title><rect x="106.0" y="1011.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.36%)</title><rect x="106.0" y="995.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.34%)</title><rect x="106.0" y="979.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.34%)</title><rect x="106.0" y="963.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.34%)</title><rect x="106.0" y="947.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="106.0" y="931.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="106.0" y="915.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.34%)</title><rect x="106.0" y="899.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.68%)</title><rect x="110.0" y="979.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1901132626.linkToTargetMethod (1 samples, 0.34%)</title><rect x="110.0" y="963.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.0" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/876447698.invokeStatic_JJ_L (1 samples, 0.34%)</title><rect x="110.0" y="947.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.34%)</title><rect x="114.0" y="963.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.34%)</title><rect x="114.0" y="947.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.34%)</title><rect x="114.0" y="931.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.34%)</title><rect x="114.0" y="915.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.0" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.34%)</title><rect x="114.0" y="899.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.0" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.34%)</title><rect x="114.0" y="883.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.0" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.34%)</title><rect x="114.0" y="867.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.34%)</title><rect x="114.0" y="851.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.34%)</title><rect x="114.0" y="835.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.34%)</title><rect x="118.0" y="979.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="118.0" y="963.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="121.0" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="118.0" y="947.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="121.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (220 samples, 74.58%)</title><rect x="122.0" y="1091.0" width="880.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.0" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (220 samples, 74.58%)</title><rect x="122.0" y="1075.0" width="880.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.0" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (220 samples, 74.58%)</title><rect x="122.0" y="1059.0" width="880.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.0" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1819501977.run (207 samples, 70.17%)</title><rect x="122.0" y="1043.0" width="828.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.0" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1819501977.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (207 samples, 70.17%)</title><rect x="122.0" y="1027.0" width="828.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.0" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (207 samples, 70.17%)</title><rect x="122.0" y="1011.0" width="828.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.0" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (205 samples, 69.49%)</title><rect x="122.0" y="995.0" width="820.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.0" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (33 samples, 11.19%)</title><rect x="134.0" y="979.0" width="132.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.0" y="990.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (32 samples, 10.85%)</title><rect x="138.0" y="963.0" width="128.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="141.0" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (32 samples, 10.85%)</title><rect x="138.0" y="947.0" width="128.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.0" y="958.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 10.85%)</title><rect x="138.0" y="931.0" width="128.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.0" y="942.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 10.85%)</title><rect x="138.0" y="915.0" width="128.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.0" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 10.85%)</title><rect x="138.0" y="899.0" width="128.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.0" y="910.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 4.41%)</title><rect x="138.0" y="883.0" width="52.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.0" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.69%)</title><rect x="142.0" y="867.0" width="20.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.69%)</title><rect x="142.0" y="851.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.69%)</title><rect x="142.0" y="835.0" width="20.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.69%)</title><rect x="142.0" y="819.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.36%)</title><rect x="142.0" y="803.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.34%)</title><rect x="158.0" y="803.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.37%)</title><rect x="162.0" y="867.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.0" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.02%)</title><rect x="178.0" y="851.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.34%)</title><rect x="178.0" y="835.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.34%)</title><rect x="178.0" y="819.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.68%)</title><rect x="182.0" y="835.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.68%)</title><rect x="182.0" y="819.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.68%)</title><rect x="182.0" y="803.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.68%)</title><rect x="182.0" y="787.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="185.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.68%)</title><rect x="182.0" y="771.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="185.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.68%)</title><rect x="182.0" y="755.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="185.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="186.0" y="739.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="189.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.34%)</title><rect x="186.0" y="723.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="189.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.10%)</title><rect x="190.0" y="883.0" width="72.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.0" y="894.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.68%)</title><rect x="190.0" y="867.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="194.0" y="851.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="194.0" y="835.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.34%)</title><rect x="194.0" y="819.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 1.69%)</title><rect x="198.0" y="867.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.02%)</title><rect x="206.0" y="851.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="214.0" y="835.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="214.0" y="819.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="214.0" y="803.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="214.0" y="787.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="214.0" y="771.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="217.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="214.0" y="755.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="217.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="214.0" y="739.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.73%)</title><rect x="218.0" y="867.0" width="44.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.0" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.73%)</title><rect x="218.0" y="851.0" width="44.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.0" y="862.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.73%)</title><rect x="218.0" y="835.0" width="44.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.0" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.39%)</title><rect x="222.0" y="819.0" width="40.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.0" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="222.0" y="803.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.34%)</title><rect x="222.0" y="787.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.34%)</title><rect x="226.0" y="787.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.34%)</title><rect x="226.0" y="771.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="226.0" y="755.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.36%)</title><rect x="230.0" y="803.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.68%)</title><rect x="238.0" y="787.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.68%)</title><rect x="238.0" y="771.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.68%)</title><rect x="238.0" y="755.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.68%)</title><rect x="238.0" y="739.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.68%)</title><rect x="246.0" y="803.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="246.0" y="787.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="246.0" y="771.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.68%)</title><rect x="246.0" y="755.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.68%)</title><rect x="246.0" y="739.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="750.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.68%)</title><rect x="246.0" y="723.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.0" y="734.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.68%)</title><rect x="246.0" y="707.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.68%)</title><rect x="254.0" y="803.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.34%)</title><rect x="262.0" y="883.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.34%)</title><rect x="262.0" y="867.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.34%)</title><rect x="262.0" y="851.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.34%)</title><rect x="262.0" y="835.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="262.0" y="819.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (156 samples, 52.88%)</title><rect x="266.0" y="979.0" width="624.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.0" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (19 samples, 6.44%)</title><rect x="266.0" y="963.0" width="76.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.0" y="974.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 5.76%)</title><rect x="274.0" y="947.0" width="68.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.0" y="958.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.41%)</title><rect x="290.0" y="931.0" width="52.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.0" y="942.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 4.07%)</title><rect x="294.0" y="915.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.0" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 4.07%)</title><rect x="294.0" y="899.0" width="48.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.0" y="910.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.03%)</title><rect x="318.0" y="883.0" width="24.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.0" y="894.0">j..</text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (6 samples, 2.03%)</title><rect x="318.0" y="867.0" width="24.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.0" y="878.0">o..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.36%)</title><rect x="342.0" y="963.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.02%)</title><rect x="346.0" y="947.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.02%)</title><rect x="346.0" y="931.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (32 samples, 10.85%)</title><rect x="358.0" y="963.0" width="128.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.0" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (32 samples, 10.85%)</title><rect x="358.0" y="947.0" width="128.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.0" y="958.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 4.07%)</title><rect x="362.0" y="931.0" width="48.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.0" y="942.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.05%)</title><rect x="370.0" y="915.0" width="36.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.0" y="926.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.05%)</title><rect x="370.0" y="899.0" width="36.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.0" y="910.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.69%)</title><rect x="378.0" y="883.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.69%)</title><rect x="378.0" y="867.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.0" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.69%)</title><rect x="378.0" y="851.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="386.0" y="835.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="389.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.34%)</title><rect x="386.0" y="819.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="389.0" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.34%)</title><rect x="386.0" y="803.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="389.0" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.34%)</title><rect x="386.0" y="787.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="389.0" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.34%)</title><rect x="386.0" y="771.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="389.0" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.34%)</title><rect x="386.0" y="755.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="389.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="390.0" y="835.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="393.0" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="394.0" y="835.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="397.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="398.0" y="883.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.0" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="402.0" y="883.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="405.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="406.0" y="915.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="409.0" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (19 samples, 6.44%)</title><rect x="410.0" y="931.0" width="76.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.0" y="942.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (19 samples, 6.44%)</title><rect x="410.0" y="915.0" width="76.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.0" y="926.0">ch/qos/l..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (19 samples, 6.44%)</title><rect x="410.0" y="899.0" width="76.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.0" y="910.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (17 samples, 5.76%)</title><rect x="418.0" y="883.0" width="68.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.0" y="894.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 3.73%)</title><rect x="442.0" y="867.0" width="44.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.0" y="878.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.34%)</title><rect x="454.0" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 2.03%)</title><rect x="458.0" y="851.0" width="24.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.0" y="862.0">j..</text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="482.0" y="851.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="485.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (87 samples, 29.49%)</title><rect x="486.0" y="963.0" width="348.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.0" y="974.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (87 samples, 29.49%)</title><rect x="486.0" y="947.0" width="348.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.0" y="958.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1014288372.process (72 samples, 24.41%)</title><rect x="506.0" y="931.0" width="288.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.0" y="942.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (72 samples, 24.41%)</title><rect x="506.0" y="915.0" width="288.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.0" y="926.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 24.07%)</title><rect x="510.0" y="899.0" width="284.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.0" y="910.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.68%)</title><rect x="514.0" y="883.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.68%)</title><rect x="514.0" y="867.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.0" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.68%)</title><rect x="514.0" y="851.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.68%)</title><rect x="514.0" y="835.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.34%)</title><rect x="518.0" y="819.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="521.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (67 samples, 22.71%)</title><rect x="522.0" y="883.0" width="268.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.0" y="894.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>java/lang/Thread.sleep (65 samples, 22.03%)</title><rect x="526.0" y="867.0" width="260.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.0" y="878.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (56 samples, 18.98%)</title><rect x="554.0" y="851.0" width="224.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="557.0" y="862.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.36%)</title><rect x="574.0" y="835.0" width="16.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="577.0" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="590.0" y="835.0" width="8.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="593.0" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.02%)</title><rect x="598.0" y="835.0" width="12.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="601.0" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="602.0" y="819.0" width="8.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="605.0" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="610.0" y="835.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.0" y="846.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (41 samples, 13.90%)</title><rect x="614.0" y="835.0" width="164.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="617.0" y="846.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.36%)</title><rect x="642.0" y="819.0" width="16.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="645.0" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 1.02%)</title><rect x="646.0" y="803.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="649.0" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.02%)</title><rect x="658.0" y="819.0" width="12.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="661.0" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.68%)</title><rect x="670.0" y="819.0" width="8.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="673.0" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.73%)</title><rect x="678.0" y="819.0" width="44.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="681.0" y="830.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.68%)</title><rect x="722.0" y="819.0" width="8.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="725.0" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.34%)</title><rect x="730.0" y="819.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="733.0" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="734.0" y="819.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="737.0" y="830.0"></text>
</g>
<g>
<title>_init (1 samples, 0.34%)</title><rect x="738.0" y="819.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="741.0" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 3.05%)</title><rect x="742.0" y="819.0" width="36.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.0" y="830.0">os:..</text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="778.0" y="851.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.0" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="782.0" y="851.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="785.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="786.0" y="867.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="789.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="786.0" y="851.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="789.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="790.0" y="883.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="790.0" y="867.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="790.0" y="851.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.34%)</title><rect x="794.0" y="931.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.0" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.68%)</title><rect x="798.0" y="931.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.0" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.68%)</title><rect x="798.0" y="915.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="801.0" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.34%)</title><rect x="802.0" y="899.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.02%)</title><rect x="806.0" y="931.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.0" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.02%)</title><rect x="806.0" y="915.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="814.0" y="899.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="814.0" y="883.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="814.0" y="867.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="814.0" y="851.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.34%)</title><rect x="814.0" y="835.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="817.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 1.36%)</title><rect x="818.0" y="931.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.75%)</title><rect x="834.0" y="963.0" width="56.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.0" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 4.75%)</title><rect x="834.0" y="947.0" width="56.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="837.0" y="958.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.36%)</title><rect x="870.0" y="931.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$284/1866957236.accept (4 samples, 1.36%)</title><rect x="870.0" y="915.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="873.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (4 samples, 1.36%)</title><rect x="870.0" y="899.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.0" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 1.36%)</title><rect x="870.0" y="883.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="873.0" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 1.36%)</title><rect x="870.0" y="867.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="873.0" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="878.0" y="851.0" width="8.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="881.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="878.0" y="835.0" width="8.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="881.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.34%)</title><rect x="886.0" y="931.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.07%)</title><rect x="890.0" y="979.0" width="48.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="893.0" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 4.07%)</title><rect x="890.0" y="963.0" width="48.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="893.0" y="974.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 4.07%)</title><rect x="890.0" y="947.0" width="48.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.0" y="958.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/2142392306.accept (12 samples, 4.07%)</title><rect x="890.0" y="931.0" width="48.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="893.0" y="942.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (12 samples, 4.07%)</title><rect x="890.0" y="915.0" width="48.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="893.0" y="926.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/318624172.complete (12 samples, 4.07%)</title><rect x="890.0" y="899.0" width="48.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="893.0" y="910.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (12 samples, 4.07%)</title><rect x="890.0" y="883.0" width="48.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="893.0" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1108982514.complete (12 samples, 4.07%)</title><rect x="890.0" y="867.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="893.0" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (12 samples, 4.07%)</title><rect x="890.0" y="851.0" width="48.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="893.0" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 4.07%)</title><rect x="890.0" y="835.0" width="48.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="893.0" y="846.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 4.07%)</title><rect x="890.0" y="819.0" width="48.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="893.0" y="830.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 4.07%)</title><rect x="890.0" y="803.0" width="48.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="893.0" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 4.07%)</title><rect x="890.0" y="787.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="893.0" y="798.0">ch/q..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="938.0" y="979.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.34%)</title><rect x="942.0" y="995.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.0" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.34%)</title><rect x="942.0" y="979.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.0" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.34%)</title><rect x="942.0" y="963.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="942.0" y="947.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="942.0" y="931.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.0" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="942.0" y="915.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="945.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.34%)</title><rect x="946.0" y="995.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.34%)</title><rect x="950.0" y="1043.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="950.0" y="1027.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="950.0" y="1011.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="950.0" y="995.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="953.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 4.07%)</title><rect x="954.0" y="1043.0" width="48.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.0" y="1054.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.73%)</title><rect x="958.0" y="1027.0" width="44.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.0" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (6 samples, 2.03%)</title><rect x="970.0" y="1011.0" width="24.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.0" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 2.03%)</title><rect x="970.0" y="995.0" width="24.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.0" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.03%)</title><rect x="970.0" y="979.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.0" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.03%)</title><rect x="970.0" y="963.0" width="24.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.0" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.03%)</title><rect x="970.0" y="947.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.0" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.68%)</title><rect x="994.0" y="1011.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="997.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.68%)</title><rect x="994.0" y="995.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="997.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.68%)</title><rect x="994.0" y="979.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="997.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.68%)</title><rect x="994.0" y="963.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="997.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="1002.0" y="1091.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.34%)</title><rect x="1002.0" y="1075.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1005.0" y="1086.0"></text>
</g>
<g>
<title>start_thread (46 samples, 15.59%)</title><rect x="1006.0" y="1091.0" width="184.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1009.0" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (46 samples, 15.59%)</title><rect x="1006.0" y="1075.0" width="184.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1009.0" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 7.12%)</title><rect x="1006.0" y="1059.0" width="84.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.0" y="1070.0">GangWorker..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 7.12%)</title><rect x="1006.0" y="1043.0" width="84.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.0" y="1054.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 6.10%)</title><rect x="1006.0" y="1027.0" width="72.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.0" y="1038.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (16 samples, 5.42%)</title><rect x="1006.0" y="1011.0" width="64.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.0" y="1022.0">G1ParSc..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (12 samples, 4.07%)</title><rect x="1022.0" y="995.0" width="48.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1025.0" y="1006.0">G1Pa..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.02%)</title><rect x="1058.0" y="979.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.0" y="990.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.34%)</title><rect x="1066.0" y="963.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.0" y="974.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.34%)</title><rect x="1070.0" y="1011.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.0" y="1022.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.34%)</title><rect x="1074.0" y="1011.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.0" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 1.02%)</title><rect x="1078.0" y="1027.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.0" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 1.02%)</title><rect x="1078.0" y="1011.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 1.02%)</title><rect x="1078.0" y="995.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.0" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 1.02%)</title><rect x="1078.0" y="979.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.0" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.02%)</title><rect x="1078.0" y="963.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.0" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 1.02%)</title><rect x="1078.0" y="947.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.0" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.34%)</title><rect x="1086.0" y="931.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.0" y="942.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.34%)</title><rect x="1086.0" y="915.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.0" y="926.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.34%)</title><rect x="1086.0" y="899.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.0" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (24 samples, 8.14%)</title><rect x="1090.0" y="1059.0" width="96.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.0" y="1070.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 8.14%)</title><rect x="1090.0" y="1043.0" width="96.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="1054.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 8.14%)</title><rect x="1090.0" y="1027.0" width="96.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.0" y="1038.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (22 samples, 7.46%)</title><rect x="1090.0" y="1011.0" width="88.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.0" y="1022.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 6.78%)</title><rect x="1090.0" y="995.0" width="80.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.0" y="1006.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 6.78%)</title><rect x="1090.0" y="979.0" width="80.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.0" y="990.0">Compile::..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.34%)</title><rect x="1090.0" y="963.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.0" y="974.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.34%)</title><rect x="1090.0" y="947.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.0" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1090.0" y="931.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1090.0" y="915.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1090.0" y="899.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.0" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1090.0" y="883.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1090.0" y="867.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1090.0" y="851.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.0" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1090.0" y="835.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.0" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1090.0" y="819.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1090.0" y="803.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.0" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1090.0" y="787.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.0" y="798.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1090.0" y="771.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.0" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1090.0" y="755.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1090.0" y="739.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.34%)</title><rect x="1090.0" y="723.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.0" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.34%)</title><rect x="1090.0" y="707.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.0" y="718.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 3.39%)</title><rect x="1094.0" y="963.0" width="40.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.0" y="974.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="1094.0" y="947.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.0" y="958.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.34%)</title><rect x="1094.0" y="931.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.0" y="942.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.34%)</title><rect x="1094.0" y="915.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="926.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.34%)</title><rect x="1094.0" y="899.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.0" y="910.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.34%)</title><rect x="1094.0" y="883.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.0" y="894.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.34%)</title><rect x="1094.0" y="867.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.34%)</title><rect x="1098.0" y="947.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.34%)</title><rect x="1098.0" y="931.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.34%)</title><rect x="1098.0" y="915.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 2.71%)</title><rect x="1102.0" y="947.0" width="32.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.0" y="958.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.34%)</title><rect x="1102.0" y="931.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="942.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.34%)</title><rect x="1106.0" y="931.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.0" y="942.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.34%)</title><rect x="1106.0" y="915.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.34%)</title><rect x="1110.0" y="931.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.0" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.34%)</title><rect x="1110.0" y="915.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.0" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1110.0" y="899.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.68%)</title><rect x="1114.0" y="931.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.34%)</title><rect x="1122.0" y="931.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.0" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="1122.0" y="915.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.0" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.68%)</title><rect x="1126.0" y="931.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.0" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.68%)</title><rect x="1126.0" y="915.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.0" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 2.03%)</title><rect x="1134.0" y="963.0" width="24.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.0" y="974.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.34%)</title><rect x="1134.0" y="947.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1134.0" y="931.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="942.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.34%)</title><rect x="1138.0" y="947.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1138.0" y="931.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1138.0" y="915.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.0" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1138.0" y="899.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1142.0" y="947.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1142.0" y="931.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.34%)</title><rect x="1142.0" y="915.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.34%)</title><rect x="1142.0" y="899.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.34%)</title><rect x="1142.0" y="883.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.0" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.34%)</title><rect x="1142.0" y="867.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.34%)</title><rect x="1142.0" y="851.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.0" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.34%)</title><rect x="1142.0" y="835.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.0" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1142.0" y="819.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.0" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1142.0" y="803.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.34%)</title><rect x="1142.0" y="787.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 0.68%)</title><rect x="1146.0" y="947.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1146.0" y="931.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1146.0" y="915.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1150.0" y="931.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.34%)</title><rect x="1150.0" y="915.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1154.0" y="947.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1154.0" y="931.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1154.0" y="915.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1154.0" y="899.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1154.0" y="883.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.34%)</title><rect x="1154.0" y="867.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1158.0" y="963.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1158.0" y="947.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1158.0" y="931.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1158.0" y="915.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1158.0" y="899.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1158.0" y="883.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="867.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="851.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="835.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="819.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="803.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="787.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="771.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="755.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="739.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="723.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="707.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="691.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="675.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="659.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="643.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="627.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="611.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="595.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="579.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="563.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="547.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="531.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="515.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="499.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="483.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="467.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="451.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="435.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="419.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="403.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="387.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="371.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="355.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="339.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="323.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="307.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="291.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="275.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="259.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="243.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="227.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1158.0" y="211.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.0" y="195.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1158.0" y="179.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1158.0" y="163.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1158.0" y="147.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1158.0" y="131.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1158.0" y="115.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1158.0" y="99.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1158.0" y="83.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.34%)</title><rect x="1158.0" y="67.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="78.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.34%)</title><rect x="1158.0" y="51.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="62.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.34%)</title><rect x="1158.0" y="35.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1162.0" y="867.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1162.0" y="851.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1162.0" y="835.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1162.0" y="819.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1162.0" y="803.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1162.0" y="787.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.0" y="771.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1162.0" y="755.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1162.0" y="739.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1162.0" y="723.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1162.0" y="707.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.34%)</title><rect x="1162.0" y="691.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>ciMethod::scale_count(int, float) (1 samples, 0.34%)</title><rect x="1162.0" y="675.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.34%)</title><rect x="1166.0" y="963.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="974.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.68%)</title><rect x="1170.0" y="995.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.68%)</title><rect x="1170.0" y="979.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.68%)</title><rect x="1170.0" y="963.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.68%)</title><rect x="1170.0" y="947.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="958.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.68%)</title><rect x="1170.0" y="931.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.0" y="942.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.68%)</title><rect x="1170.0" y="915.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="926.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.68%)</title><rect x="1170.0" y="899.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.68%)</title><rect x="1170.0" y="883.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.68%)</title><rect x="1170.0" y="867.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.68%)</title><rect x="1170.0" y="851.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.68%)</title><rect x="1170.0" y="835.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.68%)</title><rect x="1170.0" y="819.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.68%)</title><rect x="1170.0" y="803.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.68%)</title><rect x="1170.0" y="787.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.68%)</title><rect x="1170.0" y="771.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.68%)</title><rect x="1170.0" y="755.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.68%)</title><rect x="1170.0" y="739.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.68%)</title><rect x="1170.0" y="723.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.0" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1170.0" y="707.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1170.0" y="691.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.34%)</title><rect x="1174.0" y="707.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="718.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.34%)</title><rect x="1174.0" y="691.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.0" y="702.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.68%)</title><rect x="1178.0" y="1011.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.68%)</title><rect x="1178.0" y="995.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.68%)</title><rect x="1178.0" y="979.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.68%)</title><rect x="1178.0" y="963.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="974.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.34%)</title><rect x="1182.0" y="947.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.34%)</title><rect x="1182.0" y="931.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.34%)</title><rect x="1186.0" y="1059.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="1070.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.34%)</title><rect x="1186.0" y="1043.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="1054.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.34%)</title><rect x="1186.0" y="1027.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="1038.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.34%)</title><rect x="1186.0" y="1011.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="1022.0"></text>
</g>
</g>
</svg>
