<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (1,167 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (288 samples, 24.68%)</title><rect x="10.0" y="899.0" width="291.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="910.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (288 samples, 24.68%)</title><rect x="10.0" y="883.0" width="291.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.43%)</title><rect x="10.0" y="867.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.43%)</title><rect x="10.0" y="851.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/51320506.accept (4 samples, 0.34%)</title><rect x="10.0" y="835.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="10.0" y="819.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="10.0" y="803.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="11.0" y="787.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="14.0" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.43%)</title><rect x="15.1" y="867.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="15.1" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.34%)</title><rect x="16.1" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.34%)</title><rect x="16.1" y="835.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.34%)</title><rect x="16.1" y="819.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.34%)</title><rect x="16.1" y="803.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="16.1" y="787.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="16.1" y="771.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="16.1" y="755.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="16.1" y="739.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="16.1" y="723.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/147037339.test (1 samples, 0.09%)</title><rect x="16.1" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.1" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.1" y="707.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="18.1" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="18.1" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="18.1" y="723.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="19.1" y="771.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="19.1" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="19.1" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="19.1" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="19.1" y="707.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.1" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (225 samples, 19.28%)</title><rect x="20.1" y="867.0" width="227.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="878.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1241035899.accept (221 samples, 18.94%)</title><rect x="20.1" y="851.0" width="223.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="862.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (221 samples, 18.94%)</title><rect x="20.1" y="835.0" width="223.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="846.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (181 samples, 15.51%)</title><rect x="20.1" y="819.0" width="183.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="830.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (181 samples, 15.51%)</title><rect x="20.1" y="803.0" width="183.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="814.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (181 samples, 15.51%)</title><rect x="20.1" y="787.0" width="183.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="798.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (181 samples, 15.51%)</title><rect x="20.1" y="771.0" width="183.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="782.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (181 samples, 15.51%)</title><rect x="20.1" y="755.0" width="183.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="766.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (181 samples, 15.51%)</title><rect x="20.1" y="739.0" width="183.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="750.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (128 samples, 10.97%)</title><rect x="20.1" y="723.0" width="129.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="734.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.31%)</title><rect x="20.1" y="707.0" width="27.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.31%)</title><rect x="20.1" y="691.0" width="27.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.46%)</title><rect x="30.2" y="675.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.46%)</title><rect x="30.2" y="659.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.69%)</title><rect x="47.4" y="707.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.69%)</title><rect x="47.4" y="691.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.26%)</title><rect x="47.4" y="675.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.4" y="686.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="49.4" y="659.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="52.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.43%)</title><rect x="50.4" y="675.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (93 samples, 7.97%)</title><rect x="55.5" y="707.0" width="94.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="718.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 7.97%)</title><rect x="55.5" y="691.0" width="94.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.5" y="702.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 7.54%)</title><rect x="57.5" y="675.0" width="89.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.5" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 7.54%)</title><rect x="57.5" y="659.0" width="89.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.5" y="670.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (87 samples, 7.46%)</title><rect x="58.5" y="643.0" width="88.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.5" y="654.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="61.6" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.6" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (77 samples, 6.60%)</title><rect x="62.6" y="627.0" width="77.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.6" y="638.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="62.6" y="611.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="65.6" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="65.6" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="68.6" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (54 samples, 4.63%)</title><rect x="66.6" y="611.0" width="54.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="69.6" y="622.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.34%)</title><rect x="121.2" y="611.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="124.2" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.29%)</title><rect x="125.3" y="611.0" width="15.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="128.3" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="140.4" y="627.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="143.4" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="143.5" y="627.0" width="3.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="146.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.26%)</title><rect x="146.5" y="675.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.26%)</title><rect x="149.5" y="723.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.26%)</title><rect x="149.5" y="707.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.26%)</title><rect x="149.5" y="691.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="151.6" y="675.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.60%)</title><rect x="152.6" y="723.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.60%)</title><rect x="152.6" y="707.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.60%)</title><rect x="152.6" y="691.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="156.6" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="159.6" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="156.6" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.6" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="156.6" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.6" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="156.6" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="159.6" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="156.6" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="159.6" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="156.6" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="159.6" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="157.6" y="675.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="160.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 3.68%)</title><rect x="159.6" y="723.0" width="43.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.6" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 3.68%)</title><rect x="159.6" y="707.0" width="43.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.6" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (43 samples, 3.68%)</title><rect x="159.6" y="691.0" width="43.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.6" y="702.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="200.1" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="201.1" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="202.1" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.43%)</title><rect x="203.1" y="819.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="203.1" y="803.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="203.1" y="787.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (35 samples, 3.00%)</title><rect x="208.2" y="819.0" width="35.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.2" y="830.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.34%)</title><rect x="237.5" y="803.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.5" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.34%)</title><rect x="237.5" y="787.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="237.5" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="237.5" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="237.5" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="237.5" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="240.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="237.5" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="240.5" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="237.5" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="240.5" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="237.5" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="240.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.26%)</title><rect x="238.5" y="771.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.5" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="241.6" y="803.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="244.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="243.6" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="243.6" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="243.6" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.26%)</title><rect x="244.6" y="851.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.26%)</title><rect x="244.6" y="835.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="244.6" y="819.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="244.6" y="803.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.6" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.26%)</title><rect x="244.6" y="787.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.54%)</title><rect x="247.6" y="867.0" width="53.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.6" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.54%)</title><rect x="247.6" y="851.0" width="53.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.6" y="862.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (25 samples, 2.14%)</title><rect x="247.6" y="835.0" width="25.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="247.6" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="247.6" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="247.6" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (24 samples, 2.06%)</title><rect x="248.6" y="819.0" width="24.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (24 samples, 2.06%)</title><rect x="248.6" y="803.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.6" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (17 samples, 1.46%)</title><rect x="249.6" y="787.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (17 samples, 1.46%)</title><rect x="249.6" y="771.0" width="17.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (6 samples, 0.51%)</title><rect x="252.7" y="755.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.26%)</title><rect x="252.7" y="739.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.26%)</title><rect x="252.7" y="723.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.26%)</title><rect x="252.7" y="707.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.26%)</title><rect x="252.7" y="691.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.26%)</title><rect x="252.7" y="675.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.26%)</title><rect x="252.7" y="659.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.26%)</title><rect x="252.7" y="643.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.26%)</title><rect x="255.7" y="739.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.26%)</title><rect x="255.7" y="723.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.69%)</title><rect x="258.7" y="755.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.60%)</title><rect x="259.8" y="739.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.26%)</title><rect x="261.8" y="723.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.8" y="734.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.26%)</title><rect x="261.8" y="707.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="263.8" y="691.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="266.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.17%)</title><rect x="264.8" y="723.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.8" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.17%)</title><rect x="264.8" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.34%)</title><rect x="266.8" y="787.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.34%)</title><rect x="266.8" y="771.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.17%)</title><rect x="266.8" y="755.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="266.8" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.8" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="266.8" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="267.8" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="267.8" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="267.8" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="267.8" y="691.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="270.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="268.9" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="268.9" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="269.9" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="269.9" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="269.9" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="269.9" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.9" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="269.9" y="691.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="272.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="270.9" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="270.9" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="270.9" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="270.9" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="271.9" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="271.9" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="271.9" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.9" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="271.9" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="271.9" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.11%)</title><rect x="272.9" y="835.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.86%)</title><rect x="272.9" y="819.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.60%)</title><rect x="272.9" y="803.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="272.9" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="272.9" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="272.9" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="272.9" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="272.9" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.9" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="273.9" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="274.9" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="274.9" y="771.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="274.9" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="274.9" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="274.9" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="274.9" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/1016267902.get (1 samples, 0.09%)</title><rect x="274.9" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="275.9" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="275.9" y="771.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="276.9" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="276.9" y="771.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.9" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="276.9" y="755.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="276.9" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.9" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="276.9" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="276.9" y="707.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="278.0" y="787.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="278.0" y="771.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="279.0" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="279.0" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.0" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="279.0" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="279.0" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.0" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="279.0" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.0" y="686.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="279.0" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="279.0" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.0" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="279.0" y="627.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.0" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="279.0" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.26%)</title><rect x="280.0" y="803.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.26%)</title><rect x="280.0" y="787.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="280.0" y="771.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="281.0" y="755.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="281.0" y="739.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="281.0" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="281.0" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="281.0" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="281.0" y="675.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="281.0" y="659.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="281.0" y="643.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="281.0" y="627.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.09%)</title><rect x="282.0" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="282.0" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.&lt;init&gt; (1 samples, 0.09%)</title><rect x="282.0" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.26%)</title><rect x="283.0" y="819.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.17%)</title><rect x="283.0" y="803.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.17%)</title><rect x="283.0" y="787.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="284.0" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="284.0" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="284.0" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="284.0" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="284.0" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="285.0" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitCompletion.invoke (1 samples, 0.09%)</title><rect x="285.0" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="286.0" y="835.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="286.0" y="819.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="286.0" y="803.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="286.0" y="787.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="286.0" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.69%)</title><rect x="287.1" y="835.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.60%)</title><rect x="287.1" y="819.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="287.1" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.09%)</title><rect x="287.1" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.09%)</title><rect x="287.1" y="771.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getArray (1 samples, 0.09%)</title><rect x="287.1" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.51%)</title><rect x="288.1" y="803.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="288.1" y="787.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="288.1" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="288.1" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="288.1" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.1" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="288.1" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="289.1" y="771.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="289.1" y="755.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="289.1" y="739.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="289.1" y="723.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="289.1" y="707.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="289.1" y="691.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.1" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="289.1" y="675.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="292.1" y="686.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="290.1" y="675.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="293.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.17%)</title><rect x="291.1" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.17%)</title><rect x="291.1" y="771.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.17%)</title><rect x="291.1" y="755.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.17%)</title><rect x="291.1" y="739.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.1" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.09%)</title><rect x="291.1" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.1" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.09%)</title><rect x="291.1" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.1" y="718.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.09%)</title><rect x="291.1" y="691.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.09%)</title><rect x="291.1" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="292.1" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.09%)</title><rect x="292.1" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="293.1" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="293.1" y="771.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="296.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="294.1" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="294.1" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="294.1" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="294.1" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="294.1" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="294.1" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="294.1" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="294.1" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="294.1" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.09%)</title><rect x="294.1" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="294.1" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.09%)</title><rect x="294.1" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.43%)</title><rect x="295.1" y="835.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.43%)</title><rect x="295.1" y="819.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="295.1" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="295.1" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/183456992.accept (1 samples, 0.09%)</title><rect x="295.1" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.34%)</title><rect x="296.2" y="803.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="297.2" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.17%)</title><rect x="298.2" y="787.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.09%)</title><rect x="298.2" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="298.2" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/252317017.get$Lambda (1 samples, 0.09%)</title><rect x="298.2" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="299.2" y="771.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="299.2" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="299.2" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="299.2" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="299.2" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.2" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="299.2" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.2" y="702.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="299.2" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="299.2" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="299.2" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/252317017.test (1 samples, 0.09%)</title><rect x="299.2" y="627.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="299.2" y="611.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1652047604.test (1 samples, 0.09%)</title><rect x="299.2" y="595.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="300.2" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="300.2" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="300.2" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="300.2" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="300.2" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (797 samples, 68.29%)</title><rect x="301.2" y="899.0" width="805.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="304.2" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (797 samples, 68.29%)</title><rect x="301.2" y="883.0" width="805.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.2" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (797 samples, 68.29%)</title><rect x="301.2" y="867.0" width="805.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.2" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/55075391.run (535 samples, 45.84%)</title><rect x="301.2" y="851.0" width="541.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.2" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/55075391.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (535 samples, 45.84%)</title><rect x="301.2" y="835.0" width="541.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.2" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (535 samples, 45.84%)</title><rect x="301.2" y="819.0" width="541.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.2" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="305.3" y="803.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="308.3" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.94%)</title><rect x="308.3" y="803.0" width="11.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="311.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.77%)</title><rect x="310.3" y="787.0" width="9.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="313.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (517 samples, 44.30%)</title><rect x="319.4" y="803.0" width="522.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.4" y="814.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="327.5" y="787.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="330.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 0.26%)</title><rect x="328.5" y="787.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.09%)</title><rect x="330.5" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.09%)</title><rect x="330.5" y="755.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="333.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.09%)</title><rect x="330.5" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="330.5" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="330.5" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="331.5" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="331.5" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/32247285.get (1 samples, 0.09%)</title><rect x="331.5" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="331.5" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="331.5" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="334.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="331.5" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="334.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="331.5" y="691.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="334.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (141 samples, 12.08%)</title><rect x="332.6" y="787.0" width="142.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.6" y="798.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (141 samples, 12.08%)</title><rect x="332.6" y="771.0" width="142.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.6" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (141 samples, 12.08%)</title><rect x="332.6" y="755.0" width="142.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.6" y="766.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 12.08%)</title><rect x="332.6" y="739.0" width="142.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.6" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 12.08%)</title><rect x="332.6" y="723.0" width="142.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.6" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (141 samples, 12.08%)</title><rect x="332.6" y="707.0" width="142.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.6" y="718.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (49 samples, 4.20%)</title><rect x="333.6" y="691.0" width="49.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.6" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 1.20%)</title><rect x="333.6" y="675.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 1.20%)</title><rect x="333.6" y="659.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (10 samples, 0.86%)</title><rect x="333.6" y="643.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.34%)</title><rect x="343.7" y="643.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="343.7" y="627.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="346.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="343.7" y="611.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="343.7" y="595.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.34%)</title><rect x="343.7" y="579.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (35 samples, 3.00%)</title><rect x="347.7" y="675.0" width="35.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.7" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (35 samples, 3.00%)</title><rect x="347.7" y="659.0" width="35.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.7" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="347.7" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="347.7" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 1.03%)</title><rect x="348.7" y="643.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (4 samples, 0.34%)</title><rect x="348.7" y="627.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.7" y="638.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.34%)</title><rect x="348.7" y="611.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="351.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.17%)</title><rect x="352.8" y="627.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.09%)</title><rect x="354.8" y="627.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (3 samples, 0.26%)</title><rect x="355.8" y="627.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="358.8" y="627.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (16 samples, 1.37%)</title><rect x="360.9" y="643.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.9" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="365.9" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="368.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="365.9" y="611.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="368.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="365.9" y="595.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="368.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="365.9" y="579.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="368.9" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="365.9" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="368.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="365.9" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.9" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="365.9" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="368.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="365.9" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="368.9" y="526.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="365.9" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="368.9" y="510.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="365.9" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="368.9" y="494.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.09%)</title><rect x="365.9" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="368.9" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="366.9" y="563.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.77%)</title><rect x="367.9" y="627.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="367.9" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="622.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="367.9" y="595.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="370.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.69%)</title><rect x="369.0" y="611.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.51%)</title><rect x="377.0" y="643.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="382.1" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (77 samples, 6.60%)</title><rect x="383.1" y="691.0" width="77.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.1" y="702.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="383.1" y="675.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="383.1" y="659.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.51%)</title><rect x="386.1" y="675.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.51%)</title><rect x="386.1" y="659.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.26%)</title><rect x="389.2" y="643.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="392.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="389.2" y="627.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="391.2" y="611.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.86%)</title><rect x="392.2" y="675.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.26%)</title><rect x="394.2" y="659.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.43%)</title><rect x="397.3" y="659.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="400.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 4.97%)</title><rect x="402.3" y="675.0" width="58.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.3" y="686.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.20%)</title><rect x="403.3" y="659.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.09%)</title><rect x="404.3" y="643.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.09%)</title><rect x="404.3" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.09%)</title><rect x="404.3" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.69%)</title><rect x="405.4" y="643.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.34%)</title><rect x="413.4" y="643.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.34%)</title><rect x="413.4" y="627.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.68%)</title><rect x="417.5" y="659.0" width="43.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.5" y="670.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 3.68%)</title><rect x="417.5" y="643.0" width="43.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.5" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.60%)</title><rect x="418.5" y="627.0" width="42.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.5" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.37%)</title><rect x="429.6" y="611.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.51%)</title><rect x="434.7" y="595.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.51%)</title><rect x="434.7" y="579.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.51%)</title><rect x="434.7" y="563.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="439.7" y="547.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="440.7" y="595.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="442.8" y="595.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="442.8" y="579.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="444.8" y="563.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.17%)</title><rect x="445.8" y="611.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="445.8" y="595.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="445.8" y="579.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="445.8" y="563.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="445.8" y="547.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.26%)</title><rect x="447.8" y="611.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.26%)</title><rect x="447.8" y="595.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.26%)</title><rect x="447.8" y="579.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.26%)</title><rect x="447.8" y="563.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.8" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.26%)</title><rect x="447.8" y="547.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.8" y="558.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.26%)</title><rect x="447.8" y="531.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.8" y="542.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor16.newInstance (1 samples, 0.09%)</title><rect x="449.8" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.51%)</title><rect x="450.9" y="611.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.51%)</title><rect x="450.9" y="595.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.51%)</title><rect x="450.9" y="579.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="455.9" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.34%)</title><rect x="456.9" y="611.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="459.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.03%)</title><rect x="461.0" y="691.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.03%)</title><rect x="461.0" y="675.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.03%)</title><rect x="461.0" y="659.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.03%)</title><rect x="461.0" y="643.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.34%)</title><rect x="469.1" y="627.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="473.1" y="691.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (334 samples, 28.62%)</title><rect x="475.1" y="787.0" width="337.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.1" y="798.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (51 samples, 4.37%)</title><rect x="477.1" y="771.0" width="51.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.1" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="477.1" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.1" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.28%)</title><rect x="478.2" y="755.0" width="50.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.2" y="766.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.20%)</title><rect x="478.2" y="739.0" width="49.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.2" y="750.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 1.89%)</title><rect x="479.2" y="723.0" width="22.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.2" y="734.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (22 samples, 1.89%)</title><rect x="479.2" y="707.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.2" y="718.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.86%)</title><rect x="491.3" y="691.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.86%)</title><rect x="491.3" y="675.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="494.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 0.86%)</title><rect x="491.3" y="659.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.03%)</title><rect x="501.4" y="723.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 1.03%)</title><rect x="501.4" y="707.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 1.03%)</title><rect x="501.4" y="691.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (12 samples, 1.03%)</title><rect x="501.4" y="675.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.4" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 1.20%)</title><rect x="513.5" y="723.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="516.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.51%)</title><rect x="521.6" y="707.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.51%)</title><rect x="521.6" y="691.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="524.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="527.7" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="527.7" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="527.7" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.77%)</title><rect x="528.7" y="771.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.69%)</title><rect x="529.7" y="755.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="529.7" y="739.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="532.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="529.7" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="532.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="529.7" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="532.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="529.7" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="532.7" y="702.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="529.7" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="532.7" y="686.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.60%)</title><rect x="530.7" y="739.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (188 samples, 16.11%)</title><rect x="537.8" y="771.0" width="190.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.8" y="782.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (188 samples, 16.11%)</title><rect x="537.8" y="755.0" width="190.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.8" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="552.0" y="739.0" width="6.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="555.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="552.0" y="723.0" width="6.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="555.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 4.97%)</title><rect x="558.0" y="739.0" width="58.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="561.0" y="750.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.17%)</title><rect x="568.1" y="723.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.1" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.17%)</title><rect x="568.1" y="707.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="568.1" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="571.1" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="569.2" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="572.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.83%)</title><rect x="570.2" y="723.0" width="33.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.2" y="734.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.83%)</title><rect x="570.2" y="707.0" width="33.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.2" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.80%)</title><rect x="578.3" y="691.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.3" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.80%)</title><rect x="578.3" y="675.0" width="21.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.3" y="686.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.80%)</title><rect x="578.3" y="659.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.3" y="670.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.77%)</title><rect x="582.3" y="643.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="585.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.43%)</title><rect x="582.3" y="627.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.3" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="582.3" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="585.3" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.34%)</title><rect x="583.3" y="611.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="586.3" y="622.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="584.3" y="595.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="587.3" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="584.3" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="587.3" y="590.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="584.3" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="587.3" y="574.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="585.3" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="588.3" y="590.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="586.3" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.3" y="590.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="587.4" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="590.4" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="588.4" y="627.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="588.4" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="591.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="588.4" y="595.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.4" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="589.4" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="592.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="590.4" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="593.4" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.69%)</title><rect x="591.4" y="643.0" width="8.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="594.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="599.5" y="691.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="602.5" y="702.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="603.5" y="723.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="606.5" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.03%)</title><rect x="604.6" y="723.0" width="12.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="607.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="616.7" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="619.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 1.20%)</title><rect x="617.7" y="739.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.17%)</title><rect x="617.7" y="723.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="620.7" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="617.7" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="620.7" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="617.7" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="617.7" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="620.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="617.7" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="618.7" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="621.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="618.7" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="621.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="618.7" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="621.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="618.7" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (12 samples, 1.03%)</title><rect x="619.7" y="723.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="622.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (12 samples, 1.03%)</title><rect x="619.7" y="707.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.43%)</title><rect x="625.8" y="691.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="628.8" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="630.8" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.8" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (95 samples, 8.14%)</title><rect x="631.9" y="739.0" width="96.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.9" y="750.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (94 samples, 8.05%)</title><rect x="632.9" y="723.0" width="95.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.9" y="734.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 2.57%)</title><rect x="632.9" y="707.0" width="30.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.9" y="718.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (30 samples, 2.57%)</title><rect x="632.9" y="691.0" width="30.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.9" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (15 samples, 1.29%)</title><rect x="648.0" y="675.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 1.29%)</title><rect x="648.0" y="659.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (15 samples, 1.29%)</title><rect x="648.0" y="643.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="651.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="663.2" y="707.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="663.2" y="691.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="663.2" y="675.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="663.2" y="659.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="664.2" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 5.31%)</title><rect x="665.2" y="707.0" width="62.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.2" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.97%)</title><rect x="669.3" y="691.0" width="58.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.3" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.86%)</title><rect x="673.3" y="675.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.86%)</title><rect x="673.3" y="659.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="676.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 3.77%)</title><rect x="683.4" y="675.0" width="44.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.4" y="686.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="705.7" y="659.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (15 samples, 1.29%)</title><rect x="708.7" y="659.0" width="15.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.34%)</title><rect x="719.8" y="643.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="722.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.34%)</title><rect x="719.8" y="627.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="722.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (4 samples, 0.34%)</title><rect x="719.8" y="611.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="722.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="719.8" y="595.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="722.8" y="606.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="720.8" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.8" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="721.8" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.8" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="721.8" y="563.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="724.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="722.9" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.9" y="606.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.34%)</title><rect x="723.9" y="659.0" width="4.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="726.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 4.88%)</title><rect x="727.9" y="771.0" width="57.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.9" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 4.88%)</title><rect x="727.9" y="755.0" width="57.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.9" y="766.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1895118244.process (24 samples, 2.06%)</title><rect x="728.9" y="739.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.9" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (22 samples, 1.89%)</title><rect x="730.9" y="723.0" width="22.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.9" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.89%)</title><rect x="730.9" y="707.0" width="22.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.9" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.86%)</title><rect x="736.0" y="691.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="739.0" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.69%)</title><rect x="738.0" y="675.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.0" y="686.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="739.0" y="659.0" width="7.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="742.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.60%)</title><rect x="746.1" y="691.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (8 samples, 0.69%)</title><rect x="753.2" y="739.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$286/1920058541.complete (1 samples, 0.09%)</title><rect x="761.3" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.09%)</title><rect x="761.3" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="762.3" y="739.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="762.3" y="723.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="765.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="764.3" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="764.3" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="764.3" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.3" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="764.3" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.3" y="638.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.09%)</title><rect x="764.3" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="767.3" y="622.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_prologue() (1 samples, 0.09%)</title><rect x="764.3" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.3" y="606.0"></text>
</g>
<g>
<title>VM_GC_Operation::doit_prologue() (1 samples, 0.09%)</title><rect x="764.3" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.3" y="590.0"></text>
</g>
<g>
<title>InstanceRefKlass::acquire_pending_list_lock(BasicLock*) (1 samples, 0.09%)</title><rect x="764.3" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.3" y="574.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.3" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.09%)</title><rect x="764.3" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="767.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="765.3" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1630750952.get (1 samples, 0.09%)</title><rect x="765.3" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="768.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.09%)</title><rect x="765.3" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.3" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="766.3" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="766.3" y="723.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$286/1920058541.get$Lambda (1 samples, 0.09%)</title><rect x="766.3" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (4 samples, 0.34%)</title><rect x="767.3" y="739.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="770.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.26%)</title><rect x="768.4" y="723.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="771.4" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="770.4" y="707.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.43%)</title><rect x="771.4" y="739.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.4" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.34%)</title><rect x="772.4" y="723.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="775.4" y="734.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="772.4" y="707.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="775.4" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="775.4" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.77%)</title><rect x="776.4" y="739.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.4" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.60%)</title><rect x="778.5" y="723.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/704967647.linkToTargetMethod (1 samples, 0.09%)</title><rect x="785.5" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="785.5" y="755.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/2059870021.get$Lambda (1 samples, 0.09%)</title><rect x="785.5" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="785.5" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="788.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="785.5" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="788.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 2.23%)</title><rect x="786.6" y="771.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.6" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (26 samples, 2.23%)</title><rect x="786.6" y="755.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.6" y="766.0">j..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.77%)</title><rect x="794.6" y="739.0" width="9.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.77%)</title><rect x="794.6" y="723.0" width="9.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="797.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.69%)</title><rect x="803.7" y="739.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/541947137.accept (8 samples, 0.69%)</title><rect x="803.7" y="723.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (8 samples, 0.69%)</title><rect x="803.7" y="707.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1031541781.complete (8 samples, 0.69%)</title><rect x="803.7" y="691.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (8 samples, 0.69%)</title><rect x="803.7" y="675.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/329528017.complete (8 samples, 0.69%)</title><rect x="803.7" y="659.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (8 samples, 0.69%)</title><rect x="803.7" y="643.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.7" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="807.8" y="627.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="810.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="807.8" y="611.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="810.8" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="811.8" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="812.8" y="787.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="812.8" y="771.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/541947137.get$Lambda (1 samples, 0.09%)</title><rect x="812.8" y="755.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.8" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="812.8" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="815.8" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="812.8" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="812.8" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="812.8" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.8" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="812.8" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.97%)</title><rect x="813.9" y="787.0" width="23.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.9" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 1.97%)</title><rect x="813.9" y="771.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.89%)</title><rect x="814.9" y="755.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="817.9" y="766.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/541947137.accept (22 samples, 1.89%)</title><rect x="814.9" y="739.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.9" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (22 samples, 1.89%)</title><rect x="814.9" y="723.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.9" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1031541781.complete (22 samples, 1.89%)</title><rect x="814.9" y="707.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.9" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (22 samples, 1.89%)</title><rect x="814.9" y="691.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.9" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (17 samples, 1.46%)</title><rect x="814.9" y="675.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (17 samples, 1.46%)</title><rect x="814.9" y="659.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (17 samples, 1.46%)</title><rect x="814.9" y="643.0" width="17.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.9" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.46%)</title><rect x="814.9" y="627.0" width="17.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.9" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.46%)</title><rect x="814.9" y="611.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.9" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (16 samples, 1.37%)</title><rect x="814.9" y="595.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.9" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="831.0" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="834.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/329528017.complete (5 samples, 0.43%)</title><rect x="832.1" y="675.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (5 samples, 0.43%)</title><rect x="832.1" y="659.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="835.1" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="837.1" y="787.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="837.1" y="771.0" width="5.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="840.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (24 samples, 2.06%)</title><rect x="842.2" y="851.0" width="24.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.06%)</title><rect x="842.2" y="835.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 2.06%)</title><rect x="842.2" y="819.0" width="24.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.2" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 2.06%)</title><rect x="842.2" y="803.0" width="24.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.2" y="814.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="852.3" y="787.0" width="6.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="855.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="852.3" y="771.0" width="6.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="855.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (6 samples, 0.51%)</title><rect x="858.3" y="787.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.3" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="864.4" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 20.39%)</title><rect x="866.4" y="851.0" width="240.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.4" y="862.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 20.39%)</title><rect x="866.4" y="835.0" width="240.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.4" y="846.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (217 samples, 18.59%)</title><rect x="870.5" y="819.0" width="219.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="873.5" y="830.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.46%)</title><rect x="881.6" y="803.0" width="17.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="884.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.77%)</title><rect x="898.8" y="803.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.77%)</title><rect x="898.8" y="787.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="904.9" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="904.9" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="907.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="904.9" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="907.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="905.9" y="771.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (180 samples, 15.42%)</title><rect x="907.9" y="803.0" width="182.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.9" y="814.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (179 samples, 15.34%)</title><rect x="908.9" y="787.0" width="181.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.9" y="798.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="915.0" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="918.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="916.0" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (164 samples, 14.05%)</title><rect x="917.0" y="771.0" width="165.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="920.0" y="782.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="920.0" y="755.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="922.0" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="925.0" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.71%)</title><rect x="923.1" y="755.0" width="20.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.51%)</title><rect x="930.1" y="739.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="930.1" y="723.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.1" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="931.1" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.1" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="932.2" y="723.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.2" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="934.2" y="723.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="937.2" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="936.2" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.2" y="750.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="937.2" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.34%)</title><rect x="938.2" y="739.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.2" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="942.3" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.3" y="750.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="943.3" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.3" y="766.0"></text>
</g>
<g>
<title>__lll_lock_wait (15 samples, 1.29%)</title><rect x="944.3" y="755.0" width="15.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="947.3" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 3.43%)</title><rect x="959.5" y="755.0" width="40.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="962.5" y="766.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.97%)</title><rect x="999.9" y="755.0" width="58.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1002.9" y="766.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.51%)</title><rect x="1058.6" y="755.0" width="6.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1061.6" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="1064.6" y="755.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1067.6" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.26%)</title><rect x="1066.6" y="755.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1069.6" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1069.7" y="755.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1072.7" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.43%)</title><rect x="1072.7" y="755.0" width="5.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1075.7" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="1077.8" y="755.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1080.8" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1079.8" y="755.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.8" y="766.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1081.8" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.8" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1082.8" y="771.0" width="3.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1085.8" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1085.9" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.9" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1086.9" y="771.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.46%)</title><rect x="1089.9" y="819.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1092.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.46%)</title><rect x="1089.9" y="803.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.46%)</title><rect x="1089.9" y="787.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.46%)</title><rect x="1089.9" y="771.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="1107.1" y="899.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="1107.1" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1110.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="1107.1" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1110.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="1107.1" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="1107.1" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="1107.1" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1110.1" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="1107.1" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="1107.1" y="787.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1110.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1107.1" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1110.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="1108.1" y="899.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="1108.1" y="883.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="1108.1" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="1108.1" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1111.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="1108.1" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.09%)</title><rect x="1109.1" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.1" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.09%)</title><rect x="1109.1" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.1" y="894.0"></text>
</g>
<g>
<title>start_thread (79 samples, 6.77%)</title><rect x="1110.1" y="899.0" width="79.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1113.1" y="910.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (79 samples, 6.77%)</title><rect x="1110.1" y="883.0" width="79.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1113.1" y="894.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.23%)</title><rect x="1110.1" y="867.0" width="26.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.1" y="878.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.60%)</title><rect x="1110.1" y="851.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.1" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.60%)</title><rect x="1110.1" y="835.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.1" y="846.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1110.1" y="819.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.1" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.09%)</title><rect x="1112.1" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.1" y="814.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.34%)</title><rect x="1113.2" y="819.0" width="4.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1116.2" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.63%)</title><rect x="1117.2" y="851.0" width="19.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.94%)</title><rect x="1117.2" y="835.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.2" y="846.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.43%)</title><rect x="1117.2" y="819.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.2" y="830.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.51%)</title><rect x="1122.3" y="819.0" width="6.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1125.3" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1128.3" y="835.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1128.3" y="819.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1128.3" y="803.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1128.3" y="787.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="798.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.17%)</title><rect x="1128.3" y="771.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1130.3" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.3" y="830.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1130.3" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.3" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1131.4" y="835.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.4" y="846.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1131.4" y="819.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1131.4" y="803.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.4" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.26%)</title><rect x="1131.4" y="787.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.4" y="798.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.26%)</title><rect x="1131.4" y="771.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.4" y="782.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.26%)</title><rect x="1131.4" y="755.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="766.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1132.4" y="739.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.4" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1133.4" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="1134.4" y="803.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.17%)</title><rect x="1134.4" y="787.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.4" y="798.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (2 samples, 0.17%)</title><rect x="1134.4" y="771.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (51 samples, 4.37%)</title><rect x="1136.4" y="867.0" width="51.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.4" y="878.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (51 samples, 4.37%)</title><rect x="1136.4" y="851.0" width="51.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="862.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (51 samples, 4.37%)</title><rect x="1136.4" y="835.0" width="51.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="846.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (51 samples, 4.37%)</title><rect x="1136.4" y="819.0" width="51.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="830.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (49 samples, 4.20%)</title><rect x="1136.4" y="803.0" width="49.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.4" y="814.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (49 samples, 4.20%)</title><rect x="1136.4" y="787.0" width="49.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="798.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 2.49%)</title><rect x="1136.4" y="771.0" width="29.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.4" y="782.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1136.4" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.4" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1136.4" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.4" y="750.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1136.4" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="734.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1136.4" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.4" y="718.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1136.4" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.09%)</title><rect x="1136.4" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.4" y="686.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.09%)</title><rect x="1136.4" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1137.4" y="755.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.4" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.26%)</title><rect x="1139.4" y="755.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1139.4" y="739.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.4" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1139.4" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.4" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1140.5" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.5" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1140.5" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.5" y="718.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1140.5" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.5" y="702.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1141.5" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="734.0"></text>
</g>
<g>
<title>Matcher::return_addr() const (1 samples, 0.09%)</title><rect x="1142.5" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1143.5" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1143.5" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1143.5" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="734.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1143.5" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 1.71%)</title><rect x="1144.5" y="755.0" width="20.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.5" y="766.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1144.5" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.5" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1145.5" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1146.5" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1146.5" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="734.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1146.5" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.5" y="718.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1147.5" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1148.5" y="739.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1148.5" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1149.6" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1149.6" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1150.6" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.09%)</title><rect x="1151.6" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1151.6" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="1152.6" y="739.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1152.6" y="723.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.17%)</title><rect x="1154.6" y="739.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.6" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1155.6" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1156.6" y="739.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1157.6" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1158.7" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.34%)</title><rect x="1159.7" y="739.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1160.7" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.7" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1161.7" y="723.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.7" y="734.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1163.7" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1164.7" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 1.20%)</title><rect x="1165.7" y="771.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="782.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1165.7" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1166.7" y="755.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.7" y="766.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1166.7" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.7" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1166.7" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1166.7" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="718.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.09%)</title><rect x="1166.7" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="702.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1167.8" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.60%)</title><rect x="1168.8" y="755.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1168.8" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1169.8" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1169.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.34%)</title><rect x="1170.8" y="739.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.26%)</title><rect x="1171.8" y="723.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.26%)</title><rect x="1171.8" y="707.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1173.8" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1174.8" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1174.8" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1175.8" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1175.8" y="739.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1176.9" y="755.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1176.9" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1176.9" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1177.9" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.09%)</title><rect x="1178.9" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1179.9" y="771.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1179.9" y="755.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1179.9" y="739.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1179.9" y="723.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1179.9" y="707.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1179.9" y="691.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.9" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.9" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::vm_symbol_at(int) (1 samples, 0.09%)</title><rect x="1179.9" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1180.9" y="675.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1180.9" y="659.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1180.9" y="643.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1180.9" y="627.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1180.9" y="611.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1180.9" y="595.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="579.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="563.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="547.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="531.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="515.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="499.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="483.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="467.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="451.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="435.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="419.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.9" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.9" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.9" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.9" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.9" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1180.9" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.9" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.9" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1180.9" y="195.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1180.9" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="190.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.9" y="163.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="174.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1180.9" y="147.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="158.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1180.9" y="131.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="142.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1180.9" y="115.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1181.9" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1181.9" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1181.9" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="387.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="355.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="243.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="179.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="163.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="147.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="115.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="94.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1182.9" y="67.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="51.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.9" y="35.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1183.9" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1183.9" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1183.9" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="670.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1184.9" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="654.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1184.9" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1186.0" y="803.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1186.0" y="787.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1186.0" y="771.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.17%)</title><rect x="1186.0" y="755.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.17%)</title><rect x="1186.0" y="739.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.17%)</title><rect x="1186.0" y="723.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.09%)</title><rect x="1186.0" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.09%)</title><rect x="1186.0" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.09%)</title><rect x="1186.0" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1186.0" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.09%)</title><rect x="1186.0" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.09%)</title><rect x="1186.0" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.09%)</title><rect x="1187.0" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="867.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="851.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="835.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="819.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="787.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::initialize_threshold_raw() (1 samples, 0.09%)</title><rect x="1188.0" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>Universe::print_heap_after_gc(outputStream*, bool) (1 samples, 0.09%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::print_on(outputStream*) const (1 samples, 0.09%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.09%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
</g>
</svg>
