<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (363 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 9.09%)</title><rect x="10.0" y="979.0" width="107.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (33 samples, 9.09%)</title><rect x="10.0" y="963.0" width="107.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.55%)</title><rect x="10.0" y="947.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.28%)</title><rect x="10.0" y="931.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.28%)</title><rect x="13.3" y="931.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.31%)</title><rect x="16.5" y="947.0" width="39.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="958.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1241035899.accept (12 samples, 3.31%)</title><rect x="16.5" y="931.0" width="39.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="942.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (12 samples, 3.31%)</title><rect x="16.5" y="915.0" width="39.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="926.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 1.65%)</title><rect x="19.8" y="899.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 1.65%)</title><rect x="19.8" y="883.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 1.65%)</title><rect x="19.8" y="867.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.28%)</title><rect x="19.8" y="851.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.28%)</title><rect x="19.8" y="835.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/55075391.get$Lambda (1 samples, 0.28%)</title><rect x="19.8" y="819.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="19.8" y="803.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="22.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="19.8" y="787.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="19.8" y="771.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.38%)</title><rect x="23.0" y="851.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.38%)</title><rect x="23.0" y="835.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.38%)</title><rect x="23.0" y="819.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.38%)</title><rect x="23.0" y="803.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.38%)</title><rect x="23.0" y="787.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 1.38%)</title><rect x="23.0" y="771.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.28%)</title><rect x="36.0" y="755.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.28%)</title><rect x="39.3" y="899.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="39.3" y="883.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="39.3" y="867.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.10%)</title><rect x="42.5" y="899.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.83%)</title><rect x="45.8" y="883.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.28%)</title><rect x="52.3" y="867.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="52.3" y="851.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (19 samples, 5.23%)</title><rect x="55.5" y="947.0" width="61.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.5" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (19 samples, 5.23%)</title><rect x="55.5" y="931.0" width="61.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.5" y="942.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (17 samples, 4.68%)</title><rect x="55.5" y="915.0" width="55.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.5" y="926.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (10 samples, 2.75%)</title><rect x="55.5" y="899.0" width="32.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (10 samples, 2.75%)</title><rect x="55.5" y="883.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.5" y="894.0">or..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.28%)</title><rect x="55.5" y="867.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 1.93%)</title><rect x="58.8" y="867.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.8" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.55%)</title><rect x="58.8" y="851.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.28%)</title><rect x="58.8" y="835.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.28%)</title><rect x="58.8" y="819.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.28%)</title><rect x="58.8" y="803.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.28%)</title><rect x="62.0" y="835.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.28%)</title><rect x="62.0" y="819.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.0" y="830.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.28%)</title><rect x="62.0" y="803.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 1.38%)</title><rect x="65.3" y="851.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="65.3" y="835.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="65.3" y="819.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.28%)</title><rect x="65.3" y="803.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.28%)</title><rect x="65.3" y="787.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.28%)</title><rect x="65.3" y="771.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 1.10%)</title><rect x="68.5" y="835.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.55%)</title><rect x="71.8" y="819.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.55%)</title><rect x="71.8" y="803.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.55%)</title><rect x="71.8" y="787.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="74.8" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.55%)</title><rect x="71.8" y="771.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="74.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.28%)</title><rect x="78.3" y="819.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.28%)</title><rect x="78.3" y="803.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.28%)</title><rect x="78.3" y="787.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="78.3" y="771.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.28%)</title><rect x="81.5" y="867.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.28%)</title><rect x="84.8" y="867.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.28%)</title><rect x="84.8" y="851.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.28%)</title><rect x="84.8" y="835.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.28%)</title><rect x="84.8" y="819.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.28%)</title><rect x="84.8" y="803.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.93%)</title><rect x="88.0" y="899.0" width="22.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.0" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.38%)</title><rect x="94.5" y="883.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.38%)</title><rect x="94.5" y="867.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.38%)</title><rect x="94.5" y="851.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.55%)</title><rect x="97.8" y="835.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.55%)</title><rect x="97.8" y="819.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.55%)</title><rect x="97.8" y="803.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.55%)</title><rect x="104.3" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.55%)</title><rect x="104.3" y="819.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.55%)</title><rect x="104.3" y="803.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.55%)</title><rect x="104.3" y="787.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.3" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.28%)</title><rect x="107.5" y="771.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.28%)</title><rect x="107.5" y="755.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="107.5" y="739.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="107.5" y="723.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.28%)</title><rect x="110.8" y="915.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.28%)</title><rect x="110.8" y="899.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.28%)</title><rect x="110.8" y="883.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.28%)</title><rect x="110.8" y="867.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="110.8" y="851.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="110.8" y="835.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="110.8" y="819.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="110.8" y="803.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="110.8" y="787.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="110.8" y="771.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.28%)</title><rect x="110.8" y="755.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.8" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="110.8" y="739.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="113.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="114.0" y="915.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.28%)</title><rect x="114.0" y="899.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.28%)</title><rect x="114.0" y="883.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.28%)</title><rect x="114.0" y="867.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (252 samples, 69.42%)</title><rect x="117.3" y="979.0" width="819.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (252 samples, 69.42%)</title><rect x="117.3" y="963.0" width="819.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (252 samples, 69.42%)</title><rect x="117.3" y="947.0" width="819.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.3" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/55075391.run (236 samples, 65.01%)</title><rect x="117.3" y="931.0" width="767.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/55075391.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (236 samples, 65.01%)</title><rect x="117.3" y="915.0" width="767.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.3" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (236 samples, 65.01%)</title><rect x="117.3" y="899.0" width="767.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (234 samples, 64.46%)</title><rect x="120.5" y="883.0" width="760.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.5" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (39 samples, 10.74%)</title><rect x="127.0" y="867.0" width="126.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.0" y="878.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (39 samples, 10.74%)</title><rect x="127.0" y="851.0" width="126.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.0" y="862.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (39 samples, 10.74%)</title><rect x="127.0" y="835.0" width="126.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.0" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 10.74%)</title><rect x="127.0" y="819.0" width="126.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.0" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 10.74%)</title><rect x="127.0" y="803.0" width="126.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.0" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 10.74%)</title><rect x="127.0" y="787.0" width="126.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.0" y="798.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 3.31%)</title><rect x="127.0" y="771.0" width="39.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="130.0" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.10%)</title><rect x="127.0" y="755.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.10%)</title><rect x="127.0" y="739.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="130.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.83%)</title><rect x="127.0" y="723.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.28%)</title><rect x="136.8" y="723.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.28%)</title><rect x="136.8" y="707.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.20%)</title><rect x="140.0" y="755.0" width="26.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.0" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 2.20%)</title><rect x="140.0" y="739.0" width="26.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.0" y="750.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="140.0" y="723.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="143.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="140.0" y="707.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="140.0" y="691.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.28%)</title><rect x="143.3" y="723.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.55%)</title><rect x="146.5" y="723.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="149.8" y="707.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="149.8" y="691.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 1.10%)</title><rect x="153.0" y="723.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 7.16%)</title><rect x="166.0" y="771.0" width="84.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.0" y="782.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.55%)</title><rect x="166.0" y="755.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.55%)</title><rect x="166.0" y="739.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.28%)</title><rect x="172.5" y="755.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="175.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="172.5" y="739.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="172.5" y="723.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="172.5" y="707.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.28%)</title><rect x="175.8" y="755.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.28%)</title><rect x="175.8" y="739.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (22 samples, 6.06%)</title><rect x="179.0" y="755.0" width="71.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.0" y="766.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.38%)</title><rect x="179.0" y="739.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="179.0" y="723.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.10%)</title><rect x="182.3" y="723.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.10%)</title><rect x="182.3" y="707.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.10%)</title><rect x="182.3" y="691.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.83%)</title><rect x="185.5" y="675.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.83%)</title><rect x="185.5" y="659.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (17 samples, 4.68%)</title><rect x="195.3" y="739.0" width="55.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.3" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (17 samples, 4.68%)</title><rect x="195.3" y="723.0" width="55.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.3" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="195.3" y="707.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 4.41%)</title><rect x="198.5" y="707.0" width="52.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.5" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.10%)</title><rect x="198.5" y="691.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="198.5" y="675.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="198.5" y="659.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="198.5" y="643.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.28%)</title><rect x="198.5" y="627.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.55%)</title><rect x="201.8" y="675.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.28%)</title><rect x="205.0" y="659.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.28%)</title><rect x="205.0" y="643.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="208.3" y="675.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="208.3" y="659.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.28%)</title><rect x="208.3" y="643.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 1.65%)</title><rect x="211.5" y="691.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.55%)</title><rect x="224.5" y="675.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.55%)</title><rect x="224.5" y="659.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.55%)</title><rect x="224.5" y="643.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.55%)</title><rect x="224.5" y="627.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.83%)</title><rect x="231.0" y="691.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.83%)</title><rect x="231.0" y="675.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.83%)</title><rect x="231.0" y="659.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.83%)</title><rect x="231.0" y="643.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.0" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.83%)</title><rect x="231.0" y="627.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.83%)</title><rect x="231.0" y="611.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.0" y="622.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.28%)</title><rect x="237.5" y="595.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.55%)</title><rect x="240.8" y="691.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.55%)</title><rect x="240.8" y="675.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.55%)</title><rect x="240.8" y="659.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.8" y="670.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.28%)</title><rect x="247.3" y="691.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.28%)</title><rect x="250.6" y="771.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.28%)</title><rect x="250.6" y="755.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.28%)</title><rect x="250.6" y="739.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.28%)</title><rect x="250.6" y="723.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (173 samples, 47.66%)</title><rect x="253.8" y="867.0" width="562.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.8" y="878.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (25 samples, 6.89%)</title><rect x="253.8" y="851.0" width="81.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.8" y="862.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (22 samples, 6.06%)</title><rect x="263.6" y="835.0" width="71.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.6" y="846.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 5.51%)</title><rect x="270.1" y="819.0" width="65.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.1" y="830.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.10%)</title><rect x="273.3" y="803.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.83%)</title><rect x="276.6" y="787.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.83%)</title><rect x="276.6" y="771.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.83%)</title><rect x="276.6" y="755.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.83%)</title><rect x="276.6" y="739.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (2 samples, 0.55%)</title><rect x="286.3" y="803.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.55%)</title><rect x="286.3" y="787.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.83%)</title><rect x="292.8" y="803.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.55%)</title><rect x="296.1" y="787.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.55%)</title><rect x="296.1" y="771.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.1" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 2.75%)</title><rect x="302.6" y="803.0" width="32.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.6" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 1.65%)</title><rect x="315.6" y="787.0" width="19.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.65%)</title><rect x="315.6" y="771.0" width="19.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.83%)</title><rect x="335.1" y="851.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.55%)</title><rect x="338.3" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.55%)</title><rect x="338.3" y="819.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (34 samples, 9.37%)</title><rect x="344.8" y="851.0" width="110.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.8" y="862.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (34 samples, 9.37%)</title><rect x="344.8" y="835.0" width="110.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.8" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="348.1" y="819.0" width="6.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="351.1" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="351.3" y="803.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="354.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 4.13%)</title><rect x="354.6" y="819.0" width="48.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.6" y="830.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.75%)</title><rect x="361.1" y="803.0" width="32.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.1" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.75%)</title><rect x="361.1" y="787.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.1" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.65%)</title><rect x="361.1" y="771.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.1" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.65%)</title><rect x="361.1" y="755.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.65%)</title><rect x="361.1" y="739.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.10%)</title><rect x="361.1" y="723.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="364.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.55%)</title><rect x="361.1" y="707.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.1" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="361.1" y="691.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="364.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="364.3" y="691.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.3" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="367.6" y="707.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="370.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="367.6" y="691.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="370.6" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="367.6" y="675.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="370.6" y="686.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.28%)</title><rect x="367.6" y="659.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="370.6" y="670.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.28%)</title><rect x="370.8" y="707.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="373.8" y="718.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (2 samples, 0.55%)</title><rect x="374.1" y="723.0" width="6.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="377.1" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 1.10%)</title><rect x="380.6" y="771.0" width="13.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="383.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.28%)</title><rect x="393.6" y="803.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="393.6" y="787.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="396.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.28%)</title><rect x="393.6" y="771.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="396.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.28%)</title><rect x="393.6" y="755.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="396.6" y="766.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.28%)</title><rect x="396.8" y="803.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="399.8" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="400.1" y="803.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="403.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="403.3" y="819.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.28%)</title><rect x="403.3" y="803.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="403.3" y="787.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (15 samples, 4.13%)</title><rect x="406.6" y="819.0" width="48.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.6" y="830.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (15 samples, 4.13%)</title><rect x="406.6" y="803.0" width="48.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.6" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.83%)</title><rect x="406.6" y="787.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.83%)</title><rect x="406.6" y="771.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.55%)</title><rect x="409.8" y="755.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.55%)</title><rect x="409.8" y="739.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.55%)</title><rect x="409.8" y="723.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.55%)</title><rect x="416.3" y="787.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.55%)</title><rect x="416.3" y="771.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.55%)</title><rect x="416.3" y="755.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.55%)</title><rect x="416.3" y="739.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.55%)</title><rect x="416.3" y="723.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 2.75%)</title><rect x="422.8" y="787.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.8" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.48%)</title><rect x="426.1" y="771.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.1" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.20%)</title><rect x="429.3" y="755.0" width="26.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="432.3" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.10%)</title><rect x="442.3" y="739.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.55%)</title><rect x="448.8" y="723.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="451.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.55%)</title><rect x="448.8" y="707.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="451.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="448.8" y="691.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="451.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="448.8" y="675.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="451.8" y="686.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.28%)</title><rect x="452.1" y="691.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="455.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (95 samples, 26.17%)</title><rect x="455.3" y="851.0" width="308.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.3" y="862.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (95 samples, 26.17%)</title><rect x="455.3" y="835.0" width="308.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.3" y="846.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1895118244.process (80 samples, 22.04%)</title><rect x="458.6" y="819.0" width="260.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.6" y="830.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (80 samples, 22.04%)</title><rect x="458.6" y="803.0" width="260.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.6" y="814.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (78 samples, 21.49%)</title><rect x="458.6" y="787.0" width="253.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.6" y="798.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="468.3" y="771.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="468.3" y="755.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.28%)</title><rect x="468.3" y="739.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.28%)</title><rect x="468.3" y="723.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.28%)</title><rect x="468.3" y="707.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.28%)</title><rect x="468.3" y="691.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (73 samples, 20.11%)</title><rect x="471.6" y="771.0" width="237.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.6" y="782.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (72 samples, 19.83%)</title><rect x="474.8" y="755.0" width="234.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.8" y="766.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.10%)</title><rect x="500.9" y="739.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="503.9" y="750.0"></text>
</g>
<g>
<title>JVM_Sleep (52 samples, 14.33%)</title><rect x="513.9" y="739.0" width="169.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="516.9" y="750.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (8 samples, 2.20%)</title><rect x="523.6" y="723.0" width="26.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="526.6" y="734.0">H..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="549.6" y="723.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="552.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="552.9" y="723.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="555.9" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="559.4" y="723.0" width="6.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="562.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="559.4" y="707.0" width="6.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="562.4" y="718.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 9.92%)</title><rect x="565.9" y="723.0" width="117.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="568.9" y="734.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="585.4" y="707.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="588.4" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="588.6" y="707.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="591.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="588.6" y="691.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="591.6" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 1.65%)</title><rect x="595.1" y="707.0" width="19.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="598.1" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="614.6" y="707.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="617.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.03%)</title><rect x="617.9" y="707.0" width="35.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="620.9" y="718.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="653.6" y="707.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="656.6" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="656.9" y="707.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="659.9" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.38%)</title><rect x="660.1" y="707.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.1" y="718.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.55%)</title><rect x="676.4" y="707.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="679.4" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="682.9" y="739.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="685.9" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.55%)</title><rect x="686.1" y="739.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="689.1" y="750.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.55%)</title><rect x="692.6" y="739.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.6" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="699.1" y="739.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.1" y="750.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2 samples, 0.55%)</title><rect x="702.4" y="739.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="705.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="708.9" y="771.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="711.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="708.9" y="755.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="708.9" y="739.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.55%)</title><rect x="712.1" y="787.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="715.4" y="771.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="715.4" y="755.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="718.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="715.4" y="739.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="715.4" y="723.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="718.7" y="819.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="718.7" y="803.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="718.7" y="787.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="721.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="718.7" y="771.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="721.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="718.7" y="755.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="721.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="718.7" y="739.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="721.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="718.7" y="723.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (1 samples, 0.28%)</title><rect x="721.9" y="819.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1796624967.get (1 samples, 0.28%)</title><rect x="721.9" y="803.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.28%)</title><rect x="721.9" y="787.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.28%)</title><rect x="725.2" y="819.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.28%)</title><rect x="725.2" y="803.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="728.2" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.28%)</title><rect x="725.2" y="787.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="728.4" y="819.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="728.4" y="803.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.4" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.28%)</title><rect x="728.4" y="787.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="731.7" y="819.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="731.7" y="803.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.28%)</title><rect x="731.7" y="787.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.28%)</title><rect x="731.7" y="771.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="734.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.83%)</title><rect x="734.9" y="819.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="741.4" y="803.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (6 samples, 1.65%)</title><rect x="744.7" y="819.0" width="19.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.41%)</title><rect x="764.2" y="851.0" width="52.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.2" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.93%)</title><rect x="793.4" y="835.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.4" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.93%)</title><rect x="793.4" y="819.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.4" y="830.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/408503423.accept (7 samples, 1.93%)</title><rect x="793.4" y="803.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.4" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (7 samples, 1.93%)</title><rect x="793.4" y="787.0" width="22.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.4" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1031541781.complete (7 samples, 1.93%)</title><rect x="793.4" y="771.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.4" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (7 samples, 1.93%)</title><rect x="793.4" y="755.0" width="22.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.4" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/329528017.complete (7 samples, 1.93%)</title><rect x="793.4" y="739.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.4" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (7 samples, 1.93%)</title><rect x="793.4" y="723.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.4" y="734.0">c..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="803.2" y="707.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="806.2" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.83%)</title><rect x="806.4" y="707.0" width="9.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="809.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.83%)</title><rect x="806.4" y="691.0" width="9.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="809.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 5.23%)</title><rect x="816.2" y="867.0" width="61.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.2" y="878.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.28%)</title><rect x="816.2" y="851.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 4.96%)</title><rect x="819.4" y="851.0" width="58.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="822.4" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 4.96%)</title><rect x="819.4" y="835.0" width="58.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.4" y="846.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/408503423.accept (18 samples, 4.96%)</title><rect x="819.4" y="819.0" width="58.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.4" y="830.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (18 samples, 4.96%)</title><rect x="819.4" y="803.0" width="58.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.4" y="814.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1031541781.complete (18 samples, 4.96%)</title><rect x="819.4" y="787.0" width="58.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.4" y="798.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (18 samples, 4.96%)</title><rect x="819.4" y="771.0" width="58.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="822.4" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (7 samples, 1.93%)</title><rect x="819.4" y="755.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.4" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 1.93%)</title><rect x="819.4" y="739.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="822.4" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 1.93%)</title><rect x="819.4" y="723.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.4" y="734.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.93%)</title><rect x="819.4" y="707.0" width="22.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="822.4" y="718.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.93%)</title><rect x="819.4" y="691.0" width="22.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="822.4" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.28%)</title><rect x="838.9" y="675.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/329528017.complete (11 samples, 3.03%)</title><rect x="842.2" y="755.0" width="35.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.2" y="766.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (11 samples, 3.03%)</title><rect x="842.2" y="739.0" width="35.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.2" y="750.0">com..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="877.9" y="867.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="877.9" y="851.0" width="3.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="880.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.28%)</title><rect x="881.2" y="883.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="884.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 1.65%)</title><rect x="884.4" y="931.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="887.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.65%)</title><rect x="884.4" y="915.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="887.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.65%)</title><rect x="884.4" y="899.0" width="19.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.65%)</title><rect x="884.4" y="883.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.28%)</title><rect x="900.7" y="867.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.75%)</title><rect x="903.9" y="931.0" width="32.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.9" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.48%)</title><rect x="907.2" y="915.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.2" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.83%)</title><rect x="907.2" y="899.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.83%)</title><rect x="907.2" y="883.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="910.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.83%)</title><rect x="907.2" y="867.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.83%)</title><rect x="907.2" y="851.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.83%)</title><rect x="907.2" y="835.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.65%)</title><rect x="916.9" y="899.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.65%)</title><rect x="916.9" y="883.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="919.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.65%)</title><rect x="916.9" y="867.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.65%)</title><rect x="916.9" y="851.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.55%)</title><rect x="936.4" y="979.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.55%)</title><rect x="936.4" y="963.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.55%)</title><rect x="936.4" y="947.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="939.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="936.4" y="931.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="936.4" y="915.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="936.4" y="899.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="936.4" y="883.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="939.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.28%)</title><rect x="936.4" y="867.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="939.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.28%)</title><rect x="936.4" y="851.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.28%)</title><rect x="936.4" y="835.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.28%)</title><rect x="936.4" y="819.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.28%)</title><rect x="936.4" y="803.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.28%)</title><rect x="939.7" y="931.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="942.7" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.28%)</title><rect x="939.7" y="915.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="942.7" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.28%)</title><rect x="939.7" y="899.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.7" y="910.0"></text>
</g>
<g>
<title>start_thread (76 samples, 20.94%)</title><rect x="942.9" y="979.0" width="247.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="945.9" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (76 samples, 20.94%)</title><rect x="942.9" y="963.0" width="247.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="945.9" y="974.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 5.79%)</title><rect x="942.9" y="947.0" width="68.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.9" y="958.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.83%)</title><rect x="942.9" y="931.0" width="9.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="945.9" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.83%)</title><rect x="942.9" y="915.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="945.9" y="926.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.83%)</title><rect x="942.9" y="899.0" width="9.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="945.9" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 4.96%)</title><rect x="952.7" y="931.0" width="58.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.7" y="942.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 4.13%)</title><rect x="952.7" y="915.0" width="48.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.7" y="926.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 3.86%)</title><rect x="952.7" y="899.0" width="45.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="955.7" y="910.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.48%)</title><rect x="962.5" y="883.0" width="29.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.5" y="894.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.83%)</title><rect x="975.5" y="867.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.5" y="878.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.28%)</title><rect x="982.0" y="851.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.0" y="862.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.28%)</title><rect x="985.2" y="867.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.2" y="878.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.28%)</title><rect x="985.2" y="851.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.2" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.28%)</title><rect x="988.5" y="867.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.5" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.55%)</title><rect x="991.7" y="883.0" width="6.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="994.7" y="894.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.28%)</title><rect x="998.2" y="899.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.2" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="1001.5" y="915.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.5" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="1001.5" y="899.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.5" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1001.5" y="883.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1001.5" y="867.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.5" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="1001.5" y="851.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.5" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="1001.5" y="835.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.5" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="1001.5" y="819.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.55%)</title><rect x="1004.7" y="915.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.7" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.55%)</title><rect x="1004.7" y="899.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.55%)</title><rect x="1004.7" y="883.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.7" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.55%)</title><rect x="1004.7" y="867.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.7" y="878.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.55%)</title><rect x="1004.7" y="851.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.7" y="862.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.55%)</title><rect x="1004.7" y="835.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.7" y="846.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.55%)</title><rect x="1004.7" y="819.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.7" y="830.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.55%)</title><rect x="1004.7" y="803.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.7" y="814.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.28%)</title><rect x="1008.0" y="787.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (53 samples, 14.60%)</title><rect x="1011.2" y="947.0" width="172.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.2" y="958.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (53 samples, 14.60%)</title><rect x="1011.2" y="931.0" width="172.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.2" y="942.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (53 samples, 14.60%)</title><rect x="1011.2" y="915.0" width="172.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.2" y="926.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (52 samples, 14.33%)</title><rect x="1011.2" y="899.0" width="169.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.2" y="910.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (48 samples, 13.22%)</title><rect x="1011.2" y="883.0" width="156.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.2" y="894.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (48 samples, 13.22%)</title><rect x="1011.2" y="867.0" width="156.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.2" y="878.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.28%)</title><rect x="1011.2" y="851.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.2" y="862.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.28%)</title><rect x="1011.2" y="835.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.2" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1011.2" y="819.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1011.2" y="803.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.2" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1011.2" y="787.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.2" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1011.2" y="771.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.2" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1011.2" y="755.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.2" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1011.2" y="739.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.28%)</title><rect x="1011.2" y="723.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.2" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1011.2" y="707.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1011.2" y="691.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.2" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1011.2" y="675.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.2" y="686.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1011.2" y="659.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.2" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.28%)</title><rect x="1011.2" y="643.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.2" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1011.2" y="627.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.2" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.28%)</title><rect x="1011.2" y="611.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.2" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1011.2" y="595.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.2" y="606.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.28%)</title><rect x="1011.2" y="579.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.2" y="590.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 7.16%)</title><rect x="1014.5" y="851.0" width="84.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.5" y="862.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.83%)</title><rect x="1014.5" y="835.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.5" y="846.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.55%)</title><rect x="1014.5" y="819.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.5" y="830.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.28%)</title><rect x="1021.0" y="819.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="830.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.28%)</title><rect x="1021.0" y="803.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.0" y="814.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.28%)</title><rect x="1021.0" y="787.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.0" y="798.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.28%)</title><rect x="1021.0" y="771.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.0" y="782.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="1021.0" y="755.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.0" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.55%)</title><rect x="1024.2" y="835.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.2" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="1027.5" y="819.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.5" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.83%)</title><rect x="1030.7" y="835.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.7" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.83%)</title><rect x="1030.7" y="819.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.7" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.55%)</title><rect x="1034.0" y="803.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.0" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="1037.2" y="787.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.2" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="1037.2" y="771.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.55%)</title><rect x="1040.5" y="835.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.55%)</title><rect x="1040.5" y="819.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1040.5" y="803.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1043.7" y="803.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.28%)</title><rect x="1043.7" y="787.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 4.41%)</title><rect x="1047.0" y="835.0" width="52.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1050.0" y="846.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1047.0" y="819.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="1050.2" y="819.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.2" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.28%)</title><rect x="1050.2" y="803.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.2" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1050.2" y="787.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.55%)</title><rect x="1053.5" y="819.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.5" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1053.5" y="803.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.5" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="1056.7" y="803.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.28%)</title><rect x="1060.0" y="819.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.65%)</title><rect x="1063.2" y="819.0" width="19.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.2" y="830.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.28%)</title><rect x="1073.0" y="803.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.28%)</title><rect x="1076.2" y="803.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.2" y="814.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.28%)</title><rect x="1079.5" y="803.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.55%)</title><rect x="1082.7" y="819.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.55%)</title><rect x="1089.2" y="819.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.55%)</title><rect x="1089.2" y="803.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1092.5" y="787.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.5" y="798.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="1092.5" y="771.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.5" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.28%)</title><rect x="1095.7" y="819.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.7" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 3.03%)</title><rect x="1099.0" y="851.0" width="35.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.0" y="862.0">Com..</text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1099.0" y="835.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.0" y="846.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.28%)</title><rect x="1102.2" y="835.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.2" y="846.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1102.2" y="819.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.2" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1102.2" y="803.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 1.65%)</title><rect x="1105.5" y="835.0" width="19.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.5" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_range_check(PhaseIdealLoop*) const (1 samples, 0.28%)</title><rect x="1105.5" y="819.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.5" y="830.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.28%)</title><rect x="1108.7" y="819.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1112.0" y="819.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.28%)</title><rect x="1112.0" y="803.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.28%)</title><rect x="1112.0" y="787.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.83%)</title><rect x="1115.2" y="819.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.83%)</title><rect x="1115.2" y="803.0" width="9.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.55%)</title><rect x="1115.2" y="787.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="798.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1115.2" y="771.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="782.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1115.2" y="755.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.2" y="766.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1118.5" y="771.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1121.7" y="787.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.7" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1121.7" y="771.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.83%)</title><rect x="1125.0" y="835.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.0" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.28%)</title><rect x="1125.0" y="819.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.55%)</title><rect x="1128.2" y="819.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.2" y="830.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1128.2" y="803.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.2" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1131.5" y="803.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.28%)</title><rect x="1131.5" y="787.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1131.5" y="771.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1131.5" y="755.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1131.5" y="739.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1131.5" y="723.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1131.5" y="707.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.5" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1131.5" y="691.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.75%)</title><rect x="1134.7" y="851.0" width="32.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.7" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.75%)</title><rect x="1134.7" y="835.0" width="32.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 2.75%)</title><rect x="1134.7" y="819.0" width="32.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 2.75%)</title><rect x="1134.7" y="803.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 2.75%)</title><rect x="1134.7" y="787.0" width="32.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.7" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 2.75%)</title><rect x="1134.7" y="771.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="782.0">Pa..</text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.28%)</title><rect x="1134.7" y="755.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1134.7" y="739.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1134.7" y="723.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.28%)</title><rect x="1134.7" y="707.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1134.7" y="691.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.7" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1134.7" y="675.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.7" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.28%)</title><rect x="1134.7" y="659.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.7" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.28%)</title><rect x="1134.7" y="643.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.93%)</title><rect x="1138.0" y="755.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="766.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.93%)</title><rect x="1138.0" y="739.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.0" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.93%)</title><rect x="1138.0" y="723.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.0" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.93%)</title><rect x="1138.0" y="707.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.0" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.93%)</title><rect x="1138.0" y="691.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.0" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.65%)</title><rect x="1138.0" y="675.0" width="19.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.10%)</title><rect x="1138.0" y="659.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.10%)</title><rect x="1138.0" y="643.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.10%)</title><rect x="1138.0" y="627.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.10%)</title><rect x="1138.0" y="611.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.10%)</title><rect x="1138.0" y="595.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.83%)</title><rect x="1138.0" y="579.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.83%)</title><rect x="1138.0" y="563.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.83%)</title><rect x="1138.0" y="547.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.83%)</title><rect x="1138.0" y="531.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.83%)</title><rect x="1138.0" y="515.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.83%)</title><rect x="1138.0" y="499.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1138.0" y="483.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1138.0" y="467.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1138.0" y="451.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1138.0" y="435.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1138.0" y="419.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1138.0" y="403.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1138.0" y="387.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1138.0" y="371.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1138.0" y="355.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1138.0" y="339.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1138.0" y="323.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1138.0" y="307.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1138.0" y="291.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1138.0" y="275.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1138.0" y="259.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1138.0" y="243.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1138.0" y="227.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1138.0" y="211.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1138.0" y="195.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1138.0" y="179.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1138.0" y="163.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.0" y="174.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.28%)</title><rect x="1138.0" y="147.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.0" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1138.0" y="131.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.0" y="142.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1138.0" y="115.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1138.0" y="99.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.28%)</title><rect x="1138.0" y="83.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.0" y="94.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1138.0" y="67.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.0" y="78.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.28%)</title><rect x="1138.0" y="51.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="1138.0" y="35.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1141.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1141.2" y="195.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.2" y="206.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.28%)</title><rect x="1141.2" y="179.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.2" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1141.2" y="163.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.2" y="174.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1141.2" y="147.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.2" y="158.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1141.2" y="131.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.2" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1141.2" y="115.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.2" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.28%)</title><rect x="1141.2" y="99.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.2" y="110.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.28%)</title><rect x="1141.2" y="83.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1144.5" y="483.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1144.5" y="467.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.5" y="478.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.28%)</title><rect x="1144.5" y="451.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.5" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.28%)</title><rect x="1144.5" y="435.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.5" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1144.5" y="419.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.5" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1144.5" y="403.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.5" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.28%)</title><rect x="1144.5" y="387.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.5" y="398.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.28%)</title><rect x="1144.5" y="371.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.5" y="382.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.28%)</title><rect x="1144.5" y="355.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1147.7" y="579.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1147.7" y="563.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.7" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1147.7" y="547.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="558.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1147.7" y="531.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.7" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.28%)</title><rect x="1147.7" y="515.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.28%)</title><rect x="1147.7" y="499.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1147.7" y="483.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.7" y="494.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1147.7" y="467.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1151.0" y="659.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1151.0" y="643.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1151.0" y="627.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1151.0" y="611.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1151.0" y="595.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1151.0" y="579.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1151.0" y="563.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1151.0" y="547.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1151.0" y="531.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1151.0" y="515.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1151.0" y="499.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1151.0" y="483.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1151.0" y="467.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1151.0" y="451.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1151.0" y="435.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1151.0" y="419.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1151.0" y="403.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1151.0" y="387.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1151.0" y="371.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1151.0" y="355.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1151.0" y="339.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1151.0" y="323.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1151.0" y="307.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1151.0" y="291.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1151.0" y="275.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.0" y="286.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.28%)</title><rect x="1151.0" y="259.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.28%)</title><rect x="1151.0" y="243.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="254.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.28%)</title><rect x="1151.0" y="227.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="238.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="1151.0" y="211.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1154.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1154.2" y="371.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1154.2" y="355.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="366.0"></text>
</g>
<g>
<title>Node::raise_bottom_type(Type const*) (1 samples, 0.28%)</title><rect x="1154.2" y="339.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1157.5" y="675.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1157.5" y="659.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1157.5" y="643.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.28%)</title><rect x="1157.5" y="627.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="638.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.28%)</title><rect x="1157.5" y="611.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.5" y="622.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.28%)</title><rect x="1157.5" y="595.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="606.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.28%)</title><rect x="1157.5" y="579.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1160.7" y="755.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1160.7" y="739.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1160.7" y="723.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1160.7" y="707.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1160.7" y="691.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1160.7" y="675.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1160.7" y="659.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1160.7" y="643.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1160.7" y="627.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1160.7" y="611.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1160.7" y="595.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1160.7" y="579.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1160.7" y="563.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.7" y="547.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.7" y="531.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.7" y="515.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.7" y="499.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.7" y="483.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.7" y="467.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.7" y="451.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.7" y="435.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.7" y="419.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.7" y="403.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.7" y="387.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.7" y="371.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.7" y="355.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.7" y="339.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.7" y="323.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.7" y="307.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.7" y="291.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1160.7" y="275.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1160.7" y="259.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.7" y="270.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1160.7" y="243.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.28%)</title><rect x="1164.0" y="547.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1164.0" y="531.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.10%)</title><rect x="1167.2" y="883.0" width="13.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.10%)</title><rect x="1167.2" y="867.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.2" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.10%)</title><rect x="1167.2" y="851.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.55%)</title><rect x="1167.2" y="835.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="846.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.55%)</title><rect x="1167.2" y="819.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.2" y="830.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.55%)</title><rect x="1167.2" y="803.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.2" y="814.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.55%)</title><rect x="1167.2" y="787.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.2" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.55%)</title><rect x="1167.2" y="771.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.55%)</title><rect x="1167.2" y="755.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.55%)</title><rect x="1167.2" y="739.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.2" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.55%)</title><rect x="1167.2" y="723.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.55%)</title><rect x="1167.2" y="707.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.55%)</title><rect x="1167.2" y="691.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1167.2" y="675.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1167.2" y="659.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1167.2" y="643.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1167.2" y="627.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1167.2" y="611.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1167.2" y="595.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.2" y="606.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1167.2" y="579.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.28%)</title><rect x="1167.2" y="563.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.2" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.28%)</title><rect x="1167.2" y="547.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="558.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, bool, Thread*) (1 samples, 0.28%)</title><rect x="1167.2" y="531.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.2" y="542.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.28%)</title><rect x="1167.2" y="515.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="526.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.28%)</title><rect x="1167.2" y="499.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="510.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.28%)</title><rect x="1170.5" y="675.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="686.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.55%)</title><rect x="1173.7" y="835.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.55%)</title><rect x="1173.7" y="819.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.55%)</title><rect x="1173.7" y="803.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.28%)</title><rect x="1173.7" y="787.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="1173.7" y="771.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.28%)</title><rect x="1177.0" y="787.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.28%)</title><rect x="1180.2" y="899.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.28%)</title><rect x="1180.2" y="883.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.28%)</title><rect x="1180.2" y="867.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.28%)</title><rect x="1180.2" y="851.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.28%)</title><rect x="1183.5" y="947.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.28%)</title><rect x="1183.5" y="931.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.28%)</title><rect x="1183.5" y="915.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.28%)</title><rect x="1183.5" y="899.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.5" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.28%)</title><rect x="1183.5" y="883.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="894.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1183.5" y="867.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="878.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1183.5" y="851.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="1183.5" y="835.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.28%)</title><rect x="1183.5" y="819.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.5" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1183.5" y="803.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1186.5" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.28%)</title><rect x="1186.7" y="947.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="958.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.28%)</title><rect x="1186.7" y="931.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1186.7" y="915.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1186.7" y="899.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.28%)</title><rect x="1186.7" y="883.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1189.7" y="894.0"></text>
</g>
</g>
</svg>
