<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (1,227 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (311 samples, 25.35%)</title><rect x="11.0" y="1155.0" width="299.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1166.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.poll (308 samples, 25.10%)</title><rect x="12.9" y="1139.0" width="296.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1150.0">com/linecorp/decaton/processor/runtime/C..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.pausePartitions (3 samples, 0.24%)</title><rect x="12.9" y="1123.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.24%)</title><rect x="12.9" y="1107.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="12.9" y="1091.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="13.8" y="1091.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="13.8" y="1075.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.8" y="1059.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="14.8" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="14.8" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="14.8" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="14.8" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="14.8" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="14.8" y="963.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updatePartitionsStatus (9 samples, 0.73%)</title><rect x="15.8" y="1123.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (9 samples, 0.73%)</title><rect x="15.8" y="1107.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.73%)</title><rect x="15.8" y="1091.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$262/659433567.accept (9 samples, 0.73%)</title><rect x="15.8" y="1075.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (9 samples, 0.73%)</title><rect x="15.8" y="1059.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="16.7" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.57%)</title><rect x="17.7" y="1043.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.41%)</title><rect x="19.6" y="1027.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.6" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="23.5" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (239 samples, 19.48%)</title><rect x="24.4" y="1123.0" width="229.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.4" y="1134.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager$$Lambda$259/237249544.accept (230 samples, 18.74%)</title><rect x="24.4" y="1107.0" width="221.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.4" y="1118.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (229 samples, 18.66%)</title><rect x="25.4" y="1091.0" width="220.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.4" y="1102.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (180 samples, 14.67%)</title><rect x="30.2" y="1075.0" width="173.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.2" y="1086.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (180 samples, 14.67%)</title><rect x="30.2" y="1059.0" width="173.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.2" y="1070.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (180 samples, 14.67%)</title><rect x="30.2" y="1043.0" width="173.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.2" y="1054.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.08%)</title><rect x="30.2" y="1027.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="30.2" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/970167631.get$Lambda (1 samples, 0.08%)</title><rect x="30.2" y="995.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="30.2" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="30.2" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="33.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="30.2" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="33.2" y="958.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="30.2" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="33.2" y="942.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="30.2" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="33.2" y="926.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="30.2" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (179 samples, 14.59%)</title><rect x="31.2" y="1027.0" width="172.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="1038.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (179 samples, 14.59%)</title><rect x="31.2" y="1011.0" width="172.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.2" y="1022.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (179 samples, 14.59%)</title><rect x="31.2" y="995.0" width="172.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.2" y="1006.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (120 samples, 9.78%)</title><rect x="78.3" y="979.0" width="115.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.3" y="990.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (28 samples, 2.28%)</title><rect x="78.3" y="963.0" width="26.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.3" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (28 samples, 2.28%)</title><rect x="78.3" y="947.0" width="26.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.3" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (28 samples, 2.28%)</title><rect x="78.3" y="931.0" width="26.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.3" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.65%)</title><rect x="105.2" y="963.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.65%)</title><rect x="105.2" y="947.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="107.1" y="931.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.1" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="107.1" y="915.0" width="2.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="110.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.33%)</title><rect x="109.1" y="931.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 6.85%)</title><rect x="112.9" y="963.0" width="80.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.9" y="974.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 6.85%)</title><rect x="112.9" y="947.0" width="80.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.9" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 6.76%)</title><rect x="112.9" y="931.0" width="79.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.9" y="942.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 6.76%)</title><rect x="112.9" y="915.0" width="79.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="115.9" y="926.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 6.52%)</title><rect x="115.8" y="899.0" width="76.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.8" y="910.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="116.7" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="119.7" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.62%)</title><rect x="117.7" y="883.0" width="66.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="120.7" y="894.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="118.7" y="867.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="121.7" y="878.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="119.6" y="867.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="122.6" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="121.6" y="867.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="124.6" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.26%)</title><rect x="123.5" y="867.0" width="38.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="126.5" y="878.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.16%)</title><rect x="161.9" y="867.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="164.9" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 1.71%)</title><rect x="163.9" y="867.0" width="20.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="166.9" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.57%)</title><rect x="184.1" y="883.0" width="6.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="187.1" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="190.8" y="883.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="193.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="192.7" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.49%)</title><rect x="193.7" y="979.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.41%)</title><rect x="193.7" y="963.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.41%)</title><rect x="193.7" y="947.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="198.5" y="963.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="198.5" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.5" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="199.5" y="979.0" width="3.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="202.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.33%)</title><rect x="203.3" y="1075.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.33%)</title><rect x="203.3" y="1059.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (7 samples, 0.57%)</title><rect x="207.1" y="1075.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.57%)</title><rect x="207.1" y="1059.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.57%)</title><rect x="207.1" y="1043.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 2.61%)</title><rect x="213.9" y="1075.0" width="30.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.9" y="1086.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="214.8" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.36%)</title><rect x="215.8" y="1059.0" width="27.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="1070.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.41%)</title><rect x="234.1" y="1043.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.24%)</title><rect x="234.1" y="1027.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.24%)</title><rect x="234.1" y="1011.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.24%)</title><rect x="234.1" y="995.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="236.0" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="239.0" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="236.0" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="237.0" y="1027.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.0" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="238.9" y="1043.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="241.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="239.8" y="1043.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="242.8" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="243.7" y="1059.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="246.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="244.7" y="1075.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="247.7" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="245.6" y="1107.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="248.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="246.6" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="246.6" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="247.5" y="1107.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="247.5" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.5" y="1075.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.08%)</title><rect x="247.5" y="1059.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.41%)</title><rect x="248.5" y="1107.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.41%)</title><rect x="248.5" y="1091.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.41%)</title><rect x="248.5" y="1075.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.41%)</title><rect x="248.5" y="1059.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="252.3" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="253.3" y="1107.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="253.3" y="1091.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.65%)</title><rect x="254.3" y="1123.0" width="54.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.3" y="1134.0">org/a..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="254.3" y="1107.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="257.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.56%)</title><rect x="255.2" y="1107.0" width="53.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.2" y="1118.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.02%)</title><rect x="255.2" y="1091.0" width="35.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.2" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="255.2" y="1075.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="255.2" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.2" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="255.2" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="258.2" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.08%)</title><rect x="255.2" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="258.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.93%)</title><rect x="256.2" y="1075.0" width="34.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.85%)</title><rect x="257.2" y="1059.0" width="33.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.2" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.36%)</title><rect x="257.2" y="1043.0" width="27.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.2" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.36%)</title><rect x="257.2" y="1027.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.2" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.81%)</title><rect x="257.2" y="1011.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="262.0" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="262.0" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="262.0" y="963.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="262.0" y="947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="262.0" y="931.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="262.0" y="915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="262.0" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="262.0" y="883.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="262.0" y="867.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.08%)</title><rect x="262.0" y="851.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.24%)</title><rect x="262.9" y="995.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.24%)</title><rect x="262.9" y="979.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.24%)</title><rect x="262.9" y="963.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.24%)</title><rect x="262.9" y="947.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.24%)</title><rect x="262.9" y="931.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.24%)</title><rect x="262.9" y="915.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.24%)</title><rect x="262.9" y="899.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="265.8" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="265.8" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="265.8" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="265.8" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.8" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="265.8" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (18 samples, 1.47%)</title><rect x="266.8" y="1011.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (18 samples, 1.47%)</title><rect x="266.8" y="995.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (18 samples, 1.47%)</title><rect x="266.8" y="979.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.8" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (18 samples, 1.47%)</title><rect x="266.8" y="963.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.8" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (12 samples, 0.98%)</title><rect x="271.6" y="947.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.6" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="280.2" y="931.0" width="2.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="283.2" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.08%)</title><rect x="283.1" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.1" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="283.1" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="286.1" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="283.1" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="286.1" y="926.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.08%)</title><rect x="283.1" y="899.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="286.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="284.1" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="285.0" y="1043.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="285.0" y="1027.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="285.0" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="285.0" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="285.0" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="285.0" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.0" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="285.0" y="947.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="288.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="286.0" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="286.0" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.0" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="286.0" y="979.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="289.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="287.0" y="1043.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.08%)</title><rect x="287.0" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="287.0" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="287.0" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="287.9" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.08%)</title><rect x="288.9" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="289.9" y="1043.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.49%)</title><rect x="290.8" y="1091.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.49%)</title><rect x="290.8" y="1075.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.33%)</title><rect x="290.8" y="1059.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="290.8" y="1043.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/553872973.accept (2 samples, 0.16%)</title><rect x="290.8" y="1027.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="291.8" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="291.8" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="291.8" y="979.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="291.8" y="963.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="291.8" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="291.8" y="931.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="291.8" y="915.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="292.7" y="1043.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="292.7" y="1027.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.7" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.16%)</title><rect x="292.7" y="1011.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="292.7" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.7" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="292.7" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.7" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="292.7" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="293.7" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="293.7" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.7" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.08%)</title><rect x="293.7" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="294.7" y="1059.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="294.7" y="1043.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="294.7" y="1027.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="294.7" y="1011.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="295.6" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="295.6" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="295.6" y="963.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="295.6" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.6" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="295.6" y="931.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="298.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="296.6" y="1091.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.57%)</title><rect x="297.5" y="1091.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.57%)</title><rect x="297.5" y="1075.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="297.5" y="1059.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="297.5" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="297.5" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.08%)</title><rect x="297.5" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.08%)</title><rect x="297.5" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="297.5" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.49%)</title><rect x="298.5" y="1059.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.08%)</title><rect x="298.5" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.08%)</title><rect x="298.5" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.08%)</title><rect x="298.5" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="298.5" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.41%)</title><rect x="299.5" y="1043.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="299.5" y="1027.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="299.5" y="1011.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="299.5" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="302.5" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="299.5" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="302.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.33%)</title><rect x="300.4" y="1027.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.33%)</title><rect x="300.4" y="1011.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.33%)</title><rect x="300.4" y="995.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.33%)</title><rect x="300.4" y="979.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.33%)</title><rect x="300.4" y="963.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.4" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.33%)</title><rect x="300.4" y="947.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.4" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="300.4" y="931.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="303.4" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="303.3" y="931.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="306.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.33%)</title><rect x="304.3" y="1091.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.33%)</title><rect x="304.3" y="1075.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="304.3" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.3" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="304.3" y="1043.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="304.3" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.24%)</title><rect x="305.2" y="1059.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="305.2" y="1043.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="305.2" y="1027.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="305.2" y="1011.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="305.2" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="306.2" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="307.2" y="1043.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="308.1" y="1091.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="308.1" y="1075.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="308.1" y="1059.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="308.1" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.08%)</title><rect x="309.1" y="1139.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (766 samples, 62.43%)</title><rect x="310.0" y="1155.0" width="736.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.0" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (766 samples, 62.43%)</title><rect x="310.0" y="1139.0" width="736.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.0" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (766 samples, 62.43%)</title><rect x="310.0" y="1123.0" width="736.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.0" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/970167631.run (522 samples, 42.54%)</title><rect x="313.9" y="1107.0" width="502.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.9" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/9701..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53 (522 samples, 42.54%)</title><rect x="313.9" y="1091.0" width="502.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="316.9" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (522 samples, 42.54%)</title><rect x="313.9" y="1075.0" width="502.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.9" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (517 samples, 42.14%)</title><rect x="313.9" y="1059.0" width="497.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.9" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="327.4" y="1043.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (188 samples, 15.32%)</title><rect x="329.3" y="1043.0" width="180.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.3" y="1054.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (188 samples, 15.32%)</title><rect x="329.3" y="1027.0" width="180.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.3" y="1038.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (188 samples, 15.32%)</title><rect x="329.3" y="1011.0" width="180.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.3" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (188 samples, 15.32%)</title><rect x="329.3" y="995.0" width="180.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.3" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (188 samples, 15.32%)</title><rect x="329.3" y="979.0" width="180.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.3" y="990.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (188 samples, 15.32%)</title><rect x="329.3" y="963.0" width="180.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="974.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (65 samples, 5.30%)</title><rect x="329.3" y="947.0" width="62.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.3" y="958.0">com/fa..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="347.6" y="931.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="350.6" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="347.6" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.6" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (15 samples, 1.22%)</title><rect x="348.5" y="931.0" width="14.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="351.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.98%)</title><rect x="351.4" y="915.0" width="11.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="354.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.49%)</title><rect x="362.9" y="931.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.49%)</title><rect x="362.9" y="915.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.49%)</title><rect x="362.9" y="899.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.49%)</title><rect x="362.9" y="883.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.49%)</title><rect x="362.9" y="867.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.49%)</title><rect x="362.9" y="851.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.49%)</title><rect x="362.9" y="835.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.79%)</title><rect x="368.7" y="931.0" width="21.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.7" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 0.49%)</title><rect x="384.1" y="915.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.24%)</title><rect x="384.1" y="899.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.24%)</title><rect x="384.1" y="883.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="387.0" y="899.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="387.0" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="390.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="387.0" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="390.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="387.0" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="390.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="387.9" y="883.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.08%)</title><rect x="387.9" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="387.9" y="851.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="390.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="387.9" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="390.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="387.9" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="390.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="387.9" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.9" y="814.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="387.9" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="390.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="388.9" y="899.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="388.9" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="391.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="388.9" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="391.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="388.9" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="391.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="388.9" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="391.9" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="388.9" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="391.9" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="389.9" y="931.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (114 samples, 9.29%)</title><rect x="391.8" y="947.0" width="109.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.8" y="958.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="391.8" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="392.8" y="931.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.08%)</title><rect x="394.7" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.16%)</title><rect x="395.6" y="931.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="395.6" y="915.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.14%)</title><rect x="397.6" y="931.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="400.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.14%)</title><rect x="397.6" y="915.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="400.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (13 samples, 1.06%)</title><rect x="397.6" y="899.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (12 samples, 0.98%)</title><rect x="398.5" y="883.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.24%)</title><rect x="407.2" y="867.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="410.1" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.57%)</title><rect x="411.0" y="931.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.41%)</title><rect x="413.0" y="915.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (84 samples, 6.85%)</title><rect x="417.8" y="931.0" width="80.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.8" y="942.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.71%)</title><rect x="420.6" y="915.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.49%)</title><rect x="420.6" y="899.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.49%)</title><rect x="420.6" y="883.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.49%)</title><rect x="420.6" y="867.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.49%)</title><rect x="420.6" y="851.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="424.5" y="835.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.90%)</title><rect x="426.4" y="899.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.41%)</title><rect x="426.4" y="883.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.49%)</title><rect x="431.2" y="883.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.49%)</title><rect x="431.2" y="867.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 0.41%)</title><rect x="432.2" y="851.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (5 samples, 0.41%)</title><rect x="432.2" y="835.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.33%)</title><rect x="437.0" y="899.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.33%)</title><rect x="437.0" y="883.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (60 samples, 4.89%)</title><rect x="440.8" y="915.0" width="57.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.8" y="926.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (60 samples, 4.89%)</title><rect x="440.8" y="899.0" width="57.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.8" y="910.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (59 samples, 4.81%)</title><rect x="441.8" y="883.0" width="56.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.8" y="894.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.04%)</title><rect x="445.6" y="867.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.6" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (6 samples, 0.49%)</title><rect x="447.6" y="851.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.73%)</title><rect x="453.3" y="851.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="456.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.73%)</title><rect x="453.3" y="835.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.73%)</title><rect x="453.3" y="819.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="453.3" y="803.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.57%)</title><rect x="455.3" y="803.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.41%)</title><rect x="457.2" y="787.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.24%)</title><rect x="459.1" y="771.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.24%)</title><rect x="459.1" y="755.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="462.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="462.0" y="851.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="462.0" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="463.0" y="835.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="463.0" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="463.9" y="851.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="463.9" y="835.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (4 samples, 0.33%)</title><rect x="465.8" y="851.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.98%)</title><rect x="469.7" y="867.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.81%)</title><rect x="471.6" y="851.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.81%)</title><rect x="471.6" y="835.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.81%)</title><rect x="471.6" y="819.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.81%)</title><rect x="471.6" y="803.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.81%)</title><rect x="481.2" y="867.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.81%)</title><rect x="481.2" y="851.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.81%)</title><rect x="481.2" y="835.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.81%)</title><rect x="481.2" y="819.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.2" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.73%)</title><rect x="482.2" y="803.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.2" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.73%)</title><rect x="482.2" y="787.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.2" y="798.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (9 samples, 0.73%)</title><rect x="482.2" y="771.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.24%)</title><rect x="490.8" y="867.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="490.8" y="851.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="490.8" y="835.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.08%)</title><rect x="492.8" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.33%)</title><rect x="493.7" y="867.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.7" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.08%)</title><rect x="497.6" y="867.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.24%)</title><rect x="498.5" y="931.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.73%)</title><rect x="501.4" y="947.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.73%)</title><rect x="501.4" y="931.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.73%)</title><rect x="501.4" y="915.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.73%)</title><rect x="501.4" y="899.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.73%)</title><rect x="501.4" y="883.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (290 samples, 23.63%)</title><rect x="510.1" y="1043.0" width="278.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.1" y="1054.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (48 samples, 3.91%)</title><rect x="511.0" y="1027.0" width="46.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="514.0" y="1038.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 3.91%)</title><rect x="511.0" y="1011.0" width="46.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="514.0" y="1022.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.75%)</title><rect x="513.0" y="995.0" width="44.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="516.0" y="1006.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.90%)</title><rect x="513.0" y="979.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="516.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="514.9" y="963.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="514.9" y="947.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="517.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.24%)</title><rect x="514.9" y="931.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.49%)</title><rect x="517.8" y="963.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.49%)</title><rect x="517.8" y="947.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.49%)</title><rect x="517.8" y="931.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.90%)</title><rect x="523.5" y="979.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="533.2" y="963.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="533.2" y="947.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 1.96%)</title><rect x="534.1" y="979.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.1" y="990.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.49%)</title><rect x="549.5" y="963.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="549.5" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="549.5" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="552.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.41%)</title><rect x="550.5" y="947.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="555.3" y="963.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.57%)</title><rect x="557.2" y="1027.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="558.2" y="1011.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="558.2" y="995.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="563.0" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="566.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (157 samples, 12.80%)</title><rect x="563.9" y="1027.0" width="151.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.9" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (157 samples, 12.80%)</title><rect x="563.9" y="1011.0" width="151.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.9" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="571.6" y="995.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="574.6" y="1006.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="572.6" y="979.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="575.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.56%)</title><rect x="576.4" y="995.0" width="53.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.4" y="1006.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 1.96%)</title><rect x="591.8" y="979.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.8" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 1.79%)</title><rect x="593.7" y="963.0" width="21.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="596.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.57%)</title><rect x="603.4" y="947.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.4" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.57%)</title><rect x="603.4" y="931.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.4" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.57%)</title><rect x="603.4" y="915.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.41%)</title><rect x="604.3" y="899.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.3" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="604.3" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.3" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="604.3" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.3" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="604.3" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.3" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.33%)</title><rect x="605.3" y="883.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.24%)</title><rect x="605.3" y="867.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="608.3" y="878.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="606.3" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.3" y="862.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="607.2" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="610.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="608.2" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="611.2" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="609.1" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="610.1" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.1" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="611.1" y="947.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="614.1" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="612.0" y="947.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="615.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="614.9" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="614.9" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.9" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="614.9" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.9" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.24%)</title><rect x="615.9" y="979.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="618.9" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.98%)</title><rect x="618.8" y="979.0" width="11.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="621.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="630.3" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="633.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.41%)</title><rect x="631.3" y="995.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="631.3" y="979.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="631.3" y="963.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.3" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="631.3" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.33%)</title><rect x="632.2" y="979.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="632.2" y="963.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="635.1" y="947.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.1" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.60%)</title><rect x="636.1" y="995.0" width="77.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.1" y="1006.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.52%)</title><rect x="637.0" y="979.0" width="77.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.0" y="990.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.08%)</title><rect x="637.0" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.08%)</title><rect x="637.0" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="637.0" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="637.0" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 6.44%)</title><rect x="638.0" y="963.0" width="76.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.0" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 5.79%)</title><rect x="645.7" y="947.0" width="68.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.7" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.93%)</title><rect x="679.3" y="931.0" width="34.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.3" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="697.6" y="915.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.06%)</title><rect x="699.5" y="915.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.5" y="926.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="712.0" y="915.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="715.0" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="714.0" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 4.16%)</title><rect x="714.9" y="1027.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="717.9" y="1038.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.08%)</title><rect x="715.9" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="718.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="715.9" y="995.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 3.99%)</title><rect x="716.8" y="1011.0" width="47.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.8" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/595503665.process (25 samples, 2.04%)</title><rect x="723.6" y="995.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.6" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.04%)</title><rect x="723.6" y="979.0" width="24.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="726.6" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 1.71%)</title><rect x="725.5" y="963.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.5" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="733.2" y="947.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.2" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="733.2" y="931.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.2" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.24%)</title><rect x="733.2" y="915.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.2" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.24%)</title><rect x="733.2" y="899.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.24%)</title><rect x="733.2" y="883.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="735.1" y="867.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.73%)</title><rect x="736.1" y="947.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.1" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.57%)</title><rect x="738.0" y="931.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="739.0" y="915.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="742.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="744.7" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="745.7" y="963.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="745.7" y="947.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="745.7" y="931.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="745.7" y="915.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="745.7" y="899.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.08%)</title><rect x="747.6" y="995.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="748.6" y="995.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.6" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="748.6" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="751.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="748.6" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="748.6" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="751.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="749.5" y="979.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.24%)</title><rect x="752.4" y="995.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.24%)</title><rect x="752.4" y="979.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="755.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.33%)</title><rect x="755.3" y="995.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.33%)</title><rect x="755.3" y="979.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.3" y="990.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="755.3" y="963.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="758.3" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="758.2" y="963.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.2" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.41%)</title><rect x="759.2" y="995.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.24%)</title><rect x="761.1" y="979.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="764.0" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="764.0" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="764.0" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="764.0" y="979.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="767.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="764.0" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="767.0" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="764.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.04%)</title><rect x="764.9" y="1027.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.9" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 2.04%)</title><rect x="764.9" y="1011.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.9" y="1022.0">j..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.73%)</title><rect x="774.5" y="995.0" width="8.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="777.5" y="1006.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="775.5" y="979.0" width="7.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="778.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.49%)</title><rect x="783.2" y="995.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="786.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$299/1459806129.accept (6 samples, 0.49%)</title><rect x="783.2" y="979.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="786.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (6 samples, 0.49%)</title><rect x="783.2" y="963.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.49%)</title><rect x="783.2" y="947.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="786.2" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.49%)</title><rect x="783.2" y="931.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.2" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.49%)</title><rect x="783.2" y="915.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.2" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="786.1" y="899.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="789.1" y="910.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="786.1" y="883.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="789.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.30%)</title><rect x="789.0" y="1043.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="792.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.30%)</title><rect x="789.0" y="1027.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="791.9" y="1011.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.98%)</title><rect x="792.8" y="1011.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$300/2043660281.accept (12 samples, 0.98%)</title><rect x="792.8" y="995.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (12 samples, 0.98%)</title><rect x="792.8" y="979.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/304468808.complete (12 samples, 0.98%)</title><rect x="792.8" y="963.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$59 (12 samples, 0.98%)</title><rect x="792.8" y="947.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/1598797186.complete (12 samples, 0.98%)</title><rect x="792.8" y="931.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$73 (12 samples, 0.98%)</title><rect x="792.8" y="915.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 0.98%)</title><rect x="792.8" y="899.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.8" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.98%)</title><rect x="792.8" y="883.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.8" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.98%)</title><rect x="792.8" y="867.0" width="11.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.8" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.98%)</title><rect x="792.8" y="851.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.8" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.57%)</title><rect x="804.4" y="1043.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="807.4" y="1054.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="804.4" y="1027.0" width="6.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="807.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.41%)</title><rect x="811.1" y="1059.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.1" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="811.1" y="1043.0" width="4.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="814.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="811.1" y="1027.0" width="4.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="814.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.65%)</title><rect x="815.9" y="1107.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.65%)</title><rect x="815.9" y="1091.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.65%)</title><rect x="815.9" y="1075.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.65%)</title><rect x="815.9" y="1059.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/970167631.run (4 samples, 0.33%)</title><rect x="819.7" y="1043.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (232 samples, 18.91%)</title><rect x="823.6" y="1107.0" width="223.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.6" y="1118.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (230 samples, 18.74%)</title><rect x="825.5" y="1091.0" width="221.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.5" y="1102.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (199 samples, 16.22%)</title><rect x="838.0" y="1075.0" width="191.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="841.0" y="1086.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.90%)</title><rect x="845.7" y="1059.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.90%)</title><rect x="845.7" y="1043.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.90%)</title><rect x="845.7" y="1027.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.90%)</title><rect x="845.7" y="1011.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.49%)</title><rect x="856.3" y="1059.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.49%)</title><rect x="856.3" y="1043.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="859.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 14.18%)</title><rect x="862.1" y="1059.0" width="167.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="865.1" y="1070.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (174 samples, 14.18%)</title><rect x="862.1" y="1043.0" width="167.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.1" y="1054.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="868.8" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.8" y="1038.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="869.8" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.8" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Park (164 samples, 13.37%)</title><rect x="870.7" y="1027.0" width="157.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="873.7" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="878.4" y="1011.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="881.4" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.63%)</title><rect x="880.3" y="1011.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.3" y="1022.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.57%)</title><rect x="887.1" y="995.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="889.0" y="979.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.0" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.24%)</title><rect x="889.0" y="963.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.0" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="891.9" y="979.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.9" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="893.8" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.8" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.41%)</title><rect x="894.8" y="995.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.8" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="899.6" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="902.6" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="900.5" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.5" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="901.5" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.5" y="1022.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="902.5" y="1011.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="905.5" y="1022.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.73%)</title><rect x="903.4" y="1011.0" width="8.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="906.4" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.77%)</title><rect x="912.1" y="1011.0" width="32.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="915.1" y="1022.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (66 samples, 5.38%)</title><rect x="944.8" y="1011.0" width="63.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="947.8" y="1022.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="1008.2" y="1011.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1011.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.24%)</title><rect x="1009.2" y="1011.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1012.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="1012.1" y="1011.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1015.1" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.41%)</title><rect x="1013.0" y="1011.0" width="4.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1016.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="1017.9" y="1011.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1020.9" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="1021.7" y="1011.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1024.7" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="1023.6" y="1011.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.6" y="1022.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1026.5" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.5" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1027.5" y="1011.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1030.5" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1028.4" y="1027.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1031.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="1029.4" y="1075.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="1029.4" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1032.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="1029.4" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="1029.4" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.39%)</title><rect x="1030.4" y="1075.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1033.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.39%)</title><rect x="1030.4" y="1059.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.39%)</title><rect x="1030.4" y="1043.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1033.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.39%)</title><rect x="1030.4" y="1027.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1046.7" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1046.7" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1046.7" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="1046.7" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="1046.7" y="1091.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="1046.7" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="1046.7" y="1059.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="1046.7" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="1046.7" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1049.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="1046.7" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1049.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="1046.7" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="1046.7" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1049.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.validate (1 samples, 0.08%)</title><rect x="1046.7" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1049.7" y="974.0"></text>
</g>
<g>
<title>start_thread (148 samples, 12.06%)</title><rect x="1047.7" y="1155.0" width="142.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1050.7" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (148 samples, 12.06%)</title><rect x="1047.7" y="1139.0" width="142.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1050.7" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.96%)</title><rect x="1047.7" y="1123.0" width="23.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.7" y="1134.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="1047.7" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.7" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="1047.7" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.7" y="1102.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1047.7" y="1075.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1050.7" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 1.79%)</title><rect x="1048.6" y="1107.0" width="21.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.6" y="1118.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.49%)</title><rect x="1048.6" y="1091.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.6" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1048.6" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.6" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1048.6" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.6" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.08%)</title><rect x="1048.6" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.6" y="1054.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.16%)</title><rect x="1049.6" y="1075.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.6" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1051.5" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.5" y="1086.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1052.5" y="1075.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1055.5" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (11 samples, 0.90%)</title><rect x="1054.4" y="1091.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.4" y="1102.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1054.4" y="1075.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.4" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="1055.4" y="1075.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.4" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.24%)</title><rect x="1055.4" y="1059.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.4" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.24%)</title><rect x="1055.4" y="1043.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.4" y="1054.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.24%)</title><rect x="1055.4" y="1027.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.4" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.57%)</title><rect x="1058.2" y="1075.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 0.49%)</title><rect x="1058.2" y="1059.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.2" y="1070.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1063.1" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.1" y="1054.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1063.1" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.1" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1064.0" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.0" y="1070.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1064.0" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.0" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1065.0" y="1091.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.0" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1065.0" y="1075.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1065.0" y="1059.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.0" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="1065.0" y="1043.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.0" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="1065.0" y="1027.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.0" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="1065.0" y="1011.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.0" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.24%)</title><rect x="1065.9" y="995.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.9" y="1006.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1066.9" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1067.9" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.9" y="990.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="1067.9" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.9" y="974.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1068.8" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1068.8" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.8" y="1054.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1068.8" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.8" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1068.8" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.8" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1069.8" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.8" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1069.8" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.8" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="1069.8" y="1075.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1072.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (122 samples, 9.94%)</title><rect x="1070.7" y="1123.0" width="117.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.7" y="1134.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (122 samples, 9.94%)</title><rect x="1070.7" y="1107.0" width="117.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.7" y="1118.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (121 samples, 9.86%)</title><rect x="1070.7" y="1091.0" width="116.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.7" y="1102.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (121 samples, 9.86%)</title><rect x="1070.7" y="1075.0" width="116.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.7" y="1086.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (119 samples, 9.70%)</title><rect x="1070.7" y="1059.0" width="114.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.7" y="1070.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (119 samples, 9.70%)</title><rect x="1070.7" y="1043.0" width="114.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.7" y="1054.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 4.81%)</title><rect x="1070.7" y="1027.0" width="56.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.7" y="1038.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1070.7" y="1011.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.7" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1070.7" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.7" y="1006.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1070.7" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.7" y="990.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1070.7" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.7" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.41%)</title><rect x="1071.7" y="1011.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.7" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.24%)</title><rect x="1072.7" y="995.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.7" y="1006.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1072.7" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.7" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.08%)</title><rect x="1073.6" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.6" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1074.6" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.6" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1074.6" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.6" y="974.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.08%)</title><rect x="1075.6" y="995.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.41%)</title><rect x="1076.5" y="1011.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.5" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.41%)</title><rect x="1076.5" y="995.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.5" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1076.5" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.5" y="990.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.08%)</title><rect x="1077.5" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.5" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1078.4" y="979.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.4" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.16%)</title><rect x="1078.4" y="963.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1078.4" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.4" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1078.4" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1078.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.4" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1078.4" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.4" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1079.4" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.4" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1079.4" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.4" y="942.0"></text>
</g>
<g>
<title>LoadNode::match_edge(unsigned int) const (1 samples, 0.08%)</title><rect x="1079.4" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.4" y="926.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1080.4" y="979.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.4" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1081.3" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.3" y="1022.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.08%)</title><rect x="1081.3" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.41%)</title><rect x="1082.3" y="1011.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.41%)</title><rect x="1082.3" y="995.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.33%)</title><rect x="1082.3" y="979.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.3" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.16%)</title><rect x="1082.3" y="963.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.3" y="974.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.08%)</title><rect x="1083.3" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1084.2" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.2" y="974.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1084.2" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.2" y="958.0"></text>
</g>
<g>
<title>decodeHeapOopNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1085.2" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1086.1" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 3.42%)</title><rect x="1087.1" y="1011.0" width="40.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.1" y="1022.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1088.1" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1089.0" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.0" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1090.0" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.16%)</title><rect x="1090.9" y="995.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="1090.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1091.9" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1091.9" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="1092.9" y="995.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="1092.9" y="979.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1093.8" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.33%)</title><rect x="1094.8" y="995.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.8" y="1006.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.08%)</title><rect x="1095.8" y="979.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1096.7" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.7" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1096.7" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1097.7" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.98%)</title><rect x="1098.6" y="995.0" width="11.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.6" y="1006.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.16%)</title><rect x="1102.5" y="979.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1104.4" y="979.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.24%)</title><rect x="1106.3" y="979.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1108.3" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.3" y="974.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.08%)</title><rect x="1109.2" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1110.2" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1110.2" y="979.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1110.2" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.49%)</title><rect x="1111.1" y="995.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="1114.0" y="979.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="990.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1115.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1115.9" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.9" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1115.9" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.16%)</title><rect x="1116.9" y="995.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.16%)</title><rect x="1116.9" y="979.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.9" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1118.8" y="995.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1118.8" y="979.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1118.8" y="963.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.8" y="974.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1118.8" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.8" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1119.8" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1120.8" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1120.8" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.8" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1121.7" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1121.7" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.7" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1122.7" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.7" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1122.7" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.16%)</title><rect x="1123.6" y="995.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.6" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1123.6" y="979.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.6" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1124.6" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.6" y="974.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.08%)</title><rect x="1124.6" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.6" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.16%)</title><rect x="1125.6" y="995.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1128.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (50 samples, 4.07%)</title><rect x="1127.5" y="1027.0" width="48.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.5" y="1038.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.24%)</title><rect x="1127.5" y="1011.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.24%)</title><rect x="1127.5" y="995.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) (1 samples, 0.08%)</title><rect x="1127.5" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1128.5" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1128.5" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1129.4" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="910.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1129.4" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.4" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1130.4" y="1011.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1130.4" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="1130.4" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.4" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1130.4" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.4" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1130.4" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 2.53%)</title><rect x="1131.3" y="1011.0" width="29.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.3" y="1022.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1131.3" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1131.3" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1131.3" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1131.3" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="958.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1131.3" y="931.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1134.3" y="942.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1132.3" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.24%)</title><rect x="1133.3" y="995.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.16%)</title><rect x="1134.2" y="979.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1136.1" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 1.71%)</title><rect x="1137.1" y="995.0" width="20.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 1.55%)</title><rect x="1139.0" y="979.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 1.47%)</title><rect x="1140.0" y="963.0" width="17.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1152.5" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1152.5" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.24%)</title><rect x="1153.5" y="947.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1156.3" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1157.3" y="995.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1159.2" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1159.2" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1159.2" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1160.2" y="995.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1163.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.14%)</title><rect x="1161.1" y="1011.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.06%)</title><rect x="1161.1" y="995.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.1" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.1" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="974.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1163.1" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1163.1" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1163.1" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1163.1" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.1" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1163.1" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.1" y="926.0"></text>
</g>
<g>
<title>ciMetadata::is_loaded() const (1 samples, 0.08%)</title><rect x="1163.1" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.1" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.16%)</title><rect x="1164.0" y="979.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.0" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1165.0" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="974.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1165.0" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="958.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1165.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1166.0" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1166.9" y="979.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1166.9" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="974.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1166.9" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="958.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1166.9" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1168.8" y="979.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="990.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.16%)</title><rect x="1168.8" y="963.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1170.8" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="990.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1170.8" y="963.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.7" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.7" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.7" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1172.7" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.7" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.7" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.7" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.7" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.7" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.7" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.7" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.7" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="894.0"></text>
</g>
<g>
<title>SafePointNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.7" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1174.6" y="1011.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1174.6" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1174.6" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="990.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1174.6" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="974.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1174.6" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.73%)</title><rect x="1175.6" y="1027.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.73%)</title><rect x="1175.6" y="1011.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.65%)</title><rect x="1175.6" y="995.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.65%)</title><rect x="1175.6" y="979.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.65%)</title><rect x="1175.6" y="963.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.65%)</title><rect x="1175.6" y="947.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1175.6" y="931.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1175.6" y="915.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1175.6" y="899.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1175.6" y="883.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1175.6" y="867.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1175.6" y="851.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.6" y="835.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1175.6" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.6" y="803.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.6" y="787.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.6" y="771.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1175.6" y="755.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.6" y="739.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1175.6" y="723.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.6" y="707.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.6" y="691.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.6" y="675.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.6" y="659.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.6" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.08%)</title><rect x="1175.6" y="627.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.6" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.6" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="606.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.6" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="590.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="1175.6" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="654.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1176.5" y="627.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1176.5" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1176.5" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.5" y="606.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1176.5" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="590.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.08%)</title><rect x="1176.5" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.08%)</title><rect x="1176.5" y="531.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.5" y="542.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1176.5" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.5" y="835.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.5" y="819.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1177.5" y="803.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1177.5" y="787.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1177.5" y="771.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1177.5" y="755.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1177.5" y="739.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.5" y="723.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1177.5" y="707.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1177.5" y="691.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1177.5" y="675.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1177.5" y="659.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1177.5" y="643.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.5" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.5" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.5" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.5" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.5" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.5" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.5" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.5" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.5" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.5" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.5" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.5" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="435.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.5" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1178.5" y="627.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1178.5" y="611.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1178.5" y="595.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1178.5" y="579.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1178.5" y="563.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1178.5" y="547.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1178.5" y="531.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.5" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.5" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.5" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.5" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.5" y="451.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.5" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.5" y="419.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.5" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.5" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.5" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.5" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.5" y="339.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="350.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1178.5" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="334.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1178.5" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="451.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.4" y="419.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.4" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1179.4" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1179.4" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1179.4" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.4" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.4" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.4" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1179.4" y="179.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1179.4" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.4" y="131.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.4" y="115.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="126.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1179.4" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="83.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1179.4" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1179.4" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="62.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (1 samples, 0.08%)</title><rect x="1179.4" y="35.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.4" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="803.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1180.4" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="931.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="915.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.3" y="899.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.3" y="883.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.3" y="867.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.3" y="851.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="835.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.3" y="803.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.3" y="787.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.3" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.3" y="755.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="739.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.3" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.3" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.3" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.3" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.3" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.3" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.3" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1181.3" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.3" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.3" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1181.3" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1181.3" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.3" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="1181.3" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1183.3" y="995.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>ReplacedNodes::apply(Node*) (1 samples, 0.08%)</title><rect x="1183.3" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1184.2" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1038.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.2" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.16%)</title><rect x="1185.2" y="1059.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.16%)</title><rect x="1185.2" y="1043.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.16%)</title><rect x="1185.2" y="1027.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.16%)</title><rect x="1185.2" y="1011.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1185.2" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.2" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="990.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1185.2" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1185.2" y="947.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1185.2" y="931.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1185.2" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1185.2" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.2" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.2" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="990.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.08%)</title><rect x="1186.2" y="963.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.2" y="974.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.08%)</title><rect x="1186.2" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.08%)</title><rect x="1186.2" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="942.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.1" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1102.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.1" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="1070.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1043.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1190.1" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.1" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1187.1" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1123.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="1134.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1107.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1118.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1091.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.1" y="1102.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1075.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1086.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1059.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="1043.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1054.0"></text>
</g>
<g>
<title>G1CodeRootSet::purge() (1 samples, 0.08%)</title><rect x="1188.1" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_end(double, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
<g>
<title>__ceil_sse41 (1 samples, 0.08%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
</g>
</svg>
