<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (368 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 7.34%)</title><rect x="10.0" y="1315.0" width="86.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/CommitManager.maybeCommitAsync (2 samples, 0.54%)</title><rect x="10.0" y="1299.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/CommitManager.commitAsync (2 samples, 0.54%)</title><rect x="10.0" y="1283.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.54%)</title><rect x="10.0" y="1267.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.54%)</title><rect x="10.0" y="1251.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (2 samples, 0.54%)</title><rect x="10.0" y="1235.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (2 samples, 0.54%)</title><rect x="10.0" y="1219.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.27%)</title><rect x="13.2" y="1203.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.poll (25 samples, 6.79%)</title><rect x="16.4" y="1299.0" width="80.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.4" y="1310.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager.pausePartitions (2 samples, 0.54%)</title><rect x="16.4" y="1283.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.4" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.27%)</title><rect x="16.4" y="1267.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.27%)</title><rect x="19.6" y="1267.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="19.6" y="1251.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="19.6" y="1235.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="19.6" y="1219.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="19.6" y="1203.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="19.6" y="1187.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.27%)</title><rect x="19.6" y="1171.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.27%)</title><rect x="19.6" y="1155.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 2.45%)</title><rect x="22.8" y="1283.0" width="28.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.8" y="1294.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ConsumeManager$$Lambda$259/431741987.accept (9 samples, 2.45%)</title><rect x="22.8" y="1267.0" width="28.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.8" y="1278.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (9 samples, 2.45%)</title><rect x="22.8" y="1251.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1262.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.09%)</title><rect x="32.4" y="1235.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.09%)</title><rect x="32.4" y="1219.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.09%)</title><rect x="32.4" y="1203.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.09%)</title><rect x="32.4" y="1187.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.09%)</title><rect x="32.4" y="1171.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.09%)</title><rect x="32.4" y="1155.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.27%)</title><rect x="42.1" y="1139.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.27%)</title><rect x="42.1" y="1123.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.27%)</title><rect x="42.1" y="1107.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.54%)</title><rect x="45.3" y="1235.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.54%)</title><rect x="45.3" y="1219.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.80%)</title><rect x="51.7" y="1283.0" width="44.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.7" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.80%)</title><rect x="51.7" y="1267.0" width="44.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.72%)</title><rect x="51.7" y="1251.0" width="32.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.7" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.27%)</title><rect x="51.7" y="1235.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.27%)</title><rect x="51.7" y="1219.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.7" y="1230.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.27%)</title><rect x="51.7" y="1203.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.7" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.27%)</title><rect x="51.7" y="1187.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.7" y="1198.0"></text>
</g>
<g>
<title>ServiceUtil::visible_oop(oopDesc*) (1 samples, 0.27%)</title><rect x="51.7" y="1171.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.09%)</title><rect x="54.9" y="1235.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.09%)</title><rect x="54.9" y="1219.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.09%)</title><rect x="54.9" y="1203.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.54%)</title><rect x="54.9" y="1187.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.54%)</title><rect x="54.9" y="1171.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.27%)</title><rect x="54.9" y="1155.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="54.9" y="1139.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.27%)</title><rect x="54.9" y="1123.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="54.9" y="1107.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="54.9" y="1091.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.27%)</title><rect x="54.9" y="1075.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.27%)</title><rect x="58.1" y="1155.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.54%)</title><rect x="61.3" y="1187.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.54%)</title><rect x="61.3" y="1171.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.27%)</title><rect x="61.3" y="1155.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.27%)</title><rect x="61.3" y="1139.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="61.3" y="1123.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="64.3" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="61.3" y="1107.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.27%)</title><rect x="64.5" y="1155.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.27%)</title><rect x="64.5" y="1139.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.27%)</title><rect x="64.5" y="1123.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.27%)</title><rect x="64.5" y="1107.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.27%)</title><rect x="64.5" y="1091.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.27%)</title><rect x="64.5" y="1075.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.5" y="1086.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="64.5" y="1059.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="67.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.09%)</title><rect x="67.7" y="1235.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.09%)</title><rect x="67.7" y="1219.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.09%)</title><rect x="67.7" y="1203.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.09%)</title><rect x="67.7" y="1187.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.82%)</title><rect x="67.7" y="1171.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.54%)</title><rect x="70.9" y="1155.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.27%)</title><rect x="74.1" y="1139.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.27%)</title><rect x="74.1" y="1123.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.27%)</title><rect x="74.1" y="1107.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.27%)</title><rect x="74.1" y="1091.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.27%)</title><rect x="74.1" y="1075.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.27%)</title><rect x="74.1" y="1059.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.27%)</title><rect x="77.3" y="1171.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.27%)</title><rect x="77.3" y="1155.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.27%)</title><rect x="77.3" y="1139.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.3" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.27%)</title><rect x="77.3" y="1123.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="80.5" y="1235.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="80.5" y="1219.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.add (1 samples, 0.27%)</title><rect x="80.5" y="1203.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.27%)</title><rect x="80.5" y="1187.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="80.5" y="1171.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.5" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.27%)</title><rect x="80.5" y="1155.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.54%)</title><rect x="83.7" y="1251.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.27%)</title><rect x="83.7" y="1235.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.27%)</title><rect x="83.7" y="1219.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.27%)</title><rect x="83.7" y="1203.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.27%)</title><rect x="83.7" y="1187.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.27%)</title><rect x="87.0" y="1235.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.27%)</title><rect x="87.0" y="1219.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.27%)</title><rect x="87.0" y="1203.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.27%)</title><rect x="90.2" y="1251.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="90.2" y="1235.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.27%)</title><rect x="90.2" y="1219.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.27%)</title><rect x="90.2" y="1203.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.27%)</title><rect x="90.2" y="1187.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.27%)</title><rect x="90.2" y="1171.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.27%)</title><rect x="90.2" y="1155.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.27%)</title><rect x="90.2" y="1139.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.27%)</title><rect x="90.2" y="1123.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.2" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.27%)</title><rect x="90.2" y="1107.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="93.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="93.4" y="1251.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.metadata (1 samples, 0.27%)</title><rect x="93.4" y="1235.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (246 samples, 66.85%)</title><rect x="96.6" y="1315.0" width="788.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.6" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (246 samples, 66.85%)</title><rect x="96.6" y="1299.0" width="788.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.6" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (246 samples, 66.85%)</title><rect x="96.6" y="1283.0" width="788.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.6" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/470410436.run (235 samples, 63.86%)</title><rect x="96.6" y="1267.0" width="753.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/470410436.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53 (235 samples, 63.86%)</title><rect x="96.6" y="1251.0" width="753.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.6" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$53</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (235 samples, 63.86%)</title><rect x="96.6" y="1235.0" width="753.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.6" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (232 samples, 63.04%)</title><rect x="96.6" y="1219.0" width="743.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.6" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="103.0" y="1203.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="106.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="103.0" y="1187.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="106.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (51 samples, 13.86%)</title><rect x="106.2" y="1203.0" width="163.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.2" y="1214.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (51 samples, 13.86%)</title><rect x="106.2" y="1187.0" width="163.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.2" y="1198.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (51 samples, 13.86%)</title><rect x="106.2" y="1171.0" width="163.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.2" y="1182.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.54%)</title><rect x="106.2" y="1155.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="109.2" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.54%)</title><rect x="106.2" y="1139.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="109.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 13.32%)</title><rect x="112.6" y="1155.0" width="157.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="1166.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 13.32%)</title><rect x="112.6" y="1139.0" width="157.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.6" y="1150.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (49 samples, 13.32%)</title><rect x="112.6" y="1123.0" width="157.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.6" y="1134.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (20 samples, 5.43%)</title><rect x="112.6" y="1107.0" width="64.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.6" y="1118.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.63%)</title><rect x="112.6" y="1091.0" width="19.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.63%)</title><rect x="112.6" y="1075.0" width="19.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 1.63%)</title><rect x="112.6" y="1059.0" width="19.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.63%)</title><rect x="112.6" y="1043.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 3.80%)</title><rect x="131.8" y="1091.0" width="44.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.8" y="1102.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="131.8" y="1075.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="134.8" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="131.8" y="1059.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="134.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="131.8" y="1043.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="134.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 3.53%)</title><rect x="135.1" y="1075.0" width="41.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.1" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 1.63%)</title><rect x="135.1" y="1059.0" width="19.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 1.63%)</title><rect x="135.1" y="1043.0" width="19.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.36%)</title><rect x="154.3" y="1059.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 1.36%)</title><rect x="154.3" y="1043.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.27%)</title><rect x="157.5" y="1027.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.27%)</title><rect x="160.7" y="1027.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.54%)</title><rect x="163.9" y="1027.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.54%)</title><rect x="170.3" y="1059.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.54%)</title><rect x="170.3" y="1043.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.54%)</title><rect x="170.3" y="1027.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.3" y="1038.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.54%)</title><rect x="170.3" y="1011.0" width="6.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="173.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 6.25%)</title><rect x="176.7" y="1107.0" width="73.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.7" y="1118.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="176.7" y="1091.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.27%)</title><rect x="176.7" y="1075.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.27%)</title><rect x="176.7" y="1059.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.27%)</title><rect x="176.7" y="1043.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.27%)</title><rect x="176.7" y="1027.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.54%)</title><rect x="179.9" y="1091.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="183.2" y="1075.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.27%)</title><rect x="183.2" y="1059.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.27%)</title><rect x="183.2" y="1043.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.2" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="183.2" y="1027.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="186.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="183.2" y="1011.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="186.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="183.2" y="995.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="186.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="183.2" y="979.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="186.2" y="990.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.27%)</title><rect x="183.2" y="963.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="186.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.82%)</title><rect x="186.4" y="1091.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.54%)</title><rect x="189.6" y="1075.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 4.62%)</title><rect x="196.0" y="1091.0" width="54.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.09%)</title><rect x="196.0" y="1075.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.54%)</title><rect x="196.0" y="1059.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.54%)</title><rect x="196.0" y="1043.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.54%)</title><rect x="196.0" y="1027.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.54%)</title><rect x="196.0" y="1011.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.54%)</title><rect x="196.0" y="995.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.54%)</title><rect x="202.4" y="1059.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.27%)</title><rect x="202.4" y="1043.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.27%)</title><rect x="205.6" y="1043.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.27%)</title><rect x="205.6" y="1027.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 3.53%)</title><rect x="208.8" y="1075.0" width="41.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.8" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 3.53%)</title><rect x="208.8" y="1059.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.8" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 3.53%)</title><rect x="208.8" y="1043.0" width="41.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.8" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.36%)</title><rect x="212.0" y="1027.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.27%)</title><rect x="215.2" y="1011.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.54%)</title><rect x="218.4" y="1011.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.54%)</title><rect x="218.4" y="995.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.54%)</title><rect x="218.4" y="979.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.54%)</title><rect x="218.4" y="963.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.27%)</title><rect x="224.8" y="1011.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.27%)</title><rect x="224.8" y="995.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.27%)</title><rect x="224.8" y="979.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.54%)</title><rect x="228.0" y="1027.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.54%)</title><rect x="228.0" y="1011.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.54%)</title><rect x="228.0" y="995.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.54%)</title><rect x="228.0" y="979.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.54%)</title><rect x="228.0" y="963.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.82%)</title><rect x="234.5" y="1027.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.82%)</title><rect x="234.5" y="1011.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.82%)</title><rect x="234.5" y="995.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.82%)</title><rect x="234.5" y="979.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.82%)</title><rect x="234.5" y="963.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.54%)</title><rect x="244.1" y="1027.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.54%)</title><rect x="244.1" y="1011.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.54%)</title><rect x="244.1" y="995.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 1.63%)</title><rect x="250.5" y="1107.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 1.63%)</title><rect x="250.5" y="1091.0" width="19.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 1.63%)</title><rect x="250.5" y="1075.0" width="19.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 1.63%)</title><rect x="250.5" y="1059.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 1.63%)</title><rect x="250.5" y="1043.0" width="19.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (165 samples, 44.84%)</title><rect x="269.7" y="1203.0" width="529.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.7" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (27 samples, 7.34%)</title><rect x="269.7" y="1187.0" width="86.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.7" y="1198.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 7.07%)</title><rect x="272.9" y="1171.0" width="83.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.9" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 5.16%)</title><rect x="295.4" y="1155.0" width="60.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.4" y="1166.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.27%)</title><rect x="317.8" y="1139.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="317.8" y="1123.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="317.8" y="1107.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="317.8" y="1091.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="317.8" y="1075.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 2.99%)</title><rect x="321.0" y="1139.0" width="35.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.0" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 2.99%)</title><rect x="321.0" y="1123.0" width="35.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.0" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 2.99%)</title><rect x="321.0" y="1107.0" width="35.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.0" y="1118.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="356.3" y="1187.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="356.3" y="1171.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="356.3" y="1155.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (37 samples, 10.05%)</title><rect x="359.5" y="1187.0" width="118.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.5" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (37 samples, 10.05%)</title><rect x="359.5" y="1171.0" width="118.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.5" y="1182.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="362.7" y="1155.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="365.7" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="362.7" y="1139.0" width="3.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="365.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (17 samples, 4.62%)</title><rect x="365.9" y="1155.0" width="54.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.9" y="1166.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 3.53%)</title><rect x="375.5" y="1139.0" width="41.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.5" y="1150.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 3.26%)</title><rect x="378.8" y="1123.0" width="38.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.63%)</title><rect x="388.4" y="1107.0" width="19.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.63%)</title><rect x="388.4" y="1091.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.63%)</title><rect x="388.4" y="1075.0" width="19.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.4" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 1.63%)</title><rect x="388.4" y="1059.0" width="19.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="391.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.27%)</title><rect x="388.4" y="1043.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="391.4" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.82%)</title><rect x="391.6" y="1043.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="394.6" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.27%)</title><rect x="391.6" y="1027.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="394.6" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.27%)</title><rect x="394.8" y="1027.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="397.8" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.27%)</title><rect x="398.0" y="1027.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="401.0" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.27%)</title><rect x="398.0" y="1011.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="401.0" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.27%)</title><rect x="398.0" y="995.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.0" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.54%)</title><rect x="401.2" y="1043.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="404.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="404.4" y="1027.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="407.4" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="404.4" y="1011.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.4" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.54%)</title><rect x="407.6" y="1107.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="410.6" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="414.0" y="1107.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="417.0" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="417.2" y="1139.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="420.2" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (18 samples, 4.89%)</title><rect x="420.4" y="1155.0" width="57.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.4" y="1166.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 4.35%)</title><rect x="426.8" y="1139.0" width="51.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.8" y="1150.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.82%)</title><rect x="436.5" y="1123.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.82%)</title><rect x="436.5" y="1107.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.82%)</title><rect x="436.5" y="1091.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.82%)</title><rect x="436.5" y="1075.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.82%)</title><rect x="436.5" y="1059.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.54%)</title><rect x="446.1" y="1123.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.54%)</title><rect x="446.1" y="1107.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.54%)</title><rect x="446.1" y="1091.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.54%)</title><rect x="446.1" y="1075.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="449.3" y="1059.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.17%)</title><rect x="452.5" y="1123.0" width="25.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.17%)</title><rect x="452.5" y="1107.0" width="25.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 1.90%)</title><rect x="455.7" y="1091.0" width="22.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.7" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.09%)</title><rect x="458.9" y="1075.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.9" y="1086.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.54%)</title><rect x="471.7" y="1075.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="474.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (92 samples, 25.00%)</title><rect x="478.2" y="1187.0" width="295.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.2" y="1198.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (92 samples, 25.00%)</title><rect x="478.2" y="1171.0" width="295.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.2" y="1182.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/306540865.process (75 samples, 20.38%)</title><rect x="481.4" y="1155.0" width="240.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="484.4" y="1166.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (74 samples, 20.11%)</title><rect x="484.6" y="1139.0" width="237.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.6" y="1150.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (74 samples, 20.11%)</title><rect x="484.6" y="1123.0" width="237.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.6" y="1134.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (70 samples, 19.02%)</title><rect x="494.2" y="1107.0" width="224.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.2" y="1118.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (70 samples, 19.02%)</title><rect x="494.2" y="1091.0" width="224.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.2" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (62 samples, 16.85%)</title><rect x="516.6" y="1075.0" width="198.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="519.6" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 1.63%)</title><rect x="523.0" y="1059.0" width="19.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="526.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="542.3" y="1059.0" width="6.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="545.3" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.09%)</title><rect x="548.7" y="1059.0" width="12.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="551.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="555.1" y="1043.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="558.1" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 1.36%)</title><rect x="561.5" y="1059.0" width="16.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="564.5" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (43 samples, 11.68%)</title><rect x="577.6" y="1059.0" width="137.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.6" y="1070.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.27%)</title><rect x="596.8" y="1043.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="599.8" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.27%)</title><rect x="596.8" y="1027.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="599.8" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.90%)</title><rect x="600.0" y="1043.0" width="22.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="603.0" y="1054.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.08%)</title><rect x="622.4" y="1043.0" width="48.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="625.4" y="1054.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.27%)</title><rect x="670.5" y="1043.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="673.5" y="1054.0"></text>
</g>
<g>
<title>_init (1 samples, 0.27%)</title><rect x="673.7" y="1043.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="676.7" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 2.99%)</title><rect x="677.0" y="1043.0" width="35.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.0" y="1054.0">os:..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="712.2" y="1043.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="715.2" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="715.4" y="1075.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.27%)</title><rect x="718.6" y="1107.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (4 samples, 1.09%)</title><rect x="721.8" y="1155.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="734.7" y="1155.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="734.7" y="1139.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="737.9" y="1155.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="737.9" y="1139.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.54%)</title><rect x="741.1" y="1155.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.27%)</title><rect x="744.3" y="1139.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.54%)</title><rect x="747.5" y="1155.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="750.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.54%)</title><rect x="747.5" y="1139.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="750.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (6 samples, 1.63%)</title><rect x="753.9" y="1155.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.17%)</title><rect x="773.2" y="1187.0" width="25.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.17%)</title><rect x="773.2" y="1171.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.2" y="1182.0">j..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="795.6" y="1155.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.26%)</title><rect x="798.8" y="1203.0" width="38.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.8" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.26%)</title><rect x="798.8" y="1187.0" width="38.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.8" y="1198.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="798.8" y="1171.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.8" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="798.8" y="1155.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.8" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="798.8" y="1139.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.8" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="798.8" y="1123.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="801.8" y="1134.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.27%)</title><rect x="798.8" y="1107.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.54%)</title><rect x="802.0" y="1171.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.45%)</title><rect x="808.4" y="1171.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="811.4" y="1182.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/696586376.accept (1 samples, 0.27%)</title><rect x="808.4" y="1155.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (1 samples, 0.27%)</title><rect x="808.4" y="1139.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.27%)</title><rect x="808.4" y="1123.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.4" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.27%)</title><rect x="808.4" y="1107.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.4" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.27%)</title><rect x="808.4" y="1091.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/695377402.accept (8 samples, 2.17%)</title><rect x="811.6" y="1155.0" width="25.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.6" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (8 samples, 2.17%)</title><rect x="811.6" y="1139.0" width="25.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.6" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1347997118.complete (8 samples, 2.17%)</title><rect x="811.6" y="1123.0" width="25.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.6" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$59 (8 samples, 2.17%)</title><rect x="811.6" y="1107.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.6" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$276/1931240657.complete (8 samples, 2.17%)</title><rect x="811.6" y="1091.0" width="25.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.6" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$73 (8 samples, 2.17%)</title><rect x="811.6" y="1075.0" width="25.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.6" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 2.17%)</title><rect x="811.6" y="1059.0" width="25.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.6" y="1070.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.17%)</title><rect x="811.6" y="1043.0" width="25.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.6" y="1054.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.27%)</title><rect x="837.3" y="1203.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.3" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="837.3" y="1187.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="840.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.82%)</title><rect x="840.5" y="1219.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 2.99%)</title><rect x="850.1" y="1267.0" width="35.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.1" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.45%)</title><rect x="850.1" y="1251.0" width="28.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.1" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.27%)</title><rect x="869.3" y="1235.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="872.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.27%)</title><rect x="869.3" y="1219.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="872.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.54%)</title><rect x="872.6" y="1235.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.54%)</title><rect x="872.6" y="1219.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.54%)</title><rect x="872.6" y="1203.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.54%)</title><rect x="872.6" y="1187.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.54%)</title><rect x="879.0" y="1251.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="882.0" y="1262.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.27%)</title><rect x="885.4" y="1315.0" width="3.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="888.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.82%)</title><rect x="888.6" y="1315.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="891.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.27%)</title><rect x="888.6" y="1299.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="891.6" y="1310.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.27%)</title><rect x="888.6" y="1283.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="891.6" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.27%)</title><rect x="888.6" y="1267.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.6" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.27%)</title><rect x="888.6" y="1251.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="891.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.54%)</title><rect x="891.8" y="1299.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="894.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.54%)</title><rect x="891.8" y="1283.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.27%)</title><rect x="891.8" y="1267.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.27%)</title><rect x="891.8" y="1251.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="894.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.27%)</title><rect x="895.0" y="1267.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.27%)</title><rect x="895.0" y="1251.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.27%)</title><rect x="895.0" y="1235.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.27%)</title><rect x="895.0" y="1219.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.27%)</title><rect x="895.0" y="1203.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.27%)</title><rect x="895.0" y="1187.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="898.0" y="1198.0"></text>
</g>
<g>
<title>start_thread (91 samples, 24.73%)</title><rect x="898.2" y="1315.0" width="291.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="901.2" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 24.73%)</title><rect x="898.2" y="1299.0" width="291.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="901.2" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 4.08%)</title><rect x="898.2" y="1283.0" width="48.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.2" y="1294.0">Gang..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.27%)</title><rect x="898.2" y="1267.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.2" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.27%)</title><rect x="898.2" y="1251.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.2" y="1262.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.27%)</title><rect x="898.2" y="1235.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.2" y="1246.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 3.80%)</title><rect x="901.4" y="1267.0" width="44.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.4" y="1278.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 3.80%)</title><rect x="901.4" y="1251.0" width="44.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.4" y="1262.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 3.80%)</title><rect x="901.4" y="1235.0" width="44.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.4" y="1246.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 2.72%)</title><rect x="907.8" y="1219.0" width="32.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.8" y="1230.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.09%)</title><rect x="923.9" y="1203.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.9" y="1214.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.27%)</title><rect x="933.5" y="1187.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.5" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.27%)</title><rect x="936.7" y="1203.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.7" y="1214.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.54%)</title><rect x="939.9" y="1219.0" width="6.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="942.9" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 20.65%)</title><rect x="946.3" y="1283.0" width="243.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.3" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 20.65%)</title><rect x="946.3" y="1267.0" width="243.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.3" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 20.65%)</title><rect x="946.3" y="1251.0" width="243.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.3" y="1262.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 20.65%)</title><rect x="946.3" y="1235.0" width="243.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.3" y="1246.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 19.84%)</title><rect x="946.3" y="1219.0" width="234.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.3" y="1230.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 19.84%)</title><rect x="946.3" y="1203.0" width="234.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.3" y="1214.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.27%)</title><rect x="946.3" y="1187.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="949.3" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.27%)</title><rect x="946.3" y="1171.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.3" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="946.3" y="1155.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.3" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="946.3" y="1139.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.3" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="946.3" y="1123.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="949.3" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="946.3" y="1107.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.3" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="946.3" y="1091.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.3" y="1102.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 12.23%)</title><rect x="949.5" y="1187.0" width="144.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.5" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.27%)</title><rect x="949.5" y="1171.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.5" y="1182.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.27%)</title><rect x="949.5" y="1155.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.5" y="1166.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.27%)</title><rect x="949.5" y="1139.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.5" y="1150.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.27%)</title><rect x="949.5" y="1123.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.5" y="1134.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.27%)</title><rect x="949.5" y="1107.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.5" y="1118.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.54%)</title><rect x="952.7" y="1171.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="955.7" y="1182.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.27%)</title><rect x="952.7" y="1155.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="955.7" y="1166.0"></text>
</g>
<g>
<title>loadPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.27%)</title><rect x="955.9" y="1155.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.9" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.36%)</title><rect x="959.1" y="1171.0" width="16.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.36%)</title><rect x="959.1" y="1155.0" width="16.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.1" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.82%)</title><rect x="959.1" y="1139.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.1" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.27%)</title><rect x="968.7" y="1139.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.7" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.27%)</title><rect x="968.7" y="1123.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.7" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.27%)</title><rect x="972.0" y="1139.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.54%)</title><rect x="975.2" y="1171.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.54%)</title><rect x="975.2" y="1155.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.2" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.27%)</title><rect x="975.2" y="1139.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.27%)</title><rect x="978.4" y="1139.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 9.51%)</title><rect x="981.6" y="1171.0" width="112.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.6" y="1182.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.27%)</title><rect x="981.6" y="1155.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.82%)</title><rect x="984.8" y="1155.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.27%)</title><rect x="984.8" y="1139.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.54%)</title><rect x="988.0" y="1139.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.0" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.54%)</title><rect x="988.0" y="1123.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="991.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.54%)</title><rect x="994.4" y="1155.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.27%)</title><rect x="994.4" y="1139.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="997.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.27%)</title><rect x="997.6" y="1139.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.63%)</title><rect x="1000.8" y="1155.0" width="19.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.8" y="1166.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.27%)</title><rect x="1016.8" y="1139.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.36%)</title><rect x="1020.1" y="1155.0" width="16.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1023.1" y="1166.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.27%)</title><rect x="1023.3" y="1139.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.82%)</title><rect x="1026.5" y="1139.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.54%)</title><rect x="1029.7" y="1123.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.82%)</title><rect x="1036.1" y="1155.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.27%)</title><rect x="1042.5" y="1139.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.82%)</title><rect x="1045.7" y="1155.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1052.1" y="1139.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1052.1" y="1123.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.1" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="1052.1" y="1107.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1055.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.36%)</title><rect x="1055.3" y="1155.0" width="16.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.3" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.36%)</title><rect x="1055.3" y="1139.0" width="16.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.3" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 1.36%)</title><rect x="1055.3" y="1123.0" width="16.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.3" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.27%)</title><rect x="1055.3" y="1107.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.3" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.82%)</title><rect x="1058.5" y="1107.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.27%)</title><rect x="1068.2" y="1107.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1071.4" y="1155.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1071.4" y="1139.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.27%)</title><rect x="1074.6" y="1155.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.6" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="1074.6" y="1139.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.6" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.36%)</title><rect x="1077.8" y="1155.0" width="16.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.8" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="1090.6" y="1139.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.6" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 5.71%)</title><rect x="1093.8" y="1187.0" width="67.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.8" y="1198.0">Compile..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.27%)</title><rect x="1093.8" y="1171.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.27%)</title><rect x="1093.8" y="1155.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1093.8" y="1139.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.27%)</title><rect x="1093.8" y="1123.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.8" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.27%)</title><rect x="1097.0" y="1171.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.0" y="1182.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1097.0" y="1155.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 4.08%)</title><rect x="1100.2" y="1171.0" width="48.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.2" y="1182.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.82%)</title><rect x="1100.2" y="1155.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.2" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.27%)</title><rect x="1106.6" y="1139.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 2.72%)</title><rect x="1109.8" y="1155.0" width="32.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.8" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 1.90%)</title><rect x="1119.5" y="1139.0" width="22.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.5" y="1150.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 1.63%)</title><rect x="1119.5" y="1123.0" width="19.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="1135.5" y="1107.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.27%)</title><rect x="1138.7" y="1123.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1141.9" y="1155.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.27%)</title><rect x="1141.9" y="1139.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.27%)</title><rect x="1141.9" y="1123.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.9" y="1134.0"></text>
</g>
<g>
<title>hashptr(void const*) (1 samples, 0.27%)</title><rect x="1141.9" y="1107.0" width="3.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1144.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.27%)</title><rect x="1145.1" y="1155.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.27%)</title><rect x="1145.1" y="1139.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.1" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1145.1" y="1123.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.27%)</title><rect x="1145.1" y="1107.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.09%)</title><rect x="1148.3" y="1171.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.09%)</title><rect x="1148.3" y="1155.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.3" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1151.5" y="1139.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1150.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1151.5" y="1123.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1134.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.27%)</title><rect x="1151.5" y="1107.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1118.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.27%)</title><rect x="1151.5" y="1091.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.5" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1154.7" y="1139.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1157.9" y="1139.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="1157.9" y="1123.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1160.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.36%)</title><rect x="1161.1" y="1187.0" width="16.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.36%)</title><rect x="1161.1" y="1171.0" width="16.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.36%)</title><rect x="1161.1" y="1155.0" width="16.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.36%)</title><rect x="1161.1" y="1139.0" width="16.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.36%)</title><rect x="1161.1" y="1123.0" width="16.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.36%)</title><rect x="1161.1" y="1107.0" width="16.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="1118.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1161.1" y="1091.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1161.1" y="1075.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1161.1" y="1059.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1161.1" y="1043.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1161.1" y="1027.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1161.1" y="1011.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1164.3" y="1091.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1164.3" y="1075.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1164.3" y="1059.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1164.3" y="1043.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1164.3" y="1027.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1164.3" y="1011.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.3" y="995.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.3" y="979.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.3" y="963.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.3" y="947.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.3" y="931.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.3" y="915.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.3" y="899.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.3" y="883.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.3" y="867.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.3" y="851.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.3" y="835.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.3" y="819.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.3" y="803.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.3" y="787.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.3" y="771.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.3" y="755.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.3" y="739.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.3" y="723.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.3" y="707.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.3" y="691.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.3" y="675.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.3" y="659.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.3" y="643.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.27%)</title><rect x="1164.3" y="627.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="638.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.27%)</title><rect x="1164.3" y="611.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="622.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.27%)</title><rect x="1164.3" y="595.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.3" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="995.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="979.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.6" y="963.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.6" y="947.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.6" y="931.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.6" y="915.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.6" y="899.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="883.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.6" y="867.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.6" y="851.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.6" y="835.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.6" y="819.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.6" y="803.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="787.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.6" y="771.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.6" y="755.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.6" y="739.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.6" y="723.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.6" y="707.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="691.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.6" y="675.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.6" y="659.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.6" y="643.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.6" y="627.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.6" y="611.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.6" y="595.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.6" y="579.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.6" y="563.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.6" y="547.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.27%)</title><rect x="1167.6" y="531.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="542.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.27%)</title><rect x="1167.6" y="515.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="526.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.27%)</title><rect x="1167.6" y="499.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="510.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1167.6" y="483.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.6" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1167.6" y="467.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="478.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="1167.6" y="451.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="462.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.27%)</title><rect x="1167.6" y="435.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.6" y="446.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.27%)</title><rect x="1167.6" y="419.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.27%)</title><rect x="1167.6" y="403.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.27%)</title><rect x="1167.6" y="387.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.8" y="531.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.8" y="515.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.8" y="499.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.8" y="483.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.8" y="467.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.8" y="451.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.8" y="435.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.8" y="419.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.8" y="403.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.8" y="387.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.8" y="371.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.8" y="355.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.8" y="339.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.8" y="323.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.8" y="307.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.8" y="291.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.8" y="275.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.8" y="259.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.8" y="243.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.8" y="227.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.8" y="211.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.8" y="195.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.8" y="179.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.8" y="163.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.8" y="147.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.8" y="131.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1170.8" y="115.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1170.8" y="99.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1170.8" y="83.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.27%)</title><rect x="1170.8" y="67.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.8" y="78.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.27%)</title><rect x="1170.8" y="51.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.27%)</title><rect x="1170.8" y="35.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="46.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.27%)</title><rect x="1174.0" y="1091.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.0" y="1102.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.27%)</title><rect x="1177.2" y="1187.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="1198.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.27%)</title><rect x="1177.2" y="1171.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.2" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.82%)</title><rect x="1180.4" y="1219.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.82%)</title><rect x="1180.4" y="1203.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.82%)</title><rect x="1180.4" y="1187.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.82%)</title><rect x="1180.4" y="1171.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.27%)</title><rect x="1180.4" y="1155.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.27%)</title><rect x="1180.4" y="1139.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1183.6" y="1155.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.27%)</title><rect x="1183.6" y="1139.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="1150.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.27%)</title><rect x="1183.6" y="1123.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1134.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.27%)</title><rect x="1183.6" y="1107.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="1118.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.27%)</title><rect x="1183.6" y="1091.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.27%)</title><rect x="1183.6" y="1075.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="1086.0"></text>
</g>
<g>
<title>LinearScan::LinearScan(IR*, LIRGenerator*, FrameMap*) (1 samples, 0.27%)</title><rect x="1186.8" y="1155.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="1166.0"></text>
</g>
</g>
</svg>
